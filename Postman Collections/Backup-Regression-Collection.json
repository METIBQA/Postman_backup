{
	"info": {
		"_postman_id": "2c91bd03-fd82-48a4-8871-b82b1dc4ad16",
		"name": "Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Главная",
			"item": [
				{
					"name": "Операции по рублевым счетам",
					"item": [
						{
							"name": "4554. Проверка фильтрации документов \"Рублевый с СВО\"",
							"item": [
								{
									"name": "Авторизация",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "333e0c0b-9457-4342-9d00-994ee4a0befb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');",
													"",
													"//Дата для использования в теле запроса - действует только для данного запроса",
													"pm.environment.set(\"dateToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
													"",
													"console.log(\"Сегодняшняя дата - \" + pm.variables.get(\"dateToday\"))"
												],
												"type": "text/javascript",
												"id": "1b9de58f-d087-486a-b7dd-1c52749d3a22"
											}
										}
									],
									"id": "6cd179ea-b178-41e7-b18e-8866008fc09a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "{{login}}",
												"password": "{{password}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Радиатор\"",
									"id": "c319273c-de0c-4902-9b5c-a439e031e1b3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"company",
												"change_active",
												"{{id_radiator}}"
											],
											"query": [
												{
													"key": "2037480",
													"value": "Тест",
													"disabled": true
												},
												{
													"key": "7970250",
													"value": "Препрод",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "На подпись - \"Рублевый с СВО\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72a42a4a-269a-4ace-a131-c7812f3638af",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"На подпись - фильтр \\\"Рублевый с СВО\\\"\", function () {",
													"    pm.expect(response.filter.additional).to.eql(\"(requestCode <> '' and responseReceived <> true)\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4dea766c-ea66-4b21-ab6b-8e8cb23f5eb2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"docModule\": \"ibankul\",\n    \"docType\": \"mail2client\",\n    \"filter\": {\n        \"dateFrom\": \"2023-01-01\",\n        \"dateTo\": \"{{dateToday}}\",\n        \"additional\": \"requestCode <> '' and responseReceived <> true\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/pageable/document/page"
									},
									"response": []
								},
								{
									"name": "Планируемые -  \"Рублевый с СВО\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c24459ef-9fe0-49b2-8536-93d368fa72d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c86676cf-6067-483d-ae8a-92a1935d5e48",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Планируемые - фильтр \\\"Рублевый с СВО\\\"\", function () {",
													"    pm.expect(response.filter.additional).to.eql(\"status in ('deffered', 'draft', 'for_send', 'imported', 'new', 'post_for_send', 'pre_end', 'send', 'send_to_aml')\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8d8bd2af-b5d7-4430-b0eb-4fd0d7fab2b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"docModule\": \"ibankul\",\n    \"docType\": \"doc_platpor_bp\",\n    \"filter\": {\n        \"additional\": \"(status in ('for_send', 'send','draft','imported','new','deffered','post_for_send','send_to_aml','pre_end'))\",\n        \"dateFrom\": \"2023-01-01\",\n        \"dateTo\": \"{{dateToday}}\"\n    },\n    \"page\": {\n        \"number\": 0,\n        \"size\": 20\n    },\n    \"sorting\": [\n        {\n            \"field\": \"id\",\n            \"order\": \"DESC\"\n        }\n    ],\n    \"onlyFields\": [\n        \"id\",\n        \"accId\",\n        \"accCurr\",\n        \"accNumber\",\n        \"docNumber\",\n        \"docDate\",\n        \"amount\",\n        \"statusCaption\",\n        \"status\",\n        \"signStatus\",\n        \"signStatusCaption\",\n        \"registerStamp\",\n        \"corrFullname\",\n        \"description\",\n        \"declineInfo\",\n        \"sendtype\",\n        \"loanAgreementNumber\",\n        \"inq181\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/pageable/document/visual/page"
									},
									"response": []
								},
								{
									"name": "Отказанные - \"Рублевый с СВО\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "008da198-e1e4-41fa-bd0c-bafea0443880",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Отказанные - фильтр \\\"Рублевый с СВО\\\"\", function () {",
													"    pm.expect(response.filter.additional).to.eql(\"status in ('cancel', 'decline')\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ffc3a216-155f-4ee0-ae23-4b69fe19c6ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"docModule\": \"ibankul\",\n    \"docType\": \"doc_platpor_bp\",\n    \"filter\": {\n        \"additional\": \"(status in ('cancel','decline'))\",\n        \"dateFrom\": \"2023-01-01\",\n        \"dateTo\": \"{{dateToday}}\"\n    },\n    \"page\": {\n        \"number\": 0,\n        \"size\": 20\n    },\n    \"sorting\": [\n        {\n            \"field\": \"id\",\n            \"order\": \"DESC\"\n        }\n    ],\n    \"onlyFields\": [\n        \"id\",\n        \"accId\",\n        \"accCurr\",\n        \"accNumber\",\n        \"docNumber\",\n        \"docDate\",\n        \"amount\",\n        \"statusCaption\",\n        \"status\",\n        \"signStatus\",\n        \"signStatusCaption\",\n        \"registerStamp\",\n        \"corrFullname\",\n        \"description\",\n        \"declineInfo\",\n        \"sendtype\",\n        \"loanAgreementNumber\",\n        \"inq181\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/pageable/document/visual/page"
									},
									"response": []
								}
							],
							"id": "fde42528-ffba-4fa4-ae66-1847bdf69781"
						},
						{
							"name": "4782. multi_types_page_v2 - Проверка типов документов",
							"item": [
								{
									"name": "Авторизация",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "333e0c0b-9457-4342-9d00-994ee4a0befb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');",
													"",
													"//Дата для использования в теле запроса - действует только для данного запроса",
													"pm.environment.set(\"dateToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
													"",
													"console.log(\"Сегодняшняя дата - \" + pm.variables.get(\"dateToday\"))"
												],
												"type": "text/javascript",
												"id": "1b9de58f-d087-486a-b7dd-1c52749d3a22"
											}
										}
									],
									"id": "37a1c3a2-7766-4628-a544-7c161eb85e87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "{{login}}",
												"password": "{{password}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Радиатор\"",
									"id": "0c887751-5da0-444e-9940-63f320502e40",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"company",
												"change_active",
												"{{id_radiator}}"
											],
											"query": [
												{
													"key": "2037480",
													"value": "Тест",
													"disabled": true
												},
												{
													"key": "7970250",
													"value": "Препрод",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Запрос документов",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97df3a5a-d4ea-432e-ab5c-c34051c29c39",
												"exec": [
													"// Парсим JSON-ответ",
													"var jsonData = pm.response.json();",
													"",
													"// Проверяем наличие записей с нужными docType",
													"pm.test(\"Проверка наличия записей с docType: doc_platpor_bp\", function () {",
													"    pm.expect(jsonData.documents.some(doc => doc.docType === \"doc_platpor_bp\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка наличия записей с docType: doc_platpor\", function () {",
													"    pm.expect(jsonData.documents.some(doc => doc.docType === \"doc_platpor\")).to.be.true;",
													"});",
													"",
													"pm.test(\"Проверка наличия записей с docType: transfer_rests\", function () {",
													"    pm.expect(jsonData.documents.some(doc => doc.docType === \"transfer_rests\")).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "386b58d3-49fb-4c2c-bb4b-787d878d70a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"visual\": true,\n    \"page\": {\n        \"number\": 0,\n        \"size\": 20\n    },\n    \"listOfStatuses\": \"for_send, send, draft, imported, new, deffered, post_for_send, send_to_aml, pre_end\",\n    \"lastDocumentFilter\": {\n        \"docTypes\": [\n            {\n                \"docModule\": \"ibankul\",\n                \"docType\": \"doc_platpor\"\n            },\n            {\n                \"docModule\": \"ibankul\",\n                \"docType\": \"doc_platpor_bp\"\n            },\n            {\n                \"docModule\": \"ibankul\",\n                \"docType\": \"transfer_rests\"\n            }\n        ],\n        \"dateFrom\": \"20221219\",\n        \"dateTo\": \"20231219\",\n        \"onlyThisJsonFields\": \"id, accId, accCurr, accNumber, docNumber, docDate, amount, statusCaption, status, signStatus, signStatusCaption, registerStamp, corrFullname, description, declineInfo, sendtype, loanAgreementNumber, inq181, bankName\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/metinv/pageable/document/multi_types_page_v2"
									},
									"response": []
								}
							],
							"id": "df0a3dd8-ba69-4d69-b139-605275b05125"
						}
					],
					"id": "453616eb-3d7a-48fc-b050-7d7d28e442c6"
				},
				{
					"name": "Вкладка \"Исполненные\"",
					"item": [
						{
							"name": "Авторизация",
							"id": "81067d1d-30b8-4c95-af21-5f6f4d4b1a0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "7014. Проверка фильтрации в ресте last",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed60e91f-9c72-4748-adc8-fd11261f77dc",
										"exec": [
											"// Кейс по задаче https://redmine.hq.metib.ru/issues/10231",
											"",
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dateToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d6ded4ee-515a-4ce5-8423-49f8679dd6bc",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3063 работает корректно\", function () {",
											"    pm.expect(response).not.have.property(\"transactions\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4a1fe1f7-7e34-4a15-9cb5-53230584d2b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"context\": \"*\", //Не валидное значение для строки поиска\n    \"beginDate\": \"2024-01-01\",\n    \"endDate\": \"{{dateToday}}\",\n    \"maxNumber\": \"20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/metall-invest/statement/operation/last"
							},
							"response": []
						}
					],
					"id": "d4b57f00-a5dd-410e-8db6-ad43421a27f8"
				}
			],
			"id": "d30b961e-9fc3-4cea-86ed-c049a6ed1831"
		},
		{
			"name": "Выписка",
			"item": [
				{
					"name": "#4076. Выписка по нескольким счетам разных клиентов",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "1bdc7dd5-54d4-48fa-8ab4-0929ae4c01f3"
									}
								}
							],
							"id": "45b295e0-2652-4b73-aad4-da54d0a951cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Описание теста",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Вся информация по данному функционалу лежит по ссылке - http://confl-srv01.hq.metib.ru:8090/pages/viewpage.action?pageId=49775022"
										],
										"type": "text/javascript",
										"id": "79eca792-44a6-4041-be01-3952056c7f37"
									}
								}
							],
							"id": "065876de-ead4-45a8-bab2-1bdf97818778",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/assets/config/version.json"
							},
							"response": []
						},
						{
							"name": "Параметры теста",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Здесь нужно указать номера счетов, по которым в следующем запросе определяются их id и затем формируется выписка по этим счетам. Если неуказывать никаие счета, то выписка будет формироваться по счетам всех компаний, которые подключены к учетной записи",
											"pm.environment.set(\"account_number_1\", \"40702156414000060778\"); //Номер счета первого клиента - АО \"ВМЗ\"",
											"pm.environment.set(\"account_number_2\", \"40802810200990000023\"); //Номер счета второго клиента - Захарова Яна"
										],
										"type": "text/javascript",
										"id": "86633770-b76b-4682-83a2-7ba735f2dbdb"
									}
								}
							],
							"id": "2d2bf644-8b7f-4271-978d-f96707f44b93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/assets/config/version.json"
							},
							"response": []
						},
						{
							"name": "Смена клиента ВМЗ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "99cebcd6-9aad-4516-990b-40df73344775"
									}
								}
							],
							"id": "4db0a1bd-f87f-4377-aead-37d04cfce4db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": "6905198",
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получаем id счетов для выписки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var json = pm.response.json().accounts;",
											"",
											"var arr = null;",
											"for (var i = 0; i < json.length; i++) {",
											"",
											"    if (json[i].number.includes(pm.environment.get(\"account_number_1\"))) { //Номер счета, по которому нужны id",
											"        if (arr == null) {",
											"            arr = Number(json[i].id);",
											"        }",
											"        else {",
											"            arr = arr + \";\" + Number(json[i].id);",
											"        }",
											"    }",
											"}",
											"",
											"for (var i = 0; i < json.length; i++) {",
											"",
											"    if (json[i].number.includes(pm.environment.get(\"account_number_2\"))) { //Номер счета, по которому нужны id",
											"        if (arr == null) {",
											"            arr = Number(json[i].id);",
											"        }",
											"        else {",
											"            arr = arr + \";\" + Number(json[i].id);",
											"        }",
											"    }",
											"}",
											"",
											"// arr = arr.filter(n => n)  //Удаляю пусные элементы из массива",
											"pm.environment.set(\"array_accounts\", arr);",
											"",
											"// Печатаю список счетов в консоль",
											"console.log(pm.environment.replaceIn('{{array_accounts}}'));"
										],
										"type": "text/javascript",
										"id": "294516b0-e1e6-4625-9f66-5bf0e2f21a41"
									}
								}
							],
							"id": "d2ed4c1e-41af-4c43-91d3-abad00e585cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/product?sync=true&with_blocked=true&with_stays=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"product"
									],
									"query": [
										{
											"key": "sync",
											"value": "true"
										},
										{
											"key": "with_blocked",
											"value": "true"
										},
										{
											"key": "with_stays",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(Не запускать) Получаем id по ВСЕМ счетам для выписки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var json = pm.response.json().accounts;",
											"",
											"var arr = []",
											"for (var i = 0; i < json.length; i++) {",
											"    arr.push(Number(json[i].id));",
											"}",
											"",
											"//Удаляю пусные элементы из массива",
											"arr = arr.filter(n => n)",
											"",
											"// Преобразуем значения массива в строку, разделенную точкой с запятой",
											"var arrString = arr.join(\";\");",
											"",
											"//Записываю значения из arr в переменную окружения array_accounts",
											"pm.environment.set(\"array_accounts\", arrString);",
											"",
											"// Печатаю список счетов в консоль",
											"// console.log(pm.environment.replaceIn('{{array_accounts}}'));",
											"console.log(pm.environment.replaceIn('{{array_accounts}}'));"
										],
										"type": "text/javascript",
										"id": "330c7432-6650-4ea3-8269-d62e88455f6f"
									}
								}
							],
							"id": "52cbbb7d-f27a-4ace-9988-9002016a194e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/product?sync=true&with_blocked=true&with_stays=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"product"
									],
									"query": [
										{
											"key": "sync",
											"value": "true"
										},
										{
											"key": "with_blocked",
											"value": "true"
										},
										{
											"key": "with_stays",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос выписки по нескольким счетам",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "2232d9d4-9199-452c-b84e-e2ad6628944d"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var json = pm.response.json().statementAnswer;",
											"",
											"var arr = [];",
											"for (var i = 0; i < json.length; i++) {",
											"    arr[i] = Number(json[i].id);",
											"}",
											"pm.environment.set(\"array_vipiska\", arr);",
											""
										],
										"type": "text/javascript",
										"id": "1c120c70-20ff-4bde-ad2d-009e6bf1a61e"
									}
								}
							],
							"id": "4ca3f12d-6342-4459-bdf1-992d5cf785e1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/statement/offline_metinv/ul_get_stmt?acc_id_list={{array_accounts}}&begin_date=2023-01-09&end_date=2023-02-10",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"statement",
										"offline_metinv",
										"ul_get_stmt"
									],
									"query": [
										{
											"key": "acc_id_list",
											"value": "8110042",
											"disabled": true
										},
										{
											"key": "acc_id_list",
											"value": "{{array_accounts}}"
										},
										{
											"key": "begin_date",
											"value": "2023-01-09"
										},
										{
											"key": "end_date",
											"value": "2023-02-10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Печать PDF",
							"id": "e3c2ea11-7407-4e23-9ea1-2fcfb6c4cc18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/metinv/print/stm_pdf?&doc_ids={{array_vipiska}}&print_mode=only_stmnt",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"metinv",
										"print",
										"stm_pdf"
									],
									"query": [
										{
											"key": null,
											"value": null
										},
										{
											"key": "doc_ids",
											"value": "{{array_vipiska}}"
										},
										{
											"key": "print_mode",
											"value": "only_stmnt"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Печать 1С",
							"id": "1cb56e9d-9a74-4a99-86fe-e771b2b918ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/statement/offline_metinv/ul_get_stmt_1c?begin_date=2023-01-03&end_date=2023-02-01&acc_id_list={{array_accounts}}&version=1.01&mode=only_stmnt",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"statement",
										"offline_metinv",
										"ul_get_stmt_1c"
									],
									"query": [
										{
											"key": "begin_date",
											"value": "2023-01-03"
										},
										{
											"key": "end_date",
											"value": "2023-02-01"
										},
										{
											"key": "acc_id_list",
											"value": "{{array_accounts}}"
										},
										{
											"key": "acc_id_list",
											"value": "1658079;1560790",
											"description": "1658079 - счет ВМЗ; 1560790 - Счет Захарова",
											"disabled": true
										},
										{
											"key": "version",
											"value": "1.01"
										},
										{
											"key": "mode",
											"value": "only_stmnt"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "086c6310-d668-4358-bd59-a825b3f7bc14"
				}
			],
			"id": "2528e7e9-7a2c-493c-9b0b-e390c6b9817c"
		},
		{
			"name": "За счет кредитных средств",
			"item": [
				{
					"name": "#3937. Проверка настроек в админке",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "63eea912-cd28-4c0d-a331-4bee0deb480e"
									}
								}
							],
							"id": "17689d08-1199-40f3-b0fb-2966b3d81084",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Получение настроек",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"//Список рефиксов недопустимых счетов",
											"let searchName1 = \"SETTINGS_LOAN_AGREEMENT/FORBIDDEN_ACCOUNT_LIST\"",
											"let searchValue1 = \"450;451;452;453;454;455;456;458;459;421;706;47423;47427;47443;47444\"",
											"//Список недопустимыс подтипов",
											"let searchName2 = \"SETTINGS_LOAN_AGREEMENT/FORBIDDEN_ACCOUNT_SUBTYPES_LIST\"",
											"let searchValue2 = \"7;12;120;117;102;116;21;22\"",
											"",
											"//Ищу номер массива, в котором содержится настройка",
											"let element1 = response.docSettings.findIndex(x => x.name === searchName1);",
											"let element2 = response.docSettings.findIndex(x => x.name === searchName2);",
											"",
											"pm.test(\"Проверка настроек \\\"Список рефиксов недопустимых счетов\\\"\", function () {",
											"    pm.expect(response.docSettings[element1]).to.have.property(\"value\", searchValue1);",
											"});",
											"pm.test(\"Проверка настроек \\\"Список недопустимыс подтипов\\\"\", function () {",
											"    pm.expect(response.docSettings[element2]).to.have.property(\"value\", searchValue2);",
											"});"
										],
										"type": "text/javascript",
										"id": "dfa85c29-a351-4a57-ab9e-406ee265494b"
									}
								}
							],
							"id": "5c2f1b31-54bd-4b29-8ef9-19042f8356a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document/create/metinv"
							},
							"response": []
						}
					],
					"id": "e14641ff-b92d-46d0-9791-186207dfacd8"
				}
			],
			"id": "d0f423ed-3ec2-4954-a51e-35e7184b9cbf"
		},
		{
			"name": "Заказ справок",
			"item": [
				{
					"name": "#3005. Вторая справка. Проверка контролей даты",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "918071d7-bd24-4f3e-979a-25300b47e30f"
									}
								}
							],
							"id": "4f418745-fd76-4435-b732-3f7cdbb44515",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "8506f717-e02e-447b-89fb-bcbf6330a2a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Не валидная дата",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ae523a0-6330-49e3-a874-68aee825b8eb",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3005 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Счет(а) №40702156414000060778 не был(и) открыт(ы) на дату запроса остатка.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90878d37-9f93-48b2-8e28-39dbdd66482d",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c433ca27-2369-4753-88a0-1f0f258a257b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"restDate\": \"2022-03-03\",\n    \"accounts\": [\n        \"40702156414000060778\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/reference/accounts_rest/create"
							},
							"response": []
						},
						{
							"name": "Валидная дата",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eaeedf5b-078c-4ec4-bbd2-62d14c70e0f6",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3005 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"id\");",
											"});",
											"",
											"postman.setNextRequest('Не валидная дата')"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "609ed6fe-fa7a-4202-beec-467e187cb289",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"restDate\": \"2022-03-04\",\n    \"accounts\": [\n        \"40702156414000060778\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/reference/accounts_rest/create"
							},
							"response": []
						}
					],
					"id": "714e03dc-ec7b-403f-9a01-9d9f99580891"
				},
				{
					"name": "#3063. Третья справка. Проверка контролей даты",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "918071d7-bd24-4f3e-979a-25300b47e30f"
									}
								}
							],
							"id": "24b89a08-1387-4825-9d6c-744c4500f459",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "0e6ea9f2-b304-42a4-82d3-1fed854910fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Не валидная дата начала",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(2, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(2, 'day').format(\"DD.MM.YYYY\"))",
											"",
											""
										],
										"type": "text/javascript",
										"id": "8b02df64-2532-416c-9cc6-8bbbd1a3c5b3"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3063 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "a7e3310e-d6cf-466d-9fa0-bb30f595373c"
									}
								}
							],
							"id": "e91d95b9-ee72-4fd8-82f3-2b2f89df4587",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"1993-08-22\",\n    \"endDate\": \"{{data_body}}\",\n    \"accounts\": [\n        \"40702156414000060778\"\n    ]\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/turnover/create"
							},
							"response": []
						},
						{
							"name": "Не валидная дата конца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(2, 'day').format(\"DD.MM.YYYY\"))",
											"",
											""
										],
										"type": "text/javascript",
										"id": "9b859249-256a-4f97-bb5d-d896eab0d686"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3063 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "1eafb9e7-34cd-4430-b2cd-3a02b46f7dae"
									}
								}
							],
							"id": "fdf95c54-fe2e-49e0-8e65-4af9f6a4cb32",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"1993-08-23\",\n    \"endDate\": \"{{data_body}}\",\n    \"accounts\": [\n        \"40702156414000060778\"\n    ]\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/turnover/create"
							},
							"response": []
						},
						{
							"name": "Не валидная дата начала и конца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(2, 'day').format(\"DD.MM.YYYY\"))",
											"",
											""
										],
										"type": "text/javascript",
										"id": "7252978a-fd1a-4108-9a0b-5d2b28d62ac7"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3063 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "c652a2cf-a807-40dd-9831-944d03380041"
									}
								}
							],
							"id": "3fb7f029-60e2-490c-8eed-61e1519fc52b",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"1993-08-22\",\n    \"endDate\": \"{{data_body}}\",\n    \"accounts\": [\n        \"40702156414000060778\"\n    ]\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/turnover/create"
							},
							"response": []
						},
						{
							"name": "Валидная дата",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(2, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(2, 'day').format(\"DD.MM.YYYY\"))"
										],
										"type": "text/javascript",
										"id": "47d7fc8a-0485-4040-b33f-2af5003446f8"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3063 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"id": "de8518d8-6a8d-4ef4-9ddd-74b0d382208b"
									}
								}
							],
							"id": "042c28fa-8886-4b39-ab82-915b5bd6684e",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"1993-08-23\",\n    \"endDate\": \"{{data_body}}\",\n    \"accounts\": [\n        \"40702156414000060778\"\n    ]\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/turnover/create"
							},
							"response": []
						}
					],
					"id": "74a47df6-9839-4bce-beb0-6b30e153806c"
				},
				{
					"name": "#3078. Вторая справка. Проверка настроек в админке",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "918071d7-bd24-4f3e-979a-25300b47e30f"
									}
								}
							],
							"id": "1f81b745-b8a3-47bd-b1a9-ad4b0d591cb2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "bae7b511-deda-491f-9629-48fef5afef62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка настроек в админке",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "063dd2f0-28e5-4902-8adb-8df16afbb119",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Доп. фильтр допустимых счетов', () => {",
											"    pm.expect(jsonData.docSettings[1].value).to.eql(\"STATUS!='close' and ACC_SUBTYPE!='1000' and ACC_SUBTYPE!='1001' and ACC_SUBTYPE!='1002'\");",
											"});",
											"",
											"pm.test('Список допустимых конто счетов', () => {",
											"    pm.expect(jsonData.docSettings[2].value).to.eql(\"40701, 40702, 40703,40802,40807, 40501,40502, 40503,40601,40602,40603, 40821\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5d65bbc9-9cdb-4c17-9f46-0ce1142e2b11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/reference/accounts_rest/create"
							},
							"response": []
						}
					],
					"id": "e2317dba-0bfe-40a7-b97a-acd7d2ecf84d"
				},
				{
					"name": "#3540. Четвертая справка. Проверка контролей даты",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "918071d7-bd24-4f3e-979a-25300b47e30f"
									}
								}
							],
							"id": "4d16bfbf-4728-4f1e-a590-9a7f1a28bc31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "38174afb-a53f-4490-8e15-fce962f6be6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Не валидная дата начала",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(1, 'day').format(\"DD.MM.YYYY\"))",
											"",
											""
										],
										"type": "text/javascript",
										"id": "daa4f61f-6d91-44d0-9ee2-f0832a40c40b"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3540 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "655aa900-da68-4c3d-9157-14fed9bbfa02"
									}
								}
							],
							"id": "1b55e890-ff86-4b00-9a5e-1751f1ecdff4",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestDate\":\"1993-08-22\"\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/loan_debt/create"
							},
							"response": []
						},
						{
							"name": "Не валидная дата конца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(1, 'day').format(\"DD.MM.YYYY\"))",
											""
										],
										"type": "text/javascript",
										"id": "af3aad9d-8820-4ca2-93d5-7a8410bf23c9"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3540 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "40ec9c70-917c-4abf-a066-04a5743e8feb"
									}
								}
							],
							"id": "a399624e-0d07-4b85-990a-e40205eade2c",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestDate\":\"{{data_body}}\"\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/loan_debt/create"
							},
							"response": []
						},
						{
							"name": "Валидная дата",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(2, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(2, 'day').format(\"DD.MM.YYYY\"))"
										],
										"type": "text/javascript",
										"id": "ec664d2f-0bfc-4746-8d0d-c30ee7629cff"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3540 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"id": "aa500f85-2856-4693-ad96-b0369bf5941b"
									}
								}
							],
							"id": "be7f8d2d-27a6-480d-b7d3-eef0775d6b4b",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestDate\":\"{{data_body}}\"\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/loan_debt/create"
							},
							"response": []
						}
					],
					"id": "78b6f7b1-87ae-4181-818a-b1d8b9186c21"
				},
				{
					"name": "#3542. Пятая справка. Проверка контролей даты",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "918071d7-bd24-4f3e-979a-25300b47e30f"
									}
								}
							],
							"id": "cb9ab9fa-4277-4d0a-b243-d98fb85e1833",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "bd437abb-4d78-4c44-ab1c-281211bba4d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Не валидная дата начала",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(1, 'day').format(\"DD.MM.YYYY\"))",
											"",
											""
										],
										"type": "text/javascript",
										"id": "dcb6004b-3112-440f-8f5a-4af1f9336db0"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3542 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "6f608dd7-176c-4720-b4a0-09c7e4d02118"
									}
								}
							],
							"id": "07d41512-6135-4aad-aadb-acd3de3188ce",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestDate\":\"1993-08-22\"\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/card_index/create"
							},
							"response": []
						},
						{
							"name": "Не валидная дата конца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(1, 'day').format(\"DD.MM.YYYY\"))",
											""
										],
										"type": "text/javascript",
										"id": "08b0df64-e75d-4046-9b4d-23465e4eefd1"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// console.log('Дата из запроса', pm.variables.get(\"data_body\"))",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3542 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Укажите дату не позднее \" + pm.variables.get(\"data_error\") + \" и не раньше 23.08.1993.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "70800046-3b7c-4417-ad4a-93cb34da2065"
									}
								}
							],
							"id": "f32d05d7-d476-46d3-af76-3ce57ee7517b",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestDate\":\"{{data_body}}\"\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/card_index/create"
							},
							"response": []
						},
						{
							"name": "Валидная дата",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"data_body\", moment().subtract(2, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"data_error\", moment().subtract(2, 'day').format(\"DD.MM.YYYY\"))"
										],
										"type": "text/javascript",
										"id": "88f69d06-3a5e-4247-9004-c2fbff4e5f2a"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Кейс 3542 работает корректно\", function() {",
											"  pm.expect(response).to.have.property(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"id": "62af3e58-c70f-46c4-b3e9-47bc332d7bc5"
									}
								}
							],
							"id": "3bd747cf-3ca4-492d-9ba6-aeb8046dbfea",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestDate\":\"{{data_body}}\"\n}"
								},
								"url": "{{host}}/rest/stateful/corp/reference/card_index/create"
							},
							"response": []
						}
					],
					"id": "ef8a21f4-fda3-4dbe-b45f-5bb7eede9bf5"
				},
				{
					"name": "#3958. Третья справка. Проверка настроек в админке",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "918071d7-bd24-4f3e-979a-25300b47e30f"
									}
								}
							],
							"id": "ea1a4c0e-e572-411b-bce2-7e1eb9c55595",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "48ca78af-8c0d-48f3-bfab-677f84800f11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/6905198",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"6905198"
									],
									"query": [
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка настроек в админке",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1a70064-608c-4f7d-b87a-b593729dda8c",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Доп. фильтр допустимых счетов', () => {",
											"    pm.expect(jsonData.docSettings[1].value).to.eql(\"STATUS!='close' and ACC_SUBTYPE!='1000' and ACC_SUBTYPE!='1001' and ACC_SUBTYPE!='1002'\");",
											"});",
											"",
											"pm.test('Список допустимых конто счетов', () => {",
											"    pm.expect(jsonData.docSettings[2].value).to.eql(\"40701, 40702, 40703,40802,40807, 40501,40502, 40503,40601,40602,40603, 40821\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4d2bb5b7-c366-4d03-a2fd-fc933cdeef24",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/reference/turnover/create"
							},
							"response": []
						}
					],
					"id": "7583fe92-fab3-4ec9-b2a7-9f256418bf11"
				}
			],
			"id": "cec69ded-fb17-4d50-b13f-8f843d74bfdd"
		},
		{
			"name": "Контрагенты",
			"item": [
				{
					"name": "#1372. Проверка скорости загрузки страницы",
					"item": [
						{
							"name": "Начало",
							"item": [
								{
									"name": "Описание - смотри раздел \"Test\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"",
													"Данная коллекция проверяет скорость загрузки реста со списком контрагентов/rest/stateful/corp/dic/corr/list?kontur_focus при количестве записей = 100 шт.",
													"",
													"Для запуска теста необходимо сделать \"Run Folder\" папки \"АВТОТЕСТ. Контрагенты. Скорость загрузки\". Количество итераций поставить = 1",
													"",
													"Что делает коллекция:",
													"1. Авторизуется",
													"2. Запускает логику автотеста",
													"3. Создает 100 контрагентов (количество можно ищменить ниже, переменная \"numbers_counterparts\")",
													"4. Проверяет скорость загрузки реста, должно быть меньше 30 секунд (время можно изменить ниже, переменная \"speed_counterparts\")",
													"5. Если рест загружается быстрее чем за 30 секунд, то тест выдает DONE",
													"6. Если рест зрузиться медленней, то он сообщит об этом",
													"7. Удаляет ранее созданные контрагенты",
													"",
													"*/"
												],
												"type": "text/javascript",
												"id": "9a6f463a-a13e-45d7-a4ca-89aa12cd7d58"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4e47322b-cd16-4ac6-aeba-112937f11eba"
											}
										}
									],
									"id": "71ba49aa-e7d0-4343-a185-57f2a58b2cd6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/assets/config/version.json"
									},
									"response": []
								},
								{
									"name": "Параметры теста",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Количество контрагентов, которые хотим создать",
													"pm.globals.set(\"numbers_counterparts\", 100)",
													"",
													"//Время, за которое должен загрузиться рест 30000 милесекунд = 30 - секунд",
													"pm.globals.set(\"speed_counterparts\", 30000)",
													"",
													"pm.globals.set(\"quantity_counterparts\", null);",
													""
												],
												"type": "text/javascript",
												"id": "c669fe84-ed59-4bc3-9fb4-eb6509d1a66d"
											}
										}
									],
									"id": "70caafe9-56b8-47c8-868e-c2dd6993fdd1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/assets/config/version.json"
									},
									"response": []
								},
								{
									"name": "Авторизация",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.test(\"response code=200\", () => {",
													"//   pm.response.to.have.status(200);",
													"//    });",
													"",
													"// pm.test(\"Cookie JSESSIONID is present\", () => {",
													"//   pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
													"// });",
													"",
													"// pm.test(\"Header JSON\", () => ",
													"// {",
													"//   pm.request.addHeader('Accept: application/json');",
													"// });",
													"",
													"//Это номер ИНН, который будет использоваться в дальнейших запросах",
													"pm.globals.set(\"Nomer\", \"0000000001\");",
													"pm.globals.set(\"inn\", \"1000000001\");",
													"",
													"if (pm.response.to.have.status(200)) {",
													"    postman.setNextRequest('Создание контрагента')",
													"} else {",
													"    postman.setNextRequest(null)",
													"    console.log(\"При авторизации что-то пошло не так!\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b01e027c-f788-43a1-83a8-702f228d10f9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "69e17e5d-d0b4-45f5-b4b4-13c126405b73"
											}
										}
									],
									"id": "bc2d860a-e682-4c6e-b0a5-5109c2f86401",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								}
							],
							"id": "4cb3e5cb-2b49-4325-a505-d24209ad38c3"
						},
						{
							"name": "Создание",
							"item": [
								{
									"name": "Создание контрагента",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"inn\", Number(postman.getGlobalVariable(\"inn\"))+1);",
													"pm.globals.set(\"Nomer\", Number(postman.getGlobalVariable(\"Nomer\"))+1);",
													"pm.globals.set(\"quantity_counterparts\", Number(postman.getGlobalVariable(\"quantity_counterparts\"))+1);",
													"",
													"console.log('Количество контрагентов',pm.globals.get(\"quantity_counterparts\"));",
													"",
													"",
													"const moment = require('moment');",
													"pm.environment.set(\"Date_Counterparts\", moment().format(\"YYYY-DD-MM\"));",
													"",
													""
												],
												"type": "text/javascript",
												"id": "099cfed6-0edd-4353-bbfc-148d92804557"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.globals.get(\"quantity_counterparts\") < pm.globals.get(\"numbers_counterparts\")) {",
													"    postman.setNextRequest(\"Создание контрагента\")",
													"}",
													"",
													"else {",
													"    postman.setNextRequest(\"Проверка скорости загрузки\")",
													"}",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7a60297e-0818-4c24-b8aa-30ed0332eb3c"
											}
										}
									],
									"id": "84f51531-3c82-4daf-a0ce-106b64e6397f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fullname\": \"{{Nomer}} Тест Контрагенты {{Date_Counterparts}}\",\n    \"inn\": {{inn}},\n    \"kpp\": \"502701001\",\n    \"accList\": [\n        {\n            \"accNumber\": \"40702810314000003100\",\n            \"bankBik\": \"044525176\"\n        }\n    ],\n    \"corrType\": \"UL\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/dic/corr/v2"
									},
									"response": []
								},
								{
									"name": "Создание контрагента (Парсинг списка контрагентов)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var substr = pm.environment.get(\"Date_Counterparts\");",
													"var json = pm.response.json().corrDicElementUl;",
													"",
													"var arr = []; //Объявляю переменную как массив",
													"",
													"for (var i = 0; i < json.length; i++) {",
													"    if (json[i].fullname.includes(substr)) {",
													"        arr[i] = Number(json[i].id);",
													"    }",
													"    arr = arr.filter(n => n)",
													"    pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
													"}",
													"",
													"if (arr.length == pm.globals.get('numbers_counterparts')) {",
													"    console.log(pm.globals.get('numbers_counterparts') + ' контрагентов создано!')",
													"",
													"    pm.test(\"100 контрагентов создано\", () => {",
													"        pm.expect(arr.length).to.equal(pm.globals.get('numbers_counterparts'));",
													"    });",
													"    postman.setNextRequest('Проверка скорости загрузки')",
													"}",
													"else {",
													"    // pm.test(\"100 контрагентов НЕ создано\", () => {",
													"    // pm.expect(arr.length).to.equal(pm.globals.get('numbers_counterparts'));",
													"    console.log('Количество контрагентов НЕ РАВНО ' + pm.globals.get('numbers_counterparts'))",
													"    postman.setNextRequest('Создание контрагента')",
													"};",
													"",
													"console.log(\"Список id контрагентов\", arr)"
												],
												"type": "text/javascript",
												"id": "26073532-ed17-4848-a40c-eabfae26cdaf"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "77e307fa-24c7-45f5-8228-239065f02ca8"
											}
										}
									],
									"id": "965676df-6888-4b9f-b5c2-bf99c9671746",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/dic/corr/list?kontur_focus=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"dic",
												"corr",
												"list"
											],
											"query": [
												{
													"key": "kontur_focus",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "54ed1d7a-a34f-4d3c-bcff-627d9e2aeed7",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0f2efb83-277e-4cce-bae8-4585f70174a3"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c4d4f030-51c8-4394-9494-8aa39c2fb025"
									}
								}
							]
						},
						{
							"name": "Проверка скорости загрузки",
							"item": [
								{
									"name": "Проверка скорости загрузки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.responseTime < pm.globals.get('speed_counterparts')) {",
													"    pm.test(\"Рест загружается быстрее чем за \" + pm.globals.get('speed_counterparts') + \" миллисекунд\", () => {",
													"    pm.expect(pm.response.responseTime).to.be.below(pm.globals.get('speed_counterparts'));",
													"    postman.setNextRequest('Удаление контрагентов 1 (Парсинг списка контрагентов)')",
													"    });",
													"}",
													"",
													"else {",
													"    pm.test(\"Рест загружается МЕДЛЕННЕ чем за \" + pm.globals.get('speed_counterparts') + \" миллисекунд\", () => {",
													"    pm.expect(pm.response.responseTime).to.be.below(pm.globals.get('speed_counterparts'));",
													"    postman.setNextRequest('Удаление контрагентов 1 (Парсинг списка контрагентов)')",
													"    });",
													"}",
													""
												],
												"type": "text/javascript",
												"id": "df75ca2b-6621-489e-9827-0df9270685e1"
											}
										}
									],
									"id": "989c1072-78d8-40d8-9033-672b5c469403",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/dic/corr/list?kontur_focus=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"dic",
												"corr",
												"list"
											],
											"query": [
												{
													"key": "kontur_focus",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "d29a07e9-af0c-42f2-8771-7daae5693307"
						},
						{
							"name": "Удаление ранее созданных",
							"item": [
								{
									"name": "Описание - смотри раздел \"Test\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"",
													"Данная коллекция удаляет все контрагенты ",
													"",
													"Запускать коллекцию нужно как обычно через \"Run collection\" количество иттераций = 1",
													"",
													"*/"
												],
												"type": "text/javascript",
												"id": "abf2b6e8-12d9-46ce-b6d2-31218b4b8963"
											}
										}
									],
									"id": "5c57bd5d-03e5-43ed-87b9-a106dff3ac49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/assets/config/version.json"
									},
									"response": []
								},
								{
									"name": "Удаление контрагентов 1 (Парсинг списка контрагентов)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74075782-abeb-4b19-93b8-5c9d35abb07d",
												"exec": [
													"var responseBody = pm.response.text();",
													"",
													"var body = JSON.parse(responseBody);",
													"if (body === null){",
													"    console.log (\"Нет ни одного контрагента!\")",
													"    // postman.setNextRequest(null);",
													"    pm.setNextRequest(null)",
													"    }",
													"",
													"else {",
													"",
													"//Забираю ответ в переменную",
													"var json = pm.response.json().corrDicElementUl;",
													"",
													"if (json.id != null){",
													"    var arr = []",
													"    var arr = json.id //Объявляю переменную как значение из параметра corrDicElementUl.id",
													"    pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
													"    console.log(\"Один контрагент, id =\",arr)",
													"    // postman.setNextRequest(\"Удаление контрагента 2\")",
													"    pm.setNextRequest(\"Удаление контрагента 2\")",
													"}",
													"",
													"// Иначе выполняется следующее - возвращается массив",
													"    else {",
													"        var arr = []; //Объявляю переменную как массив",
													"        for (var i=0; i<json.length; i++){",
													"            arr [i]=Number(json[i].id); ",
													"        }",
													"",
													"    console.log(\"Список id контрагентов\",arr)",
													"    pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
													"    // postman.setNextRequest(\"Удаление контрагента 2\")",
													"    pm.setNextRequest(\"Удаление контрагента 2\")",
													"",
													"}",
													"// arr = arr.filter(n => n)",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18bd1521-ac48-453c-8ea0-e23569d79a78",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2d71ddc3-2719-48ab-8b37-e814a3a1a395",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/dic/corr/list?kontur_focus=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"dic",
												"corr",
												"list"
											],
											"query": [
												{
													"key": "kontur_focus",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление контрагента 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Создаю новую переменную и помещаю в нее массив с id контрагентов",
													"var new_array = pm.globals.get(\"array\");",
													"//console.log('новый массив',new_array)",
													"",
													"//Если переменная new_array является массивом и длинна массива больше нуля",
													"if (Array.isArray(new_array) && new_array.length > 1) {",
													"",
													"    //Удаляю первое значение из массива",
													"    var theRemovedElement = new_array.shift(); // theRemovedElement == 1",
													"",
													"    //Перезаписываю массив с id контрагентов без первого значения",
													"    pm.globals.set(\"array\", new_array);",
													"",
													"    //Печаю получивщийся массив с id контрагентов",
													"    //console.log('Получивщийся массив во вкладке тест',pm.globals.get(\"array\"));",
													"",
													"    postman.setNextRequest('Удаление контрагента 2')",
													"}",
													"",
													"//Иначе, если переменная new_array не является массивом ",
													"else {",
													"",
													"    // //Удаляю первое значение из массива",
													"    // var theRemovedElement = new_array.shift(); // theRemovedElement == 1",
													"",
													"    // //Перезаписываю массив с id контрагентов без первого значения",
													"    // pm.globals.set(\"array\", new_array);",
													"",
													"    //Печаю получивщийся массив с id контрагентов",
													"    //console.log('Это было последнее значение');",
													"    postman.setNextRequest(null)",
													"",
													"    // postman.setNextRequest('Удаление контрагента 2')",
													"}"
												],
												"type": "text/javascript",
												"id": "434d18cf-45ab-48c3-b001-d6b550a88af8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"// var arr = [1, 2, 3, 4]; ",
													"// var theRemovedElement = arr.shift(); // theRemovedElement == 1",
													"// console.log(arr); // [2, 3, 4]",
													"",
													"pm.globals.set (\"id_counterparts\",null);",
													"var arr = []",
													"var arr = pm.globals.get(\"array\");",
													"// console.log('Массив arr', arr)",
													"",
													"if (arr.length > 1){       ",
													"        // for (var i=0; i<arr.length; i++){",
													"        // console.log('Длинна массива больше одного элемента')",
													"        pm.globals.set(\"id_counterparts\", arr[0]);",
													"        // console.log('Значение из пререквеста', pm.globals.get(\"id_counterparts\"));",
													"",
													"",
													"        // postman.setNextRequest('Удаление контрагентов 12 (Парсинг списка контрагентов)",
													"",
													"        // pm.globals.set(\"id_counterparts\", arr[i]);",
													"        // postman.setNextRequest('Удаление контрагентов 2)')",
													"        // }",
													"}",
													"",
													"else if (arr.length == 1) {",
													"    pm.globals.set (\"id_counterparts\",arr);",
													"    // console.log('Длинна массива = 1 элементу')",
													"    pm.globals.set(\"id_counterparts\", arr);",
													"    // console.log(pm.globals.get(\"id_counterparts\"));",
													"",
													"    console.log('Это последнее значение');",
													"    postman.setNextRequest(null)",
													"}",
													""
												],
												"type": "text/javascript",
												"id": "97dbae11-3c5b-4468-a6f7-7dec7fb7cc96"
											}
										}
									],
									"id": "17c93b95-5803-474e-bc75-88277aad95b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/delete/document/{{id_counterparts}}"
									},
									"response": []
								}
							],
							"id": "98089238-0d51-4b6b-8a80-ac4e043b73cb"
						}
					],
					"id": "8042c759-c4f7-411e-8ab5-83c09b6847e0"
				}
			],
			"id": "1ff4b3d8-9b4f-4298-939f-12a1e98b8e88"
		},
		{
			"name": "Надежный бизнес",
			"item": [
				{
					"name": "Автотест. Проверка 17 показателей",
					"item": [
						{
							"name": "Начало",
							"item": [
								{
									"name": "Описание - смотри раздел \"Test\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Как работать с этой коллекцией:",
													"// 1. Необходимо запустить ран папки \"Запускать это\"",
													"// 2. Включить в ран все запросы, которые есть во вложенных папках",
													"// 3. Выбрать число иттераций = 1",
													"",
													"// Подробное описание того, за что отвечают те или иные переменные, что делает на каждом этапе расписано в запросе \"(+) Common - Общий рейтинг\""
												],
												"type": "text/javascript",
												"id": "7ea7a6c7-2f8b-4c0c-bc7c-1467ddb9f598"
											}
										}
									],
									"id": "374dcc82-ea9c-4d20-98d7-17393c0161ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/assets/config/version.json"
									},
									"response": []
								},
								{
									"name": "Авторизация",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "24285c2e-66c2-4139-b1dc-b80ec30dea88"
											}
										}
									],
									"id": "9f5fd7d2-7855-4eb6-bbcf-90a018a53896",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Status - Запуск коллекции",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json(); // Загоняю ответ в переменную",
													"",
													"",
													"// Проверяю статус услуги и запускаю проверки из папки \"Status - True\" или \"Status - False\"",
													"",
													"if (jsonData.status == 1) {",
													"    console.log (\"Стутус 1 - Услуга подключена. Запуск (+) Common - Общий рейтинг\");",
													"    postman.setNextRequest (\"(+) Common - Общий рейтинг\");",
													"}",
													"",
													"else if (jsonData.status == 0 && jsonData.dateEnd != \"1900-01-01 00:00:00.0\") {",
													"    console.log (\"Услуга подключена без пролонгации, запуск (+) Common - Общий рейтинг\");",
													"    postman.setNextRequest(\"(+) Common - Общий рейтинг\")",
													"}",
													"",
													"// if (jsonData.status == 1) {",
													"//     console.log (\"Стутус 1 - Услуга подключена. Запуск (+) Common - Общий рейтинг\");",
													"//     postman.setNextRequest (\"(+) Common - Общий рейтинг\");",
													"// }",
													"",
													"else if (jsonData.status == 0 && jsonData.dateEnd === \"1900-01-01 00:00:00.0\") {",
													"    console.log (\"Статус 0 - запуск Status = false (Общий рейтинг  ag2)\");",
													"    postman.setNextRequest(\"(-) Common - Общий рейтинг\")",
													"}",
													";"
												],
												"type": "text/javascript",
												"id": "4b0bd31c-16e6-4189-8acf-7919d15a50ca"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3ea7bafd-b09f-480d-b425-002fa2aed832"
											}
										}
									],
									"id": "80de6991-df2c-4765-825b-d5e430d690eb",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}/rest/stateful/corp/white_business/subscription/status"
									},
									"response": []
								}
							],
							"id": "5923c4f5-ce6a-4ac7-8496-bb9c90540176"
						},
						{
							"name": "Услуга подключена",
							"item": [
								{
									"name": "Общий рейтинг",
									"item": [
										{
											"name": "(+) Common - Общий рейтинг",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															" // Загоняю ответ в переменную",
															"var jsonData = pm.response.json();",
															"",
															"// Ищу индекс по значению \"common\" и присваиваю его в переменную",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"common\")",
															"",
															"// Переменные для интервалов поиска",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 30;",
															"var interval_3 = 80;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = null;",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"common\"",
															"var recVal = null; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"var Recommendation_red = \"\";",
															"var Recommendation_yellow = \"\";",
															"var Recommendation_green = \"\";",
															"var Recommendation_gray_null = \"\";",
															"var Recommendation_gray = \"\";",
															"",
															"// Создаю переменную и присваю ей значение общего рейтинга",
															"var number = jsonData.response.state.data.ag[ag].val; ",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1 - Это для меня коммент, чтобы не забыть",
															"",
															"// Проверяю соответствует ли значение рейтинга интервалу 0-30 и запускаю проверку ",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"// Проверяю соответствует ли значение рейтинга интервалу 30-80 и запускаю проверку ",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"            }",
															"",
															"",
															"}",
															"",
															"// Проверяю соответствует ли значение рейтинга интервалу 80-100 и запускаю проверку ",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"            }",
															"}",
															"",
															"// Проверяю соответствует ли значение рейтинга null и запускаю проверку ",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"       ",
															"         };",
															"};"
														],
														"type": "text/javascript",
														"id": "aaa0a646-13dc-4848-b6d1-baaf81db9697"
													}
												}
											],
											"id": "120ebd03-36ec-4fcf-9268-5e917bee2e11",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"operationBool\":1,\"accNumber\":40702810300990001873,\"prolongation\":0}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "b0db59fd-d860-4146-bdfc-c6458227d46a"
								},
								{
									"name": "Налоговая нагрузка",
									"item": [
										{
											"name": "(+) q3mTaxAll - Налоговая нагрузка за 90 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q3mTaxAll - Налоговая нагрузка за 90 дней\");",
															"",
															"// q3mTaxAll - Налоговая нагрузка за 90 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q3mTaxAll\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 1;",
															"var interval_3 = 2.2;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Налоговая нагрузка за последние 90 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q3mTaxAll\";",
															"var recVal = \"2.2\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Доля уплаченных Вами налогов составляет менее рекомендованного минимума ЦБ. Рекомендуем Вам поддерживать уровень налоговой нагрузки, ориентируясь на налоговую нагрузку Вашей отрасли, которую ФНС публикует в открытых источниках. Рекомендуем следовать рекомендациям ЦБ, по мнению ЦБ: доля налоговых отчислений в дебетовом обороте должна начинаться с 1%. В удельный вес налоговой нагрузки включаются все налоговые платежи, в том числе страховые взносы.\";",
															"",
															"var Recommendation_yellow = \"Доля уплаченных Вами налогов достигла  порогового значения в 1% от оборота. Есть вероятность оказаться в зоне риска. Рекомендуем поддерживать этот уровень  налоговой нагрузки. Ориентируйтесь, пожалуйста, на показатель средней налоговой нагрузки по Вашей отрасли, ФНС России публикует информацию в открытом доступе\";",
															"",
															"var Recommendation_green = \"Доля уплаченных Вами налогов более 2,2 % от оборота. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках\";",
															"",
															"var Recommendation_gray = \"Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках. При этом рекомендуем поддерживать налоговую нагрузку на уровне не менее 1 % от Дебетовых оборотов\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источника. При этом рекомендуем, чтобы налогов было минимум 1% от Дебетовых оборотов по счету\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"//ГОТОВО//",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "10e70b47-d506-47ff-960f-8311ed445a7f"
													}
												}
											],
											"id": "ec245c47-771a-4041-aa5c-0998dafca7f0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q6mTaxAll - Налоговая нагрузка за последние 180 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q6mTaxAll - Налоговая нагрузка за последние 180 дней\");",
															"",
															"// q6mTaxAll - Налоговая нагрузка за последние 180 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q6mTaxAll\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 1;",
															"var interval_3 = 2.2;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Налоговая нагрузка за последние 180 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q6mTaxAll\";",
															"var recVal = \"2.2\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Доля уплаченных Вами налогов составляет менее рекомендованного минимума ЦБ. Рекомендуем Вам поддерживать уровень налоговой нагрузки, ориентируясь на налоговую нагрузку Вашей отрасли, которую ФНС публикует в открытых источниках. Рекомендуем следовать рекомендациям ЦБ, по мнению ЦБ: доля налоговых отчислений в дебетовом обороте должна начинаться с 1%. В удельный вес налоговой нагрузки включаются все налоговые платежи, в том числе страховые взносы.\";",
															"",
															"var Recommendation_yellow = \"Доля уплаченных Вами налогов достигла  порогового значения в 1% от оборота. Есть вероятность оказаться в зоне риска. Рекомендуем поддерживать этот уровень  налоговой нагрузки. Ориентируйтесь, пожалуйста, на показатель средней налоговой нагрузки по Вашей отрасли, ФНС России публикует информацию в открытом доступе\";",
															"",
															"var Recommendation_green = \"Доля уплаченных Вами налогов более 2,2 % от оборота. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках\";",
															"",
															"var Recommendation_gray = \"Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках. При этом рекомендуем поддерживать налоговую нагрузку на уровне не менее 1 % от Дебетовых оборотов\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источника. При этом рекомендуем, чтобы налогов было минимум 1% от Дебетовых оборотов по счету\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"",
															"",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "ce2a38b9-5a54-4393-b5e4-e1384033b119"
													}
												}
											],
											"id": "7d52c4a7-4f13-47d5-b2e6-e3911a86d219",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) qTaxAll - Налоговая нагрузка с открытия р/с",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) qTaxAll - Налоговая нагрузка с открытия р/с\");",
															"",
															"// qTaxAll - Налоговая нагрузка с открытия р/с",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"qTaxAll\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 1;",
															"var interval_3 = 2.2;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Налоговая нагрузка за всю историю\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"qTaxAll\";",
															"var recVal = \"2.2\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Доля уплаченных Вами налогов составляет менее рекомендованного минимума ЦБ. Рекомендуем Вам поддерживать уровень налоговой нагрузки, ориентируясь на налоговую нагрузку Вашей отрасли, которую ФНС публикует в открытых источниках. Рекомендуем следовать рекомендациям ЦБ, по мнению ЦБ: доля налоговых отчислений в дебетовом обороте должна начинаться с 1%. В удельный вес налоговой нагрузки включаются все налоговые платежи, в том числе страховые взносы.\";",
															"",
															"var Recommendation_yellow = \"Доля уплаченных Вами налогов достигла  порогового значения в 1% от оборота. Есть вероятность оказаться в зоне риска. Рекомендуем поддерживать этот уровень  налоговой нагрузки. Ориентируйтесь, пожалуйста, на показатель средней налоговой нагрузки по Вашей отрасли, ФНС России публикует информацию в открытом доступе\";",
															"",
															"var Recommendation_green = \"Доля уплаченных Вами налогов более 2,2 % от оборота. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках\";",
															"",
															"var Recommendation_gray = \"Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках. При этом рекомендуем поддерживать налоговую нагрузку на уровне не менее 1 % от Дебетовых оборотов\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источника. При этом рекомендуем, чтобы налогов было минимум 1% от Дебетовых оборотов по счету\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "5ae5d175-2d98-4674-8d1a-a7cded54334a"
													}
												}
											],
											"id": "935bf428-2eda-4dea-a7b9-57ca5a56f61c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q_NDFL_FL_90d - НДФЛ за 90 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q_NDFL_FL_90d - НДФЛ за 90 дней\");",
															"",
															"// q_NDFL_FL_90d - НДФЛ за 90 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q_NDFL_FL_90d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 2.5;",
															"var interval_3 = 7.5;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Нагрузка по уплате НДФЛ от переводов физлицам за 90 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q_NDFL_FL_90d\";",
															"var recVal = \"7.5\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Переводы в адрес физических лиц без оплаченного НДФЛ составили большой объем от Ваших операций. Рекомендуем существенно сократить объемы переводов на счета физическим лицам, которые не входят в штат Вашей компании.\\nПри выплате заработной платы сотрудникам придерживайтесь одновременной уплаты НДФЛ  (пункт 6 статьи 226 НК РФ)\";",
															"",
															"var Recommendation_yellow = \"Переводы в адрес физических лиц без оплаченного НДФЛ составили большой объем от Ваших операций. Рекомендуем существенно сократить объемы переводов на счета физическим лицам, которые не входят в штат Вашей компании.\\nПри выплате заработной платы сотрудникам придерживайтесь одновременной уплаты НДФЛ  (пункт 6 статьи 226 НК РФ).\";",
															"",
															"var Recommendation_green = \"Перечисления НДФЛ соответствуют объемам переводов в пользу физических лиц. Рекомендуем перечислять НДФЛ одновременно с выплатой заработной платы\";",
															"",
															"var Recommendation_gray = \"Рекомендуем перечислять НДФЛ одновременно с выплатой заработной платы\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее.Рекомендуем перечислять НДФЛ одновременно с выплатой заработной платы\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"//ГОТОВО//",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"",
															"    };"
														],
														"type": "text/javascript",
														"id": "cdc38f64-c32a-414a-ab35-df5398c20d81"
													}
												}
											],
											"id": "5bab107d-7389-4c9b-822e-a260830ba273",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "f2e3f0dc-4902-43f9-bab5-c07bf53aef7b"
								},
								{
									"name": "Переводы физлицам и снятие наличных",
									"item": [
										{
											"name": "(+) q_FL_14d - Переводы физлицам за 14 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q_FL_14d - Переводы физлицам за 14 дней\");",
															"",
															"// q3mTaxAll - Налоговая нагрузка за 90 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q_FL_14d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_red = 30; // Красный интервал",
															"var interval_green = 0; // Зеленый интервал",
															"var interval_3 = 0; // Серый интервая",
															"var interval_4 = 30;// Серый интервая",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray = \"gray\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray = \"C4C4C4\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Переводы физлицам к общему обороту за 14 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q_FL_14d\";",
															"var recVal = \"30\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Переводы в адрес физических лиц составили большой объем от Ваших операций. Рекомендуем сократить объемы переводов на счета физических лиц, которые не входят в штат компании.\";",
															"",
															"var Recommendation_yellow = \"Переводы в адрес физических лиц составили большой объем от Ваших операций. Это признак сомнительной операции. Рекомендуем сократить объемы переводов на счета физических лиц, которые не входят в штат Вашей компании.\";",
															"",
															"var Recommendation_green = \"Переводов в пользу сомнительных физических лиц не обнаружено. Рекомендуем исключить переводы на счета физических лиц, которые не входят в штат вашей компании.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем исключить переводы на счета физических лиц, которые не входят в штат вашей компании.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем исключить переводы на счета физических лиц, которые не входят в штат вашей компании.\";",
															"",
															"",
															"// Проверяю красный интервал",
															"if ((number==interval_red)||(number>interval_red)) {",
															"    var interval = interval_red + ' ';",
															"        if ((number==interval_red)||(number>interval_red)) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"//Проверяю зеленый интервал",
															"else if (number == interval_green) {",
															"    var interval = interval_green + ' ';",
															"        if (number == interval_green) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"//Проверяю серый интервал",
															"else if (number>interval_3 && number<interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>interval_3 && number<interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };"
														],
														"type": "text/javascript",
														"id": "e1d7e49e-ba62-4f65-aa7a-7a77fb194be3"
													}
												}
											],
											"id": "f8014e9f-434c-46d2-aa19-395ba29302b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q_FL_30d - Переводы физлицам за 30 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q_FL_30d - Переводы физлицам за 30 дней\");",
															"",
															"// q3mTaxAll - Налоговая нагрузка за 90 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q_FL_30d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null; // Значение null",
															"var interval_red = 30; // Красный интервал",
															"var interval_green = 0; // Зеленый интервал",
															"var interval_3 = 0; // Серый интервая",
															"var interval_4 = 30;// Серый интервая",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray = \"gray\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray = \"C4C4C4\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Переводы физлицам к общему обороту за 30 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q_FL_30d\";",
															"var recVal = \"30\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Переводы в адрес физических лиц составили большой объем от Ваших операций. Рекомендуем сократить объемы переводов на счета физических лиц, которые не входят в штат компании.\";",
															"",
															"var Recommendation_yellow = \"Переводы в адрес физических лиц составили большой объем от Ваших операций. Это признак сомнительной операции. Рекомендуем сократить объемы переводов на счета физических лиц, которые не входят в штат Вашей компании.\";",
															"",
															"var Recommendation_green = \"Переводов в пользу сомнительных физических лиц не обнаружено. Рекомендуем исключить переводы на счета физических лиц, которые не входят в штат вашей компании.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем исключить переводы на счета физических лиц, которые не входят в штат вашей компании.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем исключить переводы на счета физических лиц, которые не входят в штат вашей компании\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ((number==interval_red)||(number>interval_red)) {",
															"    var interval = interval_red + ' ';",
															"        if ((number==interval_red)||(number>interval_red)) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"",
															"    }",
															"",
															"",
															"else if (number == interval_green) {",
															"    var interval = interval_green + ' ';",
															"        if (number == interval_green) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"",
															"    }",
															"",
															"//Проверяю серый интервал",
															"else if (number>interval_3 && number<interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>interval_3 && number<interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray);",
															"                });",
															"            }",
															"",
															"",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_green + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"",
															"    };"
														],
														"type": "text/javascript",
														"id": "75b97620-d4a3-4b02-a772-8f682c72f5f0"
													}
												}
											],
											"id": "29ecfdd5-066a-42aa-9b54-fbffd8c2a90c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q_nal_14d - Снятие наличных к общему обороту за 14 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q_nal_14d - Снятие наличных к общему обороту за 14 дней\");",
															"",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q_nal_14d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null; // Значение null",
															"var interval_red = 30; // Красный интервал",
															"var interval_green = 0; // Зеленый интервал",
															"",
															"",
															"var interval_3 = 0; // Серый интервая",
															"var interval_4 = 30;// Серый интервая",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray = \"gray\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray = \"C4C4C4\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Снятие наличных к общему обороту за 14 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q_nal_14d\";",
															"var recVal = \"30\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Снятия наличных составили большой объем от Ваших операций. Цели их использования Банку не известны. Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности. \";",
															"",
															"var Recommendation_yellow = \"Снятия наличных составили большой объем от Ваших операций. Цели их использования Банку не известны. Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"var Recommendation_green = \"Вопросов по использованию наличных средств у Банка нет. Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее.Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( (number==interval_red)||(number>interval_red)) {",
															"    var interval = interval_red + ' ';",
															"        if ((number==interval_red)||(number>interval_red)) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"else if (number == interval_green) {",
															"    var interval = interval_green + ' ';",
															"        if (number == interval_green) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"//Проверяю серый интервал",
															"else if (number>interval_3 && number<interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>interval_3 && number<interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_green + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"",
															"    };"
														],
														"type": "text/javascript",
														"id": "f86341e8-a8ba-4131-aac3-dc86c382389a"
													}
												}
											],
											"id": "ec09a320-3651-4908-ae87-067e16d4a2a7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q_nal_30d - Снятие наличных к общему обороту за 30 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q_nal_30d - Снятие наличных к общему обороту за 30 дней\");",
															"",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q_nal_30d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null; // Значение null",
															"var interval_red = 30; // Красный интервал",
															"var interval_green = 0; // Зеленый интервал",
															"",
															"",
															"var interval_3 = 0; // Серый интервая",
															"var interval_4 = 30;// Серый интервая",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray = \"gray\";",
															"var color_value_gray = \"C4C4C4\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Снятие наличных к общему обороту за 30 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q_nal_30d\";",
															"var recVal = \"30\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Снятия наличных составили большой объем от Ваших операций. Цели их использования Банку не известны. Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности. \";",
															"",
															"var Recommendation_yellow = \"Снятия наличных составили большой объем от Ваших операций. Цели их использования Банку не известны. Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"var Recommendation_green = \"Вопросов по использованию наличных средств у Банка нет. Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее.Рекомендуем Вам пользоваться корпоративной картой для безналичных расчетов по Вашей хозяйственной деятельности.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( (number==interval_red)||(number>interval_red)) {",
															"    var interval = interval_red + ' ';",
															"        if ((number==interval_red)||(number>interval_red)) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"",
															"else if (number == interval_green) {",
															"    var interval = interval_green + ' ';",
															"        if (number == interval_green) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"//Проверяю серый интервал",
															"else if (number>interval_3 && number<interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>interval_3 && number<interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_green + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };"
														],
														"type": "text/javascript",
														"id": "e21d73cc-03e2-401e-92cf-329121101a21"
													}
												}
											],
											"id": "bfa1ddc1-8622-4862-bfe0-7876269a482d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "d786dd3a-fe48-4870-8ad2-cb89fab58d41"
								},
								{
									"name": "Скорость оборачиваемости средств",
									"item": [
										{
											"name": "(+) trans_30d - Остатки на счете к дебетовому обороту за 30 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) trans_30d - Остатки на счете к дебетовому обороту за 30 дней\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"trans_30d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 9;",
															"var interval_3 = 15;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Остатки на счете к дебетовому обороту за 30 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"trans_30d\";",
															"var recVal = \"15\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Поступившие на счет денежные средства быстро списываются. Это один из признаков сомнительной деятельности. Рекомендуем перечислять денежные средства согласно условиям договоров, заключенных с вашими бизнес-партнерами. Зарабатывайте на процентах, начисляемых Банком на остаток по Вашему счету.\";",
															"",
															"var Recommendation_yellow = \"Поступившие на счет денежные средства быстро списываются. Это один из признаков сомнительной деятельности. Рекомендуем перечислять денежные средства согласно условиям договоров, заключенных с вашими бизнес-партнерами. Зарабатывайте на процентах, начисляемых Банком на остаток по Вашему счету.\";",
															"",
															"var Recommendation_green = \"Наличие существенного остатка на расчетном счете можно использовать как инструмент для начисления процентов от Банка в качестве дополнительного дохода.Скорость оборачиваемости денежных средств не вызывает сомнений у Банка. \";",
															"",
															"var Recommendation_gray = \"Наличие существенного остатка на расчетном счете можно использовать как инструмент для начисления процентов от Банка в качестве дополнительного дохода.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Наличие существенного остатка на расчетном счете можно использовать как инструмент для начисления процентов от Банка в качестве дополнительного дохода.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_3) {",
															"    var interval = interval_3 + ' ';",
															"        if (number>=interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"//ГОТОВО//",
															"",
															"else if (number === null) {",
															"    pm.test(\"ОБЩИЙ РЕЙТИНГ ПРОВЕРЕН!\",  () => {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"        else {",
															"        pm.expect.fail(console.log (interval));",
															"        }",
															"    });",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "a4b783c9-fcd0-4358-be23-b89b7da63319"
													}
												}
											],
											"id": "79c2ce7c-863c-4a58-bf2d-437609e2a5eb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) trans_90d - Остатки на счете к дебетовому обороту за 90 дней Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) trans_90d - Остатки на счете к дебетовому обороту за 90 дней\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"trans_90d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 9;",
															"var interval_3 = 15;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Остатки на счете к дебетовому обороту за 90 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"trans_90d\";",
															"var recVal = \"15\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Поступившие на счет денежные средства быстро списываются. Это один из признаков сомнительной деятельности. Рекомендуем перечислять денежные средства согласно условиям договоров, заключенных с вашими бизнес-партнерами. Зарабатывайте на процентах, начисляемых Банком на остаток по Вашему счету.\";",
															"",
															"var Recommendation_yellow = \"Поступившие на счет денежные средства быстро списываются. Это один из признаков сомнительной деятельности. Рекомендуем перечислять денежные средства согласно условиям договоров, заключенных с вашими бизнес-партнерами. Зарабатывайте на процентах, начисляемых Банком на остаток по Вашему счету.\";",
															"",
															"var Recommendation_green = \"Наличие существенного остатка на расчетном счете можно использовать как инструмент для начисления процентов от Банка в качестве дополнительного дохода.Скорость оборачиваемости денежных средств не вызывает сомнений у Банка. \";",
															"",
															"var Recommendation_gray = \"Наличие существенного остатка на расчетном счете можно использовать как инструмент для начисления процентов от Банка в качестве дополнительного дохода.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Наличие существенного остатка на расчетном счете можно использовать как инструмент для начисления процентов от Банка в качестве дополнительного дохода.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_3) {",
															"    var interval = interval_3 + ' ';",
															"        if (number>=interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"//ГОТОВО//",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "3d5e8b37-06e3-4770-8bb6-ec5f06f11225"
													}
												}
											],
											"id": "3a3202c8-5456-4e0b-a45a-406352b8646e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) qNDS - Исходящие платежи без НДС к входящим платежам с НДС за 90 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) qNDS - Исходящие платежи без НДС к входящим платежам с НДС за 90 дней\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"qNDS\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 30; // Красный интервал",
															"var interval_2 = 10; //Серый интервал",
															"var interval_3 = 0;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Исходящие платежи без НДС к входящим платежам с НДС за 90 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"qNDS\";",
															"var recVal = \"10\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = 'Суммы операций по зачислению на расчетный счет с НДС значительно больше суммы операций по списанию без учета НДС. При этом НДС, перечисляемый Вами незначительный, сумма уплаченного налога по НДС в адрес налоговых органов значительно меньше значения, накопленного по Вашему р/с в ПАО \\\"Металлинвестбанк\\\", что может рассматриваться как возможное участие в схеме ухода от уплаты НДС . Рекомендуем следить за правильностью начисления НДС, своевременно уплачивайте НДС, исключайте возможность участия в сомнительных схемах ухода от налогообложения.';",
															"",
															"var Recommendation_yellow = 'Суммы операций по зачислению на расчетный счет с НДС значительно больше суммы операций по списанию без учета НДС. При этом НДС, перечисляемый Вами незначительный, сумма уплаченного налога по НДС в адрес налоговых органов значительно меньше значения, накопленного по Вашему р/с в ПАО \"Металлинвестбанк\", что может рассматриваться как возможное участие в схеме ухода от уплаты НДС . Рекомендуем следить за правильностью начисления НДС, своевременно уплачивайте НДС, исключайте возможность участия в сомнительных схемах ухода от налогообложения.';",
															"",
															"var Recommendation_green = \"Расчеты по начислению НДС не вызывают сомнений у Банка. Рекомендуем следить за правильностью начисления НДС, своевременно уплачивайте НДС, исключайте возможность участия в сомнительных схемах ухода от налогообложения.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем следить за правильностью начисления НДС, своевременно уплачивайте НДС, исключайте возможность участия в сомнительных схемах ухода от налогообложения. \";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем следить за правильностью начисления НДС, своевременно уплачивайте НДС, исключайте возможность участия в сомнительных схемах ухода от налогообложения.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number>=interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number>=interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_1) {",
															"    var interval = interval_2 + '-' + interval_1 + ' ';",
															"        if (number>=interval_2 && number<interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"else if ((number==interval_3)||(number>interval_3) && number<interval_2) {",
															"    var interval = interval_3 + interval_2 + ' ';",
															"        if ((number==interval_3)||(number>interval_3) && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "6a5cffb9-babe-4109-a196-df4ecd798312"
													}
												}
											],
											"id": "ad59ccf4-fe98-4125-8710-88aeb8c2745a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "318f39e8-2a8f-4b70-b3ee-c84d01c8ee5f"
								},
								{
									"name": "Репутационные риски",
									"item": [
										{
											"name": "(+) client550P - Отсутствует нежелательная информация по данным Банка",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) client550P - Отсутствует нежелательная информация по данным Банка\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"client550P\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 1; // Красный",
															"var interval_2 = 0; // Зеленый",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Отсутствует нежелательная информация по данным Банка\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"client550P\";",
															"var recVal = \"\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Рекомендуем осуществлять платежи в рамках своей деятельности и подтверждать положительную деловую репутацию.\";",
															"",
															"var Recommendation_yellow = \"\";",
															"",
															"var Recommendation_green = \"Уважаемый клиент ! Негативной информации по Вашей организации в Банке не выявлено. \";",
															"",
															"var Recommendation_gray = \"Показатель деловой репутации значительно влияет на возможность обслуживания в Банке, контролируйте его.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Показатель деловой репутации значительно влияет на возможность обслуживания в Банке, контролируйте его. \";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number == interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number == interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number == interval_2) {",
															"    var interval = interval_2 + ' ';",
															"        if (number == interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"}",
															"",
															"else if (number != null && number != interval_1 && number != interval_2) {",
															"    pm.test(\"С AML приходят неверные данные, значение должно быть в интервале 0-1\", () => {",
															"                var response0 = jsonData.response.state.data.ag[ag];",
															"                pm.expect(response0.val).to.not.eql(\"1.000\").to.not.eql(\"0.000\");",
															"                });",
															"}"
														],
														"type": "text/javascript",
														"id": "290d5e7f-ab9f-4024-8027-fbfac20b1b53"
													}
												}
											],
											"id": "6fa1f35b-5357-410b-917a-105836505ada",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) clientAMLBL - Отсутствует негативная информация по данным Банка",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) clientAMLBL - Отсутствует негативная информация по данным Банка\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"clientAMLBL\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 1; // Красный",
															"var interval_2 = 0; // Зеленый",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Отсутствует негативная информация по данным Банка\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"clientAMLBL\";",
															"var recVal = \"\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Рекомендуем осуществлять платежи в рамках Вашей деятельности и подтверждайте положительную деловую репутацию.\\n\";",
															"",
															"var Recommendation_yellow = \"\";",
															"",
															"var Recommendation_green = \"Уважаемый клиент ! Негативной информации по Вашей организации в Банке не выявлено. \";",
															"",
															"var Recommendation_gray = \"Показатель деловой репутации значительно влияет на возможность обслуживания в Банке, контролируйте его. \";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Показатель деловой репутации значительно влияет на возможность обслуживания в Банке, контролируйте его. \";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number == interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number == interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number == interval_2) {",
															"    var interval = interval_2 + ' ';",
															"        if (number == interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"}",
															"",
															"",
															"else if (number != null && number != interval_1 && number != interval_2) {",
															"    pm.test(\"С AML приходят неверные данные, значение должно быть в интервале 0-1\", () => {",
															"                var response0 = jsonData.response.state.data.ag[ag];",
															"                pm.expect(response0.val).to.not.eql(\"1.000\").to.not.eql(\"0.000\");",
															"                });",
															"}"
														],
														"type": "text/javascript",
														"id": "c58b9db8-540d-40dd-9136-ebbec0dc5a57"
													}
												}
											],
											"id": "c6fbb7b0-de5b-4347-92f0-02b171a339db",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q550Pcredit - Поступления от контрагентов, имеющих нежелательную репутацию по данным Банка",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q550Pcredit - Поступления от контрагентов, имеющих нежелательную репутацию по данным Банка\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q550Pcredit\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 40; // Красный",
															"var interval_2 = 5; // Зеленый",
															"var interval_3 = 0;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Поступления от контрагентов, имеющих нежелательную репутацию по данным Банка\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q550Pcredit\";",
															"var recVal = \"5\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Наличие поступлений от компаний, в отношении которых у Банка имеется нежелательная информация.\\nРекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию.Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_yellow = \"Наличие поступлений от компаний, в отношении которых у Банка имеется нежелательная информация.\\nРекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию.Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_green = \"По Вашим партнерам у Банка отсутствует нежелательная информация. Рекомендуем не совершать операции с неблагонадежными компаниями. Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем не совершать операции с неблагонадежными компаниями. Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем не совершать операции с неблагонадежными компаниями. Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number >= interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number >= interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number>=interval_2 && number<interval_1) {",
															"    var interval = interval_2 + '-' + interval_1 + ' ';",
															"        if (number>=interval_2 && number<interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (((number==interval_3)||(number>interval_3)) && number<interval_2) {",
															"    var interval = interval_3 + '-' + interval_2 + ' ';",
															"        if (((number==interval_3)||(number>interval_3)) && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "0a349676-a75a-43f7-9a8f-909e6f54a102"
													}
												}
											],
											"id": "cbc7b8e1-227e-46c5-9c54-4224ac9e58f6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) q550Pdebet - Списания на контрагентов, имеющих нежелательную репутацию по данным Банка",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) q550Pdebet - Списания на контрагентов, имеющих нежелательную репутацию по данным Банка\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q550Pdebet\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 40; // Красный",
															"var interval_2 = 5; // Зеленый",
															"var interval_3 = 0;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Списания на контрагентов, имеющих нежелательную репутацию по данным Банка\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q550Pdebet\";",
															"var recVal = \"5\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Наличие платежей в пользу компаний, в отношении которых у банка имеется нежелательная информация.\\nРекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию.Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_yellow = \"Наличие платежей в пользу компаний, в отношении которых у банка имеется нежелательная информация.\\nРекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию.Советуем более тщательно подходить к выбору партнеров до заключения договоров.\"",
															"",
															";",
															"",
															"var Recommendation_green = \"По Вашим партнерам у банка отсутствует нежелательная информация.\\nРекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию.Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем не совершать операции с неблагонадежными компаниями. Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем не совершать операции с неблагонадежными компаниями. Советуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number > interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number > interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number>=interval_2 && number<interval_1) {",
															"    var interval = interval_2 + '-' + interval_1 + ' ';",
															"        if (number>=interval_2 && number<interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (((number==interval_3)||(number>interval_3)) && number<interval_2) {",
															"    var interval = interval_3 + '-' + interval_2 + ' ';",
															"        if (((number==interval_3)||(number>interval_3)) && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															""
														],
														"type": "text/javascript",
														"id": "e6d3aca2-c505-41fb-870d-29d33eec84fb"
													}
												}
											],
											"id": "da5f5e9c-fe1a-4e78-a248-923cd25b78ac",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) qAMLBLcredit - Поступления от контрагентов, имеющих негативную репутацию по данным Банка",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) qAMLBLcredit - Поступления от контрагентов, имеющих негативную репутацию по данным Банка\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"qAMLBLcredit\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Поступления от контрагентов, имеющих негативную репутацию по данным Банка\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"qAMLBLcredit\";",
															"var recVal = \"0\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Имеется информация, о наличии договорных отношений с неблагонадежными компаниями (по информации банка). Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_yellow = \"Имеется информация, о наличии договорных отношений с неблагонадежными компаниями (по информации банка). Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_green = \"По Вашим бизнес-партнерам  негативная информация у Банка не выявлена. Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number > interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number > interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if ((number==interval_1)||(number>interval_1)) {",
															"    var interval = interval_1 + ' ';",
															"        if ((number==interval_1)||(number>interval_1)) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "3f7bdfa7-9728-4eb7-8f3b-c24bae1d4a8a"
													}
												}
											],
											"id": "e7f4486e-1fdf-4a1f-8fe8-2285b2badb5e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(+) qAMLBLdebet- Списания на контрагентов, имеющих негативную репутацию по данным Банка",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(+) qAMLBLcredit - Списания на контрагентов, имеющих негативную репутацию по данным Банка\");",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"qAMLBLdebet\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Списания на контрагентов, имеющих негативную репутацию по данным Банка\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"qAMLBLdebet\";",
															"var recVal = \"0\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"По информации Банка имеется наличие платежей в пользу неблагонадежным компаний. Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_yellow = \"По информации Банка имеется наличие платежей в пользу неблагонадежным компаний. Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_green = \"По Вашим бизнес-партнерам у банка отсутствует негативная информация. Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray = \"Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позже. Рекомендуем отказаться от расчетов с компаниями, которые имеют негативную репутацию. Рекомендуем более тщательно подходить к выбору партнеров до заключения договоров.\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if (number > interval_1) {",
															"    var interval = interval_1 + ' ';",
															"        if (number > interval_1) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if ((number==interval_1)||(number>interval_1)) {",
															"    var interval = interval_1 + ' ';",
															"        if ((number==interval_1)||(number>interval_1)) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "279c3f12-9034-43c7-8335-adced92a3c06"
													}
												}
											],
											"id": "08a04667-54d4-458e-9028-8b190725ff1f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "2371463b-efa8-4b11-a0e3-b2dc1b7884ac"
								},
								{
									"name": "Окончание проверки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "bd3b0bce-05dd-4d6a-a310-793b3d153441"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setNextRequest(null)",
													"console.log(\"Всё заебись!\")"
												],
												"type": "text/javascript",
												"id": "da825700-a113-40b2-9011-4071ce3884c3"
											}
										}
									],
									"id": "720a48e9-03f9-41d7-b746-ea4766d9865b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/white_business/info"
									},
									"response": []
								}
							],
							"id": "d2d2bec7-d754-45b8-acff-253c8ba19935",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "aaa4c168-784d-406a-b8d6-25d3c92c1d51"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f3d230a7-ee27-45da-8a67-1df5e7a61fa0"
									}
								}
							]
						},
						{
							"name": "Услуга не подключена",
							"item": [
								{
									"name": "Общий рейтинг Copy",
									"item": [
										{
											"name": "(-) Common - Общий рейтинг",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"(-) Common - Общий рейтинг\");",
															"",
															"// Загоняю ответ в переменную",
															"var jsonData = pm.response.json();",
															"",
															"// Ищу индекс по значению \"common\" и присваиваю его в переменную",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"common\")",
															"",
															"// Переменные для интервалов поиска",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 30;",
															"var interval_3 = 80;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = null;",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"common\"",
															"var recVal = null; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"var Recommendation_red = \"\";",
															"var Recommendation_yellow = \"\";",
															"var Recommendation_green = \"\";",
															"var Recommendation_gray_null = \"\";",
															"var Recommendation_gray = \"\";",
															"",
															"// Создаю переменную и присваю ей значение общего рейтинга",
															"var number = jsonData.response.state.data.ag[ag].val; ",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1 - Это для меня коммент, чтобы не забыть",
															"",
															"// Проверяю соответствует ли значение рейтинга интервалу 0-30 и запускаю проверку ",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"            }",
															"",
															"    }",
															"",
															"// Проверяю соответствует ли значение рейтинга интервалу 30-80 и запускаю проверку ",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"            }",
															"    }",
															"",
															"// Проверяю соответствует ли значение рейтинга интервалу 80-100 и запускаю проверку ",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"            }",
															"    }",
															"",
															"// Проверяю соответствует ли значение рейтинга null и запускаю проверку ",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation);",
															"                });",
															"        }",
															"    };"
														],
														"type": "text/javascript",
														"id": "2ed2ab77-47d3-4eab-ac51-863255f33015"
													}
												}
											],
											"id": "67f4b3b8-f8bc-4def-a543-e6f506de8ee9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"operationBool\":1,\"accNumber\":40702810300990001873,\"prolongation\":0}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "7c1335b2-b4d7-484f-9906-96dd972aa5e4"
								},
								{
									"name": "Налоговая нагрузка Copy",
									"item": [
										{
											"name": "(-) q3mTaxAll - Налоговая нагрузка за 90 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(-) q3mTaxAll - Налоговая нагрузка за 90 дней\");",
															"",
															"// q3mTaxAll - Налоговая нагрузка за 90 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q3mTaxAll\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 1;",
															"var interval_3 = 2.2;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Налоговая нагрузка за последние 90 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q3mTaxAll\";",
															"var recVal = \"2.2\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Доля уплаченных Вами налогов составляет менее рекомендованного минимума ЦБ. Рекомендуем Вам поддерживать уровень налоговой нагрузки, ориентируясь на налоговую нагрузку Вашей отрасли, которую ФНС публикует в открытых источниках. Рекомендуем следовать рекомендациям ЦБ, по мнению ЦБ: доля налоговых отчислений в дебетовом обороте должна начинаться с 1%. В удельный вес налоговой нагрузки включаются все налоговые платежи, в том числе страховые взносы.\";",
															"",
															"var Recommendation_yellow = \"Доля уплаченных Вами налогов достигла  порогового значения в 1% от оборота. Есть вероятность оказаться в зоне риска. Рекомендуем поддерживать этот уровень  налоговой нагрузки. Ориентируйтесь, пожалуйста, на показатель средней налоговой нагрузки по Вашей отрасли, ФНС России публикует информацию в открытом доступе\";",
															"",
															"var Recommendation_green = \"Доля уплаченных Вами налогов более 2,2 % от оборота. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках\";",
															"",
															"var Recommendation_gray = \"Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках. При этом рекомендуем поддерживать налоговую нагрузку на уровне не менее 1 % от Дебетовых оборотов\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источника. При этом рекомендуем, чтобы налогов было минимум 1% от Дебетовых оборотов по счету\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "d1a0e17e-62b1-43b7-893c-369ebdd42cea"
													}
												}
											],
											"id": "ff6fa354-d801-46f5-8180-fe42c254932c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(-) q6mTaxAll - Налоговая нагрузка за последние 180 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(-) q6mTaxAll - Налоговая нагрузка за последние 180 дней\");",
															"",
															"// q6mTaxAll - Налоговая нагрузка за последние 180 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q6mTaxAll\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 1;",
															"var interval_3 = 2.2;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Налоговая нагрузка за последние 180 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q6mTaxAll\";",
															"var recVal = \"2.2\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Доля уплаченных Вами налогов составляет менее рекомендованного минимума ЦБ. Рекомендуем Вам поддерживать уровень налоговой нагрузки, ориентируясь на налоговую нагрузку Вашей отрасли, которую ФНС публикует в открытых источниках. Рекомендуем следовать рекомендациям ЦБ, по мнению ЦБ: доля налоговых отчислений в дебетовом обороте должна начинаться с 1%. В удельный вес налоговой нагрузки включаются все налоговые платежи, в том числе страховые взносы.\";",
															"",
															"var Recommendation_yellow = \"Доля уплаченных Вами налогов достигла  порогового значения в 1% от оборота. Есть вероятность оказаться в зоне риска. Рекомендуем поддерживать этот уровень  налоговой нагрузки. Ориентируйтесь, пожалуйста, на показатель средней налоговой нагрузки по Вашей отрасли, ФНС России публикует информацию в открытом доступе\";",
															"",
															"var Recommendation_green = \"Доля уплаченных Вами налогов более 2,2 % от оборота. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках\";",
															"",
															"var Recommendation_gray = \"Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источниках. При этом рекомендуем поддерживать налоговую нагрузку на уровне не менее 1 % от Дебетовых оборотов\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее. Рекомендуем всегда ориентироваться на показатель средней налоговой нагрузки по Вашей отрасли, которую ФНС публикует в открытых источника. При этом рекомендуем, чтобы налогов было минимум 1% от Дебетовых оборотов по счету\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "4de2857e-09aa-4d21-ab5e-f7b4f62492c7"
													}
												}
											],
											"id": "31dbe046-1f04-4dc8-8952-0a9fc2f6eb8e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										},
										{
											"name": "(-) q_NDFL_FL_90d - НДФЛ за 90 дней",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log (\"(-) q_NDFL_FL_90d - НДФЛ за 90 дней\");",
															"",
															"// q_NDFL_FL_90d - НДФЛ за 90 дней",
															"",
															"var jsonData = pm.response.json(); // Загоняю Response в переменную",
															"",
															"var ag = jsonData.response.state.data.ag.findIndex(x => x.name === \"q_NDFL_FL_90d\");",
															"var number = jsonData.response.state.data.ag[ag].val;",
															"",
															"var interval_0 = null;",
															"var interval_1 = 0;",
															"var interval_2 = 2.5;",
															"var interval_3 = 7.5;",
															"var interval_4 = 100;",
															"",
															"// Переменные для названия цвета",
															"var color_name_red = \"red\";",
															"var color_name_yellow = \"yellow\";",
															"var color_name_green = \"green\";",
															"var color_name_gray_null = \"gray_null\";",
															"",
															"// Переменные для значений цвета",
															"var color_value_red = \"FF2727\";",
															"var color_value_yellow = \"F1C84A\";",
															"var color_value_green = \"1FD071\";",
															"var color_value_gray_null = \"C4C4C4\";",
															"",
															"// Переменные Description, Header, Name",
															"var Description = \"Нагрузка по уплате НДФЛ от переводов физлицам за 90 дней\";",
															"var Header_red = \"Как улучшить показатель?\";",
															"var Header_yellow = \"Как улучшить показатель?\";",
															"var Header_green = \"Совет на будущее\";",
															"var Header_gray = \"Подробнее о показателе\";",
															"var Name = \"q_NDFL_FL_90d\";",
															"var recVal = \"7.5\"; // Переменная для \"Рекомендуемое значение\"",
															"",
															"// Переменные для текста рекомендаций",
															"var Recommendation = null;",
															"",
															"var Recommendation_red = \"Переводы в адрес физических лиц без оплаченного НДФЛ составили большой объем от Ваших операций. Рекомендуем существенно сократить объемы переводов на счета физическим лицам, которые не входят в штат Вашей компании.\\nПри выплате заработной платы сотрудникам придерживайтесь одновременной уплаты НДФЛ  (пункт 6 статьи 226 НК РФ)\";",
															"",
															"var Recommendation_yellow = \"Переводы в адрес физических лиц без оплаченного НДФЛ составили большой объем от Ваших операций. Рекомендуем существенно сократить объемы переводов на счета физическим лицам, которые не входят в штат Вашей компании.\\nПри выплате заработной платы сотрудникам придерживайтесь одновременной уплаты НДФЛ  (пункт 6 статьи 226 НК РФ).\";",
															"",
															"var Recommendation_green = \"Перечисления НДФЛ соответствуют объемам переводов в пользу физических лиц. Рекомендуем перечислять НДФЛ одновременно с выплатой заработной платы\";",
															"",
															"var Recommendation_gray = \"Рекомендуем перечислять НДФЛ одновременно с выплатой заработной платы\";",
															"",
															"var Recommendation_gray_null = \"Пока у нас недостаточно данных для расчета данного показателя – проверьте позднее.Рекомендуем перечислять НДФЛ одновременно с выплатой заработной платы\";",
															"",
															"",
															"// || - оператор \"или\", т.е. number>=interval_1",
															"if ( ((number==interval_1)||(number>interval_1)) && number<interval_2) {",
															"    var interval = interval_1 + '-' + interval_2 + ' ';",
															"        if (number>=interval_1 && number<interval_2) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_red);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_red);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_red);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_red);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_2 && number<interval_3) {",
															"    var interval = interval_2 + '-' + interval_3 + ' ';",
															"        if (number>=interval_2 && number<interval_3) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_yellow);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_yellow);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_yellow);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_yellow);",
															"                });",
															"            }",
															"    }",
															"",
															"else if (number>=interval_3 && number<=interval_4) {",
															"    var interval = interval_3 + '-' + interval_4 + ' ';",
															"        if (number>=interval_3 && number<=interval_4) {",
															"            var response0 = jsonData.response.state.data.ag[ag];",
															"            ",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_green);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_green);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_green);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_green);",
															"                });",
															"            }",
															"    }",
															"",
															"",
															"else if (number === null) {",
															"        var interval = interval_0 + ' ';",
															"        if (number === null) {",
															"        var response0 = jsonData.response.state.data.ag[ag];",
															"            //Color",
															"            pm.test (interval + \"Color\", () => {",
															"                pm.expect(response0.color).to.eql(color_value_gray_null);",
															"                });",
															"            ",
															"            //ColorName",
															"            pm.test (interval + \"ColorName\", () => {",
															"                pm.expect(response0.colorName).to.eql(color_name_gray_null);",
															"                });",
															"",
															"            //Description",
															"            pm.test (interval + \"Description\", () => {",
															"                pm.expect(response0.description).to.eql(Description);",
															"                });",
															"",
															"            //Header",
															"            pm.test (interval + \"Header\", () => {",
															"                pm.expect(response0.header).to.eql(Header_gray);",
															"                });",
															"",
															"            //Name",
															"            pm.test (interval + \"Name\", () => {",
															"                pm.expect(response0.name).to.eql(Name);",
															"                });",
															"",
															"            //recVal",
															"            pm.test (interval + \"recVal\", () => {",
															"                pm.expect(response0.recVal).to.eql(recVal);",
															"                });",
															"            ",
															"            //Recommendation",
															"            pm.test (interval + \"Recommendation\", () => {",
															"                pm.expect(response0.recommendation).to.eql(Recommendation_gray_null);",
															"                });",
															"        }",
															"    };"
														],
														"type": "text/javascript",
														"id": "3045620c-0b11-4631-b54e-f42ca50259fe"
													}
												}
											],
											"id": "80b4fbb6-37af-4285-a829-c6d4d7c7b8f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": "{{host}}/rest/stateful/corp/white_business/info"
											},
											"response": []
										}
									],
									"id": "27b59f60-0c05-44e8-862e-a62be6e38b76"
								},
								{
									"name": "Окончание проверки",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Всё заебись!\")"
												],
												"type": "text/javascript",
												"id": "39ae332a-0753-4667-af2e-da79bdff0e23"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setNextRequest(null)"
												],
												"type": "text/javascript",
												"id": "f2eb46db-fff6-45f7-80b4-e4ddd7db916a"
											}
										}
									],
									"id": "eff9e8c6-60e4-4cff-8158-d8efa7ad95c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/white_business/info"
									},
									"response": []
								}
							],
							"id": "339f828b-dc2d-46cd-a1c7-97fe93205952",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// var jsonData = pm.response.json();",
											"",
											"// if (jsonData.status == 0) {",
											"//     postman.setNextRequest(0) // don't process anymore requests",
											"// };",
											"// console.log(\"Статус 0 - этого не должно тут быть\")"
										],
										"id": "af05443d-6b0f-475f-b0f9-c94e8f7178dc"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d0ae179c-99bf-46e2-96d0-045860231fe6"
									}
								}
							]
						}
					],
					"id": "74afa1f7-ecb8-459d-ac58-cc16e749e785"
				}
			],
			"id": "8acf177f-6d8b-4e1c-bd9a-3bd67ae3c4c6"
		},
		{
			"name": "Открытие счетов",
			"item": [
				{
					"name": "3878. Допустимые валюты",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "452118a3-93e5-4477-a5a4-2090f46f1f28"
									}
								}
							],
							"id": "37c68893-43f5-40bc-aa71-eea991dd8faf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Проверка списка валют",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Загоняю ответ в переменную",
											"var jsonData = pm.response.json();",
											"",
											"",
											"//Проверяю, что приходит количество валют, равное 12",
											"pm.test(\"Количество валют правильное\", function () {",
											"    pm.expect(jsonData.data.length).to.eql(12);",
											"});",
											"",
											"//1 - Проверяю ответ для CNY",
											"{",
											"    var id_CNY = jsonData.data.findIndex(x => x.positionNum === \"1\")",
											"    pm.test('Поле positionNum - CNY', () => {",
											"        pm.expect(jsonData.data[id_CNY].positionNum).to.eql('1');",
											"    });",
											"    pm.test('Поле code - CNY', () => {",
											"        pm.expect(jsonData.data[id_CNY].code).to.eql('CNY');",
											"    });",
											"    pm.test('Поле caption - CNY', () => {",
											"        pm.expect(jsonData.data[id_CNY].caption).to.eql('Китайский юань');",
											"    });",
											"    pm.test('Поле description - CNY', () => {",
											"        pm.expect(jsonData.data[id_CNY].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//2 - Проверяю ответ для TRY",
											"{",
											"    var id_TRY = jsonData.data.findIndex(x => x.positionNum === \"2\")",
											"",
											"    pm.test('Поле positionNum - TRY', () => {",
											"        pm.expect(jsonData.data[id_TRY].positionNum).to.eql('2');",
											"    });",
											"    pm.test('Поле code - TRY', () => {",
											"        pm.expect(jsonData.data[id_TRY].code).to.eql('TRY');",
											"    });",
											"    pm.test('Поле caption - TRY', () => {",
											"        pm.expect(jsonData.data[id_TRY].caption).to.eql('Турецкая лира');",
											"    });",
											"    pm.test('Поле description - TRY', () => {",
											"        pm.expect(jsonData.data[id_TRY].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//3 - Проверяю ответ для KZT",
											"{",
											"    var id_KZT = jsonData.data.findIndex(x => x.positionNum === \"3\")",
											"",
											"    pm.test('Поле positionNum - KZT', () => {",
											"        pm.expect(jsonData.data[id_KZT].positionNum).to.eql('3');",
											"    });",
											"    pm.test('Поле code - KZT', () => {",
											"        pm.expect(jsonData.data[id_KZT].code).to.eql('KZT');",
											"    });",
											"    pm.test('Поле caption - KZT', () => {",
											"        pm.expect(jsonData.data[id_KZT].caption).to.eql('Казахстанский тенге');",
											"    });",
											"    pm.test('Поле description - KZT', () => {",
											"        pm.expect(jsonData.data[id_KZT].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//4 - Проверяю ответ для BYN",
											"{",
											"    var id_BYN = jsonData.data.findIndex(x => x.positionNum === \"4\")",
											"",
											"    pm.test('Поле positionNum - BYN', () => {",
											"        pm.expect(jsonData.data[id_BYN].positionNum).to.eql('4');",
											"    });",
											"    pm.test('Поле code - BYN', () => {",
											"        pm.expect(jsonData.data[id_BYN].code).to.eql('BYN');",
											"    });",
											"    pm.test('Поле caption - BYN', () => {",
											"        pm.expect(jsonData.data[id_BYN].caption).to.eql('Белорусский рубль');",
											"    });",
											"    pm.test('Поле description - BYN', () => {",
											"        pm.expect(jsonData.data[id_BYN].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//5 - Проверяю ответ для USD",
											"{",
											"    var id_USD = jsonData.data.findIndex(x => x.positionNum === \"5\")",
											"",
											"    pm.test('Поле positionNum - USD', () => {",
											"        pm.expect(jsonData.data[id_USD].positionNum).to.eql('5');",
											"    });",
											"    pm.test('Поле code - USD', () => {",
											"        pm.expect(jsonData.data[id_USD].code).to.eql('USD');",
											"    });",
											"    pm.test('Поле caption - USD', () => {",
											"        pm.expect(jsonData.data[id_USD].caption).to.eql('Доллар США');",
											"    });",
											"    pm.test('Поле description - USD', () => {",
											"        pm.expect(jsonData.data[id_USD].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//6 - Проверяю ответ для EUR",
											"{",
											"    var id_EUR = jsonData.data.findIndex(x => x.positionNum === \"6\")",
											"",
											"    pm.test('Поле positionNum - EUR', () => {",
											"        pm.expect(jsonData.data[id_EUR].positionNum).to.eql('6');",
											"    });",
											"    pm.test('Поле code - EUR', () => {",
											"        pm.expect(jsonData.data[id_EUR].code).to.eql('EUR');",
											"    });",
											"    pm.test('Поле caption - EUR', () => {",
											"        pm.expect(jsonData.data[id_EUR].caption).to.eql('Евро');",
											"    });",
											"    pm.test('Поле description - EUR', () => {",
											"        pm.expect(jsonData.data[id_EUR].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//7 - Проверяю ответ для GBP",
											"{",
											"    // var id_GBP = jsonData.data.findIndex(x => x.positionNum === \"7\")",
											"",
											"    // pm.test('Поле positionNum - GBP', () => {",
											"    //     pm.expect(jsonData.data[id_GBP].positionNum).to.eql('7');",
											"    // });",
											"    // pm.test('Поле code - GBP', () => {",
											"    //     pm.expect(jsonData.data[id_GBP].code).to.eql('GBP');",
											"    // });",
											"    // pm.test('Поле caption - GBP', () => {",
											"    //     pm.expect(jsonData.data[id_GBP].caption).to.eql('Фунт стерлингов Соединенного королевства');",
											"    // });",
											"    // pm.test('Поле description - GBP', () => {",
											"    //     pm.expect(jsonData.data[id_GBP].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//8 - Проверяю ответ для CHF",
											"{",
											"    // var id_CHF = jsonData.data.findIndex(x => x.positionNum === \"8\")",
											"",
											"    // pm.test('Поле positionNum - CHF', () => {",
											"    //     pm.expect(jsonData.data[id_CHF].positionNum).to.eql('8');",
											"    // });",
											"    // pm.test('Поле code - CHF', () => {",
											"    //     pm.expect(jsonData.data[id_CHF].code).to.eql('CHF');",
											"    // });",
											"    // pm.test('Поле caption - CHF', () => {",
											"    //     pm.expect(jsonData.data[id_CHF].caption).to.eql('Швейцарский франк');",
											"    // });",
											"    // pm.test('Поле description - CHF', () => {",
											"    //     pm.expect(jsonData.data[id_CHF].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//9 - Проверяю ответ для DKK",
											"{",
											"    // var id_DKK = jsonData.data.findIndex(x => x.positionNum === \"9\")",
											"",
											"    // pm.test('Поле positionNum - DKK', () => {",
											"    //     pm.expect(jsonData.data[id_DKK].positionNum).to.eql('9');",
											"    // });",
											"    // pm.test('Поле code - DKK', () => {",
											"    //     pm.expect(jsonData.data[id_DKK].code).to.eql('DKK');",
											"    // });",
											"    // pm.test('Поле caption - DKK', () => {",
											"    //     pm.expect(jsonData.data[id_DKK].caption).to.eql('Датская крона');",
											"    // });",
											"    // pm.test('Поле description - DKK', () => {",
											"    //     pm.expect(jsonData.data[id_DKK].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//10 - Проверяю ответ для AED",
											"{",
											"    var id_AED = jsonData.data.findIndex(x => x.positionNum === \"10\")",
											"",
											"    pm.test('Поле positionNum - AED', () => {",
											"        pm.expect(jsonData.data[id_AED].positionNum).to.eql('10');",
											"    });",
											"    pm.test('Поле code - AED', () => {",
											"        pm.expect(jsonData.data[id_AED].code).to.eql('AED');",
											"    });",
											"    pm.test('Поле caption - AED', () => {",
											"        pm.expect(jsonData.data[id_AED].caption).to.eql('ДИРХАМ (ОАЭ)');",
											"    });",
											"    pm.test('Поле description - AED', () => {",
											"        pm.expect(jsonData.data[id_AED].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//11 - Проверяю ответ для ALL",
											"{",
											"    //var id_ALL = jsonData.data.findIndex(x => x.positionNum === \"11\")",
											"",
											"    // pm.test('Поле positionNum - ALL', () => {",
											"    //     pm.expect(jsonData.data[id_ALL].positionNum).to.eql('11');",
											"    // });",
											"    // pm.test('Поле code - ALL', () => {",
											"    //     pm.expect(jsonData.data[id_ALL].code).to.eql('ALL');",
											"    // });",
											"    // pm.test('Поле caption - ALL', () => {",
											"    //     pm.expect(jsonData.data[id_ALL].caption).to.eql('Лек');",
											"    // });",
											"    // pm.test('Поле description - ALL', () => {",
											"    //     pm.expect(jsonData.data[id_ALL].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//12 - Проверяю ответ для AUD",
											"{",
											"    // var id_AUD = jsonData.data.findIndex(x => x.positionNum === \"12\")",
											"",
											"    // pm.test('Поле positionNum - AUD', () => {",
											"    //     pm.expect(jsonData.data[id_AUD].positionNum).to.eql('12');",
											"    // });",
											"    // pm.test('Поле code - AUD', () => {",
											"    //     pm.expect(jsonData.data[id_AUD].code).to.eql('AUD');",
											"    // });",
											"    // pm.test('Поле caption - AUD', () => {",
											"    //     pm.expect(jsonData.data[id_AUD].caption).to.eql('Австралийский доллар');",
											"    // });",
											"    // pm.test('Поле description - AUD', () => {",
											"    //     pm.expect(jsonData.data[id_AUD].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//13 - Проверяю ответ для BAM",
											"{",
											"    // var id_BAM = jsonData.data.findIndex(x => x.positionNum === \"13\")",
											"",
											"    // pm.test('Поле positionNum - BAM', () => {",
											"    //     pm.expect(jsonData.data[id_BAM].positionNum).to.eql('13');",
											"    // });",
											"    // pm.test('Поле code - BAM', () => {",
											"    //     pm.expect(jsonData.data[id_BAM].code).to.eql('BAM');",
											"    // });",
											"    // pm.test('Поле caption - BAM', () => {",
											"    //     pm.expect(jsonData.data[id_BAM].caption).to.eql('Конвертируемая марка');",
											"    // });",
											"    // pm.test('Поле description - BAM', () => {",
											"    //     pm.expect(jsonData.data[id_BAM].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//14 Проверяю ответ для BGN",
											"{",
											"    //     var id_BGN = jsonData.data.findIndex(x => x.positionNum === \"14\")",
											"",
											"    // pm.test('Поле positionNum - BGN', () => {",
											"    //     pm.expect(jsonData.data[id_BGN].positionNum).to.eql('14');",
											"    // });",
											"    // pm.test('Поле code - BGN', () => {",
											"    //     pm.expect(jsonData.data[id_BGN].code).to.eql('BGN');",
											"    // });",
											"    // pm.test('Поле caption - BGN', () => {",
											"    //     pm.expect(jsonData.data[id_BGN].caption).to.eql('Болгарский лев');",
											"    // });",
											"    // pm.test('Поле description - BGN', () => {",
											"    //     pm.expect(jsonData.data[id_BGN].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//15 - Проверяю ответ для HRK",
											"{",
											"    // var id_HRK = jsonData.data.findIndex(x => x.positionNum === \"15\")",
											"",
											"    // pm.test('Поле positionNum - HRK', () => {",
											"    //     pm.expect(jsonData.data[id_HRK].positionNum).to.eql('15');",
											"    // });",
											"    // pm.test('Поле code - HRK', () => {",
											"    //     pm.expect(jsonData.data[id_HRK].code).to.eql('HRK');",
											"    // });",
											"    // pm.test('Поле caption - HRK', () => {",
											"    //     pm.expect(jsonData.data[id_HRK].caption).to.eql('Хорватская куна');",
											"    // });",
											"    // pm.test('Поле description - HRK', () => {",
											"    //     pm.expect(jsonData.data[id_HRK].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//16 - Проверяю ответ для HUF",
											"{",
											"    // var id_HUF = jsonData.data.findIndex(x => x.positionNum === \"16\")",
											"",
											"    // pm.test('Поле positionNum - HUF', () => {",
											"    //     pm.expect(jsonData.data[id_HUF].positionNum).to.eql('16');",
											"    // });",
											"    // pm.test('Поле code - HUF', () => {",
											"    //     pm.expect(jsonData.data[id_HUF].code).to.eql('HUF');",
											"    // });",
											"    // pm.test('Поле caption - HUF', () => {",
											"    //     pm.expect(jsonData.data[id_HUF].caption).to.eql('Венгерский форинт');",
											"    // });",
											"    // pm.test('Поле description - HUF', () => {",
											"    //     pm.expect(jsonData.data[id_HUF].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//17 - Проверяю ответ для HKD",
											"{",
											"    var id_HKD = jsonData.data.findIndex(x => x.positionNum === \"17\")",
											"",
											"    pm.test('Поле positionNum - HKD', () => {",
											"        pm.expect(jsonData.data[id_HKD].positionNum).to.eql('17');",
											"    });",
											"    pm.test('Поле code - HKD', () => {",
											"        pm.expect(jsonData.data[id_HKD].code).to.eql('HKD');",
											"    });",
											"    pm.test('Поле caption - HKD', () => {",
											"        pm.expect(jsonData.data[id_HKD].caption).to.eql('Гонконгский доллар');",
											"    });",
											"    pm.test('Поле description - HKD', () => {",
											"        pm.expect(jsonData.data[id_HKD].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//18 - Проверяю ответ для INR",
											"{",
											"    var id_INR = jsonData.data.findIndex(x => x.positionNum === \"18\")",
											"",
											"    pm.test('Поле positionNum - INR', () => {",
											"        pm.expect(jsonData.data[id_INR].positionNum).to.eql('18');",
											"    });",
											"    pm.test('Поле code - INR', () => {",
											"        pm.expect(jsonData.data[id_INR].code).to.eql('INR');",
											"    });",
											"    pm.test('Поле caption - INR', () => {",
											"        pm.expect(jsonData.data[id_INR].caption).to.eql('Индийская рупия');",
											"    });",
											"    pm.test('Поле description - INR', () => {",
											"        pm.expect(jsonData.data[id_INR].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//19 - Проверяю ответ для KWD",
											"{",
											"    // var id_KWD = jsonData.data.findIndex(x => x.positionNum === \"19\")",
											"",
											"    // pm.test('Поле positionNum - KWD', () => {",
											"    //     pm.expect(jsonData.data[id_KWD].positionNum).to.eql('19');",
											"    // });",
											"    // pm.test('Поле code - KWD', () => {",
											"    //     pm.expect(jsonData.data[id_KWD].code).to.eql('KWD');",
											"    // });",
											"    // pm.test('Поле caption - KWD', () => {",
											"    //     pm.expect(jsonData.data[id_KWD].caption).to.eql('Кувейтский динар');",
											"    // });",
											"    // pm.test('Поле description - KWD', () => {",
											"    //     pm.expect(jsonData.data[id_KWD].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//20 - Проверяю ответ для MXN",
											"{",
											"    // var id_MXN = jsonData.data.findIndex(x => x.positionNum === \"20\")",
											"",
											"    // pm.test('Поле positionNum - MXN', () => {",
											"    //     pm.expect(jsonData.data[id_MXN].positionNum).to.eql('20');",
											"    // });",
											"    // pm.test('Поле code - MXN', () => {",
											"    //     pm.expect(jsonData.data[id_MXN].code).to.eql('MXN');",
											"    // });",
											"    // pm.test('Поле caption - MXN', () => {",
											"    //     pm.expect(jsonData.data[id_MXN].caption).to.eql('Мексиканское песо');",
											"    // });",
											"    // pm.test('Поле description - MXN', () => {",
											"    //     pm.expect(jsonData.data[id_MXN].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//21 - Проверяю ответ для QAR",
											"{",
											"    // var id_QAR = jsonData.data.findIndex(x => x.positionNum === \"21\")",
											"",
											"    // pm.test('Поле positionNum - QAR', () => {",
											"    //     pm.expect(jsonData.data[id_QAR].positionNum).to.eql('21');",
											"    // });",
											"    // pm.test('Поле code - QAR', () => {",
											"    //     pm.expect(jsonData.data[id_QAR].code).to.eql('QAR');",
											"    // });",
											"    // pm.test('Поле caption - QAR', () => {",
											"    //     pm.expect(jsonData.data[id_QAR].caption).to.eql('Катарский риал');",
											"    // });",
											"    // pm.test('Поле description - QAR', () => {",
											"    //     pm.expect(jsonData.data[id_QAR].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//22 - Проверяю ответ для RON",
											"{",
											"    // var id_RON = jsonData.data.findIndex(x => x.positionNum === \"22\")",
											"",
											"    // pm.test('Поле positionNum - RON', () => {",
											"    //     pm.expect(jsonData.data[id_RON].positionNum).to.eql('22');",
											"    // });",
											"    // pm.test('Поле code - RON', () => {",
											"    //     pm.expect(jsonData.data[id_RON].code).to.eql('RON');",
											"    // });",
											"    // pm.test('Поле caption - RON', () => {",
											"    //     pm.expect(jsonData.data[id_RON].caption).to.eql('Новый румынский леев');",
											"    // });",
											"    // pm.test('Поле description - RON', () => {",
											"    //     pm.expect(jsonData.data[id_RON].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//23 - Проверяю ответ для RSD",
											"{",
											"    // var id_RSD = jsonData.data.findIndex(x => x.positionNum === \"23\")",
											"",
											"    // pm.test('Поле positionNum - RSD', () => {",
											"    //     pm.expect(jsonData.data[id_RSD].positionNum).to.eql('23');",
											"    // });",
											"    // pm.test('Поле code - RSD', () => {",
											"    //     pm.expect(jsonData.data[id_RSD].code).to.eql('RSD');",
											"    // });",
											"    // pm.test('Поле caption - RSD', () => {",
											"    //     pm.expect(jsonData.data[id_RSD].caption).to.eql('Сербский динар');",
											"    // });",
											"    // pm.test('Поле description - RSD', () => {",
											"    //     pm.expect(jsonData.data[id_RSD].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//24 - Проверяю ответ для SAR",
											"{",
											"    // var id_SAR = jsonData.data.findIndex(x => x.positionNum === \"24\")",
											"",
											"    // pm.test('Поле positionNum - SAR', () => {",
											"    //     pm.expect(jsonData.data[id_SAR].positionNum).to.eql('24');",
											"    // });",
											"    // pm.test('Поле code - SAR', () => {",
											"    //     pm.expect(jsonData.data[id_SAR].code).to.eql('SAR');",
											"    // });",
											"    // pm.test('Поле caption - SAR', () => {",
											"    //     pm.expect(jsonData.data[id_SAR].caption).to.eql('Саудовский риял');",
											"    // });",
											"    // pm.test('Поле description - SAR', () => {",
											"    //     pm.expect(jsonData.data[id_SAR].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//25 - Проверяю ответ для THB",
											"{",
											"    // var id_THB = jsonData.data.findIndex(x => x.positionNum === \"25\")",
											"",
											"    // pm.test('Поле positionNum - THB', () => {",
											"    //     pm.expect(jsonData.data[id_THB].positionNum).to.eql('25');",
											"    // });",
											"    // pm.test('Поле code - THB', () => {",
											"    //     pm.expect(jsonData.data[id_THB].code).to.eql('THB');",
											"    // });",
											"    // pm.test('Поле caption - THB', () => {",
											"    //     pm.expect(jsonData.data[id_THB].caption).to.eql('Тайский бат');",
											"    // });",
											"    // pm.test('Поле description - THB', () => {",
											"    //     pm.expect(jsonData.data[id_THB].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//26 - Проверяю ответ для ZAR",
											"{",
											"    // var id_ZAR = jsonData.data.findIndex(x => x.positionNum === \"26\")",
											"",
											"    // pm.test('Поле positionNum - ZAR', () => {",
											"    //     pm.expect(jsonData.data[id_ZAR].positionNum).to.eql('26');",
											"    // });",
											"    // pm.test('Поле code - ZAR', () => {",
											"    //     pm.expect(jsonData.data[id_ZAR].code).to.eql('ZAR');",
											"    // });",
											"    // pm.test('Поле caption - ZAR', () => {",
											"    //     pm.expect(jsonData.data[id_ZAR].caption).to.eql('Южноафриканский рэнд');",
											"    // });",
											"    // pm.test('Поле description - ZAR', () => {",
											"    //     pm.expect(jsonData.data[id_ZAR].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//27 - Проверяю ответ для JPY",
											"{",
											"    // var id_JPY = jsonData.data.findIndex(x => x.positionNum === \"27\")",
											"",
											"    // pm.test('Поле positionNum - JPY', () => {",
											"    //     pm.expect(jsonData.data[id_JPY].positionNum).to.eql('27');",
											"    // });",
											"    // pm.test('Поле code - JPY', () => {",
											"    //     pm.expect(jsonData.data[id_JPY].code).to.eql('JPY');",
											"    // });",
											"    // pm.test('Поле caption - JPY', () => {",
											"    //     pm.expect(jsonData.data[id_JPY].caption).to.eql('Японская иена');",
											"    // });",
											"    // pm.test('Поле description - JPY', () => {",
											"    //     pm.expect(jsonData.data[id_JPY].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//28 - Проверяю ответ для PLN",
											"{",
											"    // var id_PLN = jsonData.data.findIndex(x => x.positionNum === \"28\")",
											"",
											"    // pm.test('Поле positionNum - PLN', () => {",
											"    //     pm.expect(jsonData.data[id_PLN].positionNum).to.eql('28');",
											"    // });",
											"    // pm.test('Поле code - PLN', () => {",
											"    //     pm.expect(jsonData.data[id_PLN].code).to.eql('PLN');",
											"    // });",
											"    // pm.test('Поле caption - PLN', () => {",
											"    //     pm.expect(jsonData.data[id_PLN].caption).to.eql('Польский злотый');",
											"    // });",
											"    // pm.test('Поле description - PLN', () => {",
											"    //     pm.expect(jsonData.data[id_PLN].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//29 - Проверяю ответ для UZS",
											"{",
											"    var id_UZS = jsonData.data.findIndex(x => x.positionNum === \"29\")",
											"",
											"    pm.test('Поле positionNum - UZS', () => {",
											"        pm.expect(jsonData.data[id_UZS].positionNum).to.eql('29');",
											"    });",
											"    pm.test('Поле code - UZS', () => {",
											"        pm.expect(jsonData.data[id_UZS].code).to.eql('UZS');",
											"    });",
											"    pm.test('Поле caption - UZS', () => {",
											"        pm.expect(jsonData.data[id_UZS].caption).to.eql('Узбекский сум');",
											"    });",
											"    pm.test('Поле description - UZS', () => {",
											"        pm.expect(jsonData.data[id_UZS].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//30 - Проверяю ответ для CZK",
											"{",
											"    // var id_CZK = jsonData.data.findIndex(x => x.positionNum === \"30\")",
											"",
											"    // pm.test('Поле positionNum - CZK', () => {",
											"    //     pm.expect(jsonData.data[id_CZK].positionNum).to.eql('30');",
											"    // });",
											"    // pm.test('Поле code - CZK', () => {",
											"    //     pm.expect(jsonData.data[id_CZK].code).to.eql('CZK');",
											"    // });",
											"    // pm.test('Поле caption - CZK', () => {",
											"    //     pm.expect(jsonData.data[id_CZK].caption).to.eql('Чешская крона');",
											"    // });",
											"    // pm.test('Поле description - CZK', () => {",
											"    //     pm.expect(jsonData.data[id_CZK].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//31 - Проверяю ответ для AZN",
											"{",
											"    // var id_AZN = jsonData.data.findIndex(x => x.positionNum === \"31\")",
											"",
											"    // pm.test('Поле positionNum - AZN', () => {",
											"    //     pm.expect(jsonData.data[id_AZN].positionNum).to.eql('31');",
											"    // });",
											"    // pm.test('Поле code - AZN', () => {",
											"    //     pm.expect(jsonData.data[id_AZN].code).to.eql('AZN');",
											"    // });",
											"    // pm.test('Поле caption - AZN', () => {",
											"    //     pm.expect(jsonData.data[id_AZN].caption).to.eql('Азербайджанский манат');",
											"    // });",
											"    // pm.test('Поле description - AZN', () => {",
											"    //     pm.expect(jsonData.data[id_AZN].description).to.eql('{\\\"OpenValACC\\\":\\\"false\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    // });",
											"}",
											"",
											"",
											"//32 - Проверяю ответ для AMD",
											"{",
											"    var id_AMD = jsonData.data.findIndex(x => x.positionNum === \"32\")",
											"",
											"    pm.test('Поле positionNum - AMD', () => {",
											"        pm.expect(jsonData.data[id_AMD].positionNum).to.eql('32');",
											"    });",
											"    pm.test('Поле code - AMD', () => {",
											"        pm.expect(jsonData.data[id_AMD].code).to.eql('AMD');",
											"    });",
											"    pm.test('Поле caption - AMD', () => {",
											"        pm.expect(jsonData.data[id_AMD].caption).to.eql('Армянский драм');",
											"    });",
											"    pm.test('Поле description - AMD', () => {",
											"        pm.expect(jsonData.data[id_AMD].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"true\\\"}');",
											"    });",
											"}",
											"",
											"",
											"//33 - Проверяю ответ для GEL",
											"{",
											"    var id_GEL = jsonData.data.findIndex(x => x.positionNum === \"33\")",
											"",
											"    pm.test('Поле positionNum - GEL', () => {",
											"        pm.expect(jsonData.data[id_GEL].positionNum).to.eql('33');",
											"    });",
											"    pm.test('Поле code - GEL', () => {",
											"        pm.expect(jsonData.data[id_GEL].code).to.eql('GEL');",
											"    });",
											"    pm.test('Поле caption - GEL', () => {",
											"        pm.expect(jsonData.data[id_GEL].caption).to.eql('Грузинский лари');",
											"    });",
											"    pm.test('Поле description - GEL', () => {",
											"        pm.expect(jsonData.data[id_GEL].description).to.eql('{\\\"OpenValACC\\\":\\\"true\\\",\\\"MultiValPay\\\":\\\"false\\\"}');",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "3f32697c-a196-45cc-88bf-c124863c92af"
									}
								}
							],
							"id": "9882579a-4b64-4749-858d-09301b5d8702",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/rest/public/cust/dictionary/currencyConversion"
							},
							"response": []
						}
					],
					"id": "72ec464d-85bc-4bdd-a5f4-2e4f3a0b00f5"
				},
				{
					"name": "4026. Проверка соответствия типа создаваемого счета и валюты",
					"item": [
						{
							"name": "Описание - Смотри раздел \"Tests\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*",
											"Как запускать.",
											"1. Нажать на меню действий (три точки) у папки \"Авто. Контроль валюты\"",
											"2. Нажать \"Run folder\"",
											"3. Выбрать все кейсы",
											"4. Число иттераций оставить = 1",
											"5. Нажать на кнопку \"Run....\"",
											"",
											"Ожидаемый результат:",
											"38 тестов - PASSED",
											"",
											"Данная коллекция проверяе соответствие символьного значения валюты и ответ, который приходит в ресте, т.е.:",
											"    1. Если валюта доступна, то в результатом запроса будет значение id созданной заявки",
											"    2. Если валюта недоступна, то в запросе придет текст:",
											"        {",
											"        \"errorCode\": \"3011\",",
											"        \"errorText\": \"Введенная валюта не соответствует типу счета\"",
											"        }",
											"",
											"Доступные и недоступные валюты указаны в запросе под названием \"Параметры теста\"",
											"",
											"Также данная коллекция проверяет соответствие значения accountType и currCode.",
											"",
											"    Параметр accountType - это тип открываемого счета:",
											"        1 - Рублевый счет",
											"        4 - Валютный счет",
											"        12 - специальный залоговый счет",
											"",
											"    Т.е. Рублевый и специальный залоговый счет могут принимать только значения RUB,",
											"    а валютный счет значения из списка допустимых валют",
											"",
											"В конце ранее созданные заявки удаляются",
											"",
											"*/"
										],
										"type": "text/javascript",
										"id": "714e25c5-0a45-474d-855a-6c8f59726ff9"
									}
								}
							],
							"id": "070cd9a0-0223-4165-996a-59ada94b122e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/assets/config/version.json"
							},
							"response": []
						},
						{
							"name": "Параметры теста",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Удаляю значения openingCurrencyAccount из окружения - эти значения используются для удаления созданных заявок",
											"pm.environment.unset(\"openingCurrencyAccount\");",
											"",
											"",
											"//Валюты, доступные для отображения",
											"pm.variables.set(\"currencyTrue\", [\"CNY\", \"TRY\", \"KZT\", \"BYN\", \"USD\", \"EUR\", \"AED\", \"HKD\", \"INR\", \"UZS\", \"AMD\", \"GEL\"]);",
											"",
											"//Валюты, недоступные для отображения",
											"pm.variables.set(\"currencyFalse\", [\"GBP\",\"CHF\",\"DKK\", \"ALL\", \"AUD\" ,\"BAM\", \"BGN\", \"HRK\", \"HUF\", \"KWD\", \"MXN\", \"QAR\", \"RON\", \"RSD\", \"SAR\", \"THB\", \"ZAR\", \"JPY\", \"PLN\", \"CZK\", \"AZN\"]);",
											"",
											"//Объединяю доступные и недоступные переменные в один список",
											"pm.globals.set(\"currency\", pm.variables.get(\"currencyTrue\").concat(pm.variables.get(\"currencyFalse\")));",
											""
										],
										"type": "text/javascript",
										"id": "ab0fecbf-8a71-4dbe-a8f0-200263e374f8"
									}
								}
							],
							"id": "9acb9e7b-36e0-4e07-8cd6-705b7eb5a480",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/assets/config/version.json"
							},
							"response": []
						},
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "201a6e6f-01d5-49bb-97ab-87ae44144c74"
									}
								}
							],
							"id": "34c1e219-bb8a-46eb-8fba-9a42174c4bd3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - АО \"ВМЗ\"",
							"id": "200634eb-716f-4eb2-ad7b-4b622f2357db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_vmz}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_vmz}}"
									],
									"query": [
										{
											"key": null,
											"value": "441868",
											"description": "ВМЗ (Тест)",
											"disabled": true
										},
										{
											"key": null,
											"value": "6905198",
											"description": "ВМЗ (ПРЕПРОД)",
											"disabled": true
										},
										{
											"key": "",
											"value": "1121492",
											"description": "ООО \"ДАЙМОНД ЮВЕЛИР ГРУПП\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1121491",
											"description": "ООО \"КОВЕНС\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1035778",
											"description": "ООО \"МОК-производство\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1121527",
											"description": "ООО \"АГРОИНТЕРНЕШНЛ\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1332542",
											"description": "Захарова",
											"disabled": true
										},
										{
											"key": null,
											"value": "747036",
											"description": "ООО \"АВМ СПОРТ-ТУР\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "232828",
											"description": "ООО \"СпецКонтрактСервис\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1177388",
											"description": "ООО \"КАЙРОС\"",
											"disabled": true
										},
										{
											"key": "",
											"value": "1185380",
											"description": "ООО \"СОФОРА\" {1}",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185711",
											"description": "ООО \"ЭЛЕКТРОННЫЕ СИСТЕМЫ\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1177447",
											"description": "ОТА",
											"disabled": true
										},
										{
											"key": null,
											"value": "1182700",
											"description": "ООО \"СК-ПРОФИЛЬ\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185714",
											"description": "ООО \"МПТП - С\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185717",
											"description": "ООО \"БЛКОР\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185720",
											"description": "ООО \"Энергомеханика {1}\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185723",
											"description": "ПРОММАШ ООО {1}",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185728",
											"description": "ООО \"ЭНИТРАНС\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1182694",
											"description": "АО \"ВОСЕМЬ ВЕРШИН\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1182696",
											"description": "ООО \"ОДИССЕЙ\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1182698",
											"description": "ООО \"СТРОЙМИГ КОННЕКТ\"",
											"disabled": true
										},
										{
											"key": null,
											"value": "1185723",
											"description": "ООО \"ПРОММАШ\"",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание валютного счета (Позитивные кейсы)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var i = pm.globals.get(\"i\");",
											"var currency = pm.globals.get(\"currency\");",
											"",
											"// Установка значения \"currCode\" для текущего запроса",
											"pm.variables.set(\"currCode\", currency[i]);"
										],
										"type": "text/javascript",
										"id": "f7e10ac5-e52c-43a1-b508-15f37752858e"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Загоняю ответ в переменную",
											"var jsonData = pm.response.json();",
											"",
											"",
											"// Получение текущих значений глобальных переменных",
											"var i = pm.globals.get(\"i\");",
											"var currency = pm.globals.get(\"currency\");",
											"// Увеличение значения \"i\" на единицу",
											"pm.globals.set(\"i\", i++);",
											"",
											"",
											"// Проверка, достигнут ли конец массива \"currency\"",
											"",
											"//Если да, то значение i устанавлявается = 0, и выполняются следующие запросы в коллекции",
											"if (i >= currency.length + 1) {",
											"    // Сброс значения \"i\" в ноль для повторного цикла",
											"    pm.globals.set(\"i\", 0);",
											"}",
											"",
											"//Если в массиве еще остались валюты, которые не проверены, тогда",
											"else {",
											"    //Проверяю, что у доступных валют (currencyTrue) в респонсе приходит параметр id",
											"    if (pm.variables.get(\"currencyTrue\").includes(pm.variables.get(\"currCode\"))) {",
											"        pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"            pm.expect(jsonData).to.have.property(\"id\");",
											"        });",
											"",
											"        //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"        var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"        var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"        pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"    }",
											"",
											"    //Проверяю, что у недоступных валют (currencyFalse) в респонсе приходит параметр ошибка и текст",
											"    if (pm.variables.get(\"currencyFalse\").includes(pm.variables.get(\"currCode\"))) {",
											"        pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"            pm.expect(jsonData).to.eql({",
											"                \"errorCode\": \"3011\",",
											"                \"errorText\": \"Введенная валюта не соответствует типу счета\"",
											"            });",
											"        });",
											"    }",
											"",
											"",
											"    // Обновление значения \"currCode\" для следующего запроса",
											"    pm.variables.set(\"currCode\", currency[i]);",
											"",
											"    // Обновление значений глобальных переменных",
											"    pm.globals.set(\"i\", i);",
											"    pm.globals.set(\"currency\", currency);",
											"",
											"    //Перезапускаю данный запрос",
											"    postman.setNextRequest(\"Создание валютного счета (Позитивные кейсы)\");",
											"}"
										],
										"type": "text/javascript",
										"id": "47411757-4987-4343-8d0d-eb715fc7eea0"
									}
								}
							],
							"id": "8ff9d8cc-09cf-4ffd-85b1-99c4a3216817",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 4\n}"
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Создание валютного счета (Негативный кейс)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"currCode\", \"RUB\");"
										],
										"type": "text/javascript",
										"id": "228deabd-1489-4b37-8cdd-ec388b6b59f8"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Загоняю ответ в переменную",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"    pm.expect(jsonData).to.eql({",
											"        \"errorCode\": \"3011\",",
											"        \"errorText\": \"Введенная валюта не соответствует типу счета\"",
											"    });",
											"",
											"    //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"    var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"    var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"    pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "abd1f5fd-7515-4b84-a78f-955c22dad001"
									}
								}
							],
							"id": "7981493e-25ae-4223-a3ac-9d5bd1fcd17e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Создание рублевого счета (Позитивный кейс)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"currCode\", \"RUB\");"
										],
										"type": "text/javascript",
										"id": "efb24d3e-1566-40ab-a7fc-a8d4b24acef4"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"",
											"        //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"        var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"        var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"        pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"});"
										],
										"type": "text/javascript",
										"id": "8c4c7064-fab5-4752-bb0e-54c1a4073069"
									}
								}
							],
							"id": "2fb36a0a-db7a-48d0-9d0d-622f92b3ef82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Создание рублевого счета (Негативный кейс)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"currCode\", \"RUB\");"
										],
										"type": "text/javascript",
										"id": "80055c13-793a-481f-a0ee-b4837200fe5f"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Загоняю ответ в переменную",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"    pm.expect(jsonData).to.eql({",
											"        \"errorCode\": \"3011\",",
											"        \"errorText\": \"Выбранный тип счета недоступен\"",
											"    });",
											"",
											"    //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"    var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"    var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"    pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "c01d33c7-4342-47b9-b925-05b9632eb440"
									}
								}
							],
							"id": "79d11908-1d75-4aa0-b40b-476101d510cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 50\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Создание спец. залоговый счет (Позитивный кейс)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"currCode\", \"RUB\");"
										],
										"type": "text/javascript",
										"id": "3b2b3508-edda-4b50-8538-a748ee1bd16b"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"",
											"    //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"    var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"    var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"    pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "72f48db8-0522-4ed3-a327-51390dc09d3e"
									}
								}
							],
							"id": "287f522c-9364-48d1-b10a-510a1a637887",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 12\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Создание спец. залоговый счет (Негативный кейс)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"currCode\", \"USD\");"
										],
										"type": "text/javascript",
										"id": "f8304717-63b4-4123-9f0e-baa8dcefa2d0"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Загоняю ответ в переменную",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"    pm.expect(jsonData).to.eql({",
											"        \"errorCode\": \"3011\",",
											"        \"errorText\": \"Введенная валюта не соответствует типу счета\"",
											"    });",
											"",
											"        //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"        var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"        var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"        pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "ffbb5eb2-83a1-4e61-85b4-1d7fb4b48179"
									}
								}
							],
							"id": "d89fb977-e714-42ea-a4c8-3dcc69c5b16d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 12\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Создание счет с несуществующим accountType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"currCode\", \"RUB\");"
										],
										"type": "text/javascript",
										"id": "483d4daa-c552-481f-9afe-43bde3f15426"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Загоняю ответ в переменную",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(pm.variables.get(\"currCode\") + ' - Все хорошо', () => {",
											"    pm.expect(jsonData).to.eql({",
											"        \"errorCode\": \"3011\",",
											"        \"errorText\": \"Выбранный тип счета недоступен\"",
											"    });",
											"",
											"    //Добавляю id созданных заявок в переменную окружения openingCurrencyAccount",
											"    var currentValue = pm.environment.get(\"openingCurrencyAccount\");",
											"    var updatedOpeningCurrencyAccount = currentValue + \",\" + jsonData.id;",
											"    pm.environment.set(\"openingCurrencyAccount\", updatedOpeningCurrencyAccount);",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "ff7abfa5-eb95-48df-8058-09e3431ef69d"
									}
								}
							],
							"id": "a012dece-0810-4e7a-8a4f-5f9071f68489",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"intFullName\": \"Joint-Stock Company MegaMade\",\n    \"selectedCurrCode\": \"{{currCode}}\",\n    \"otherCurrCode\": null,\n    \"currCode\": \"{{currCode}}\",\n    \"docNumber\": \"2\",\n    \"docDate\": \"2023-04-20\",\n    \"accountType\": 50\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/bank_account_agreement/create"
							},
							"response": []
						},
						{
							"name": "Удаление ранее созданных заявок",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "a64e2f0b-57b3-43d3-89cc-b128c23d8e7b"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var openingCurrencyAccount = []",
											"var openingCurrencyAccount = pm.environment.get(\"openingCurrencyAccount\").split(',')",
											"var arrayLength = openingCurrencyAccount.length;",
											"",
											"for (var i = 0; i < arrayLength; i++) {",
											"    var currentValue = openingCurrencyAccount[i];",
											"",
											"    //Печатаю id для удаления заявки",
											"    console.log(currentValue)",
											"",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"host\") + \"/rest/stateful/corp/delete/document/\" + currentValue,",
											"        method: \"DELETE\",",
											"    }",
											"    );",
											"",
											"    // Обновите значение переменной окружения для следующей итерации",
											"    // Например, увеличьте значение на 1",
											"    var nextValue = parseInt(currentValue) + 1;",
											"    pm.environment.set(\"openingCurrencyAccount\", nextValue.toString());",
											"}",
											""
										],
										"type": "text/javascript",
										"id": "25008922-5cbc-4355-a179-4ce21fa71844"
									}
								}
							],
							"id": "098ed654-d262-499f-8428-ea148c4e247c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/assets/config/version.json"
							},
							"response": []
						}
					],
					"id": "84637e24-733c-4a22-a02d-06e3eca8f7f7"
				},
				{
					"name": "5860. Проверка настроек. Разрешенный сервис включен",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "201a6e6f-01d5-49bb-97ab-87ae44144c74"
									}
								}
							],
							"id": "c7bd28d3-6215-4147-85fe-0bf84644abeb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - ООО \"Радиатор\"",
							"id": "deeb6b90-6044-4cb4-bbad-27146b96a0eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}"
							},
							"response": []
						},
						{
							"name": "Проверка настроек",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1d78a91-7533-407f-bddf-f04b46cace10",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Разрешенный сервис SIGNER_INFORMATION\", function () {",
											"    pm.expect(response).to.have.property(\"SIGNER_INFORMATION\", 1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8ec2d37d-6a6d-4371-abff-297abd6c0ce7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/system/property?resource=SERVICES/COMMON",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"system",
										"property"
									],
									"query": [
										{
											"key": "resource",
											"value": "SERVICES/COMMON"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "abc0305b-2006-4d05-9667-5713e453526a"
				},
				{
					"name": "5861. Проверка настроек. Разрешенный сервис выключен",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "201a6e6f-01d5-49bb-97ab-87ae44144c74",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5b82dfc7-63db-4fe5-8405-2d47454d782c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента - ООО \"ЛАТЕКС\"",
							"id": "58770793-8b3a-4917-a725-628b0cf1d402",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/company/change_active/7980135"
							},
							"response": []
						},
						{
							"name": "Проверка настроек",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1d78a91-7533-407f-bddf-f04b46cace10",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Разрешенный сервис SIGNER_INFORMATION\", function () {",
											"    pm.expect(response).to.have.property(\"SIGNER_INFORMATION\", 0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1f19d56f-a813-4c4b-974d-6cbbbece9539",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/system/property?resource=SERVICES/COMMON",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"system",
										"property"
									],
									"query": [
										{
											"key": "resource",
											"value": "SERVICES/COMMON"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "f5859a7d-ffff-4f6e-8317-3d62621a6aa5"
				}
			],
			"id": "e549a53b-c2a7-4a2e-86a6-65f0cba0b4e7"
		},
		{
			"name": "Рублевый платеж с СВО",
			"item": [
				{
					"name": "4260. Создание платежки в статусе \"Исполненно\"",
					"item": [
						{
							"name": "0. Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f80f614-db36-4afd-9f27-d9b49ba2f1c3",
										"exec": [
											"// const response = pm.response.json();",
											"",
											"",
											"// console.log(response)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cfd67d1a-7554-439b-8352-2b9ace540b86",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "1. Смена клиента на ООО \"Радиатор\"",
							"id": "30acba94-20c1-47a7-ad8e-f6a92c548ccc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}rest/stateful/corp/company/change_active/{{id_radiator}}",
									"host": [
										"{{host}}rest"
									],
									"path": [
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_radiator}}"
									],
									"query": [
										{
											"key": "2037480",
											"value": "Тест",
											"disabled": true
										},
										{
											"key": "7970250",
											"value": "Препрод",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Prefill",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caf64f11-0970-400b-bf7b-20b6b1dc5cf6",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberRub\",response.docNumber);",
											"//Счет/карта списания",
											"pm.environment.set(\"accId\",response.accId);",
											"",
											"console.log('docNumberRub= ',pm.environment.get(\"docNumberRub\"))",
											"console.log('accId= ',pm.environment.get(\"accId\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "312901a3-9fe8-4e22-94fc-27cd0a9ce5f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
							},
							"response": []
						},
						{
							"name": "3. Создание рублевой платежки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "657b0dd6-1deb-4ec9-a4c3-d670d241d9bd",
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"console.log(pm.variables.get(\"dataToday\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f8e6283-4b8a-4f29-a560-2587acf05b9c",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"idRub\",response.id);",
											"console.log(`id созданного документа idRub=${pm.environment.get(\"idRub\")}`)",
											"",
											"",
											"pm.test(\"Проверка поля errorCode\", function() {",
											"  pm.expect(response).to.have.property(\"docModule\", \"ibankul\");",
											"});",
											"",
											"pm.test(\"Проверка поля errorText\", function() {",
											"  pm.expect(response).to.have.property(\"docType\", \"doc_platpor_bp\");",
											"});",
											"",
											"pm.test(\"Проверка поля errorCode\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"\");",
											"});",
											"",
											"// pm.test(\"Проверка поля errorText\", function() {",
											"//   pm.expect(response).to.have.property(\"infoText\", \"\");",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5ad9584d-428f-4e2d-b99c-38581e97efc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Регресс. Запросы из Postman (Рудник Д.А). Платежку в статус \\\"Исполнено\\\" - {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111810400010009964\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}}, \n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": {{docNumberRub}}, //Это поле сумма. Сделал так, чтобы каждая платежка отличалась по сумме, поэтому тут номер документа используется))))\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} Автотест Рублевый платеж с СВО - ИСПОЛНЕННЫЕ\", //Этот текст нужен для автоматического перевода платежки в статус \"Ожидание исполнения СВО\"\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataToday}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"230400112440000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						},
						{
							"name": "4. Получение номера СВО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberSVO\",response.docNumber);",
											"console.log('docNumberSVO= ',pm.environment.get(\"docNumberSVO\"))"
										],
										"type": "text/javascript",
										"id": "d9b824e0-ae41-428a-8753-92ea2f7de95b"
									}
								}
							],
							"id": "c04f4d07-e565-4338-bc30-b4a84ff672fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/document/number/next?doc_module=ibankul_curr&doc_type=inq_curr_181",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"document",
										"number",
										"next"
									],
									"query": [
										{
											"key": "doc_module",
											"value": "ibankul_curr"
										},
										{
											"key": "doc_type",
											"value": "inq_curr_181"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Создание документа СВО",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff27aa00-8521-49c2-a61e-f5afc5365383",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(`Поле \"complexType\" приходит правильно`, function() {",
											"  pm.expect(response).to.have.property(\"complexType\", \"РП без П\");",
											"});",
											"",
											"pm.environment.set(\"docPlatporCurrId\",response.deal.docPlatporCurrId);",
											"pm.environment.set(\"idSVO\",response.id);",
											"",
											"console.log('docPlatporCurrId= ',pm.environment.get(\"docPlatporCurrId\"))",
											"console.log('idSVO= ',pm.environment.get(\"idSVO\"))",
											"",
											"//Таймер ожидания",
											"setTimeout(function () {",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a138bc54-20dd-4c9a-93cb-822700706f87",
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday+1\", moment().subtract(-1, 'day').format(\"YYYY-MM-DD\"))",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"",
											"console.log('Сегодняшняя дата:', pm.variables.get(\"dataToday\"))",
											"console.log('Завтрашняя дата:', pm.variables.get(\"dataToday+1\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6877830e-c07f-405e-bda2-626b19b417bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accId\": {{accId}},\n    \"deal\": [\n        {\n            \"id\": null,\n            \"docPlatporCurrId\": {{idRub}},\n            \"numberLine\": \"1\",\n            \"payDirection\": \"2\",\n            \"dealMode\": \"1\",\n            \"operCode\": \"23110\",\n            \"remark\": \"пока\",\n            \"docNumber\": {{docNumberRub}},\n            \"amount\": {{docNumberRub}}, \n            \"payCurrCode\": \"810\",\n            \"transDate\": \"{{dataToday}}\",\n            \"operDate\": \"{{dataToday}}\",\n            \"dateRefundPrepayment\": \"{{dataToday+1}}\",\n            \"expectDate\": \"{{dataToday+1}}\",\n            \"noteOperation\": \"Поле \\\"Характер операции\\\"\",\n            \"psNumber\": \"230400112440000011\",\n            \"docModule\": \"ibankul_curr\",\n            \"docType\": \"deal_181\",\n            \"psAmountCurr\": null,\n            \"psCurrCode\": null,\n            \"psNumberExtBnk\": null,\n            \"amountDeal\": null,\n            \"amountCurrencyDeal\": null,\n            \"contrNumber\": null,\n            \"contrDate\": null\n        }\n    ],\n    \"employee\": \"Фиона Дефолтова\",\n    \"phone\": \"+79999999999\",\n    \"docDate\": \"{{dataToday}}\",\n    \"docNumber\": {{docNumberSVO}},\n    \"complexType\": \"РП без П\",\n    \"payControlPsNumberCaption\": \"230400112440000011\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/curr/inquiry_181/metinv"
							},
							"response": []
						},
						{
							"name": "6. sign_requirements/doc?ids",
							"id": "0ae4c238-6233-4d16-9c12-c78e0ebad157",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/sign_requirements/doc?ids={{idRub}},{{idSVO}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"sign_requirements",
										"doc"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{idRub}},{{idSVO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. v2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb695c18-37dc-4bee-a3a0-daac0fd023ff",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d341f1d-7fab-4747-bf2b-73dee9c7351a",
										"exec": [
											"//Задержка при подписании документа. Сделана специально, чтобы документ СВО успел создаться и были подписаны сразу оба документа Рублевый платеж и СВО!",
											"setTimeout(function () {",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b0cec00b-feb4-44c1-8663-267a5a886b13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"certId\": \"723307\",\n    \"docModule\": \"ibankul_curr\",\n    \"docType\": \"doc_platpor_bp\",\n    \"docIds\": [\n        {{docPlatporCurrId}},\n        {{idSVO}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document/sign/v2"
							},
							"response": []
						},
						{
							"name": "8. Второй рест v2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65c4c15d-a817-41e1-95f4-9d9b63c7c9d9",
										"exec": [
											"//Задержка при подписании документа. Сделана специально, чтобы документ СВО успел создаться и были подписаны сразу оба документа Рублевый платеж и СВО!",
											"setTimeout(function () {",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e2256a24-40bd-46d3-8abb-369824be4d3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"certId\": \"723307\",\n    \"libId\": 90342,\n    \"inputCode\": \"00\",\n    \"docModule\": \"ibankul_curr\",\n    \"docType\": \"doc_platpor_bp\",\n    \"docIds\": [\n        {{docPlatporCurrId}},\n        {{idSVO}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document/sign/v2"
							},
							"response": []
						},
						{
							"name": "9. Отправка рублевого платежа в банк",
							"id": "8f2371ae-e8e8-4f46-a56a-d7427e67cb84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/document/send?doc_module=ibankul&doc_type=doc_platpor_bp&doc_ids={{docPlatporCurrId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"document",
										"send"
									],
									"query": [
										{
											"key": "doc_module",
											"value": "ibankul"
										},
										{
											"key": "doc_type",
											"value": "doc_platpor_bp"
										},
										{
											"key": "doc_ids",
											"value": "{{docPlatporCurrId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Отправка СВО в банк",
							"id": "39a4c28a-0649-4604-ad84-6f34f367dce0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/document/send?doc_module=ibankul_curr&doc_type=inq_curr_181&doc_ids={{idSVO}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"document",
										"send"
									],
									"query": [
										{
											"key": "doc_module",
											"value": "ibankul_curr"
										},
										{
											"key": "doc_type",
											"value": "inq_curr_181"
										},
										{
											"key": "doc_ids",
											"value": "{{idSVO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Удаление переменных из окружения",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9196ebfd-c2ad-41e4-b897-4961ea6980c3",
										"exec": [
											"postman.clearEnvironmentVariable(\"idRub\")",
											"postman.clearEnvironmentVariable(\"docNumberSVO\")",
											"postman.clearEnvironmentVariable(\"docPlatporCurrId\")",
											"postman.clearEnvironmentVariable(\"idSVO\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5aa5b24a-dea9-407f-89b3-6179376af079",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}"
							},
							"response": []
						}
					],
					"id": "9995de02-68df-43e4-a524-f0899810a689"
				},
				{
					"name": "4279. Создание платежки в статусе \"Отказан\"",
					"item": [
						{
							"name": "0. Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f80f614-db36-4afd-9f27-d9b49ba2f1c3",
										"exec": [
											"// const response = pm.response.json();",
											"",
											"",
											"// console.log(response)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ca8ab288-e67b-4bd8-a1bf-f473a01a8741",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "1. Смена клиента на ООО \"Радиатор\"",
							"id": "9efd1c20-c4ed-4800-b9f0-3f1432470afe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}rest/stateful/corp/company/change_active/{{id_radiator}}",
									"host": [
										"{{host}}rest"
									],
									"path": [
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_radiator}}"
									],
									"query": [
										{
											"key": "2037480",
											"value": "Тест",
											"disabled": true
										},
										{
											"key": "7970250",
											"value": "Препрод",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Prefill",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caf64f11-0970-400b-bf7b-20b6b1dc5cf6",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberRub\",response.docNumber);",
											"//Счет/карта списания",
											"pm.environment.set(\"accId\",response.accId);",
											"",
											"console.log('docNumberRub= ',pm.environment.get(\"docNumberRub\"))",
											"console.log('accId= ',pm.environment.get(\"accId\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f84e7336-4175-46ed-8d12-2470b1a0d37a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
							},
							"response": []
						},
						{
							"name": "3. Создание рублевой платежки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "657b0dd6-1deb-4ec9-a4c3-d670d241d9bd",
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"console.log(pm.variables.get(\"dataToday\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f8e6283-4b8a-4f29-a560-2587acf05b9c",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"idRub\",response.id);",
											"console.log(`id созданного документа idRub=${pm.environment.get(\"idRub\")}`)",
											"",
											"",
											"pm.test(\"Проверка поля errorCode\", function() {",
											"  pm.expect(response).to.have.property(\"docModule\", \"ibankul\");",
											"});",
											"",
											"pm.test(\"Проверка поля errorText\", function() {",
											"  pm.expect(response).to.have.property(\"docType\", \"doc_platpor_bp\");",
											"});",
											"",
											"pm.test(\"Проверка поля errorCode\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"\");",
											"});",
											"",
											"// pm.test(\"Проверка поля errorText\", function() {",
											"//   pm.expect(response).to.have.property(\"infoText\", \"\");",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0c4a3668-907a-471d-be2b-b4e04874c676",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Регресс. Запросы из Postman (Рудник Д.А). Платежку в статус \\\"Отказан\\\"- {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111810400010009964\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}}, \n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": {{docNumberRub}}, //Это поле сумма. Сделал так, чтобы каждая платежка отличалась по сумме, поэтому тут номер документа используется))))\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} Автотест Рублевый платеж с СВО - ОТКАЗАННЫЕ\", //Этот текст нужен для автоматического перевода платежки в статус \"Отказ\"\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataToday}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"230400112440000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						},
						{
							"name": "4. Получение номера СВО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberSVO\",response.docNumber);",
											"console.log('docNumberSVO= ',pm.environment.get(\"docNumberSVO\"))"
										],
										"type": "text/javascript",
										"id": "d9b824e0-ae41-428a-8753-92ea2f7de95b"
									}
								}
							],
							"id": "23df2832-2350-484b-bf7c-0bb26d24ea54",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/document/number/next?doc_module=ibankul_curr&doc_type=inq_curr_181",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"document",
										"number",
										"next"
									],
									"query": [
										{
											"key": "doc_module",
											"value": "ibankul_curr"
										},
										{
											"key": "doc_type",
											"value": "inq_curr_181"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Создание документа СВО",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff27aa00-8521-49c2-a61e-f5afc5365383",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(`Поле \"complexType\" приходит правильно`, function() {",
											"  pm.expect(response).to.have.property(\"complexType\", \"РП без П\");",
											"});",
											"",
											"pm.environment.set(\"docPlatporCurrId\",response.deal.docPlatporCurrId);",
											"pm.environment.set(\"idSVO\",response.id);",
											"",
											"console.log('docPlatporCurrId= ',pm.environment.get(\"docPlatporCurrId\"))",
											"console.log('idSVO= ',pm.environment.get(\"idSVO\"))",
											"",
											"//Таймер ожидания",
											"setTimeout(function () {",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a138bc54-20dd-4c9a-93cb-822700706f87",
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday+1\", moment().subtract(-1, 'day').format(\"YYYY-MM-DD\"))",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"",
											"console.log('Сегодняшняя дата:', pm.variables.get(\"dataToday\"))",
											"console.log('Завтрашняя дата:', pm.variables.get(\"dataToday+1\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "35197401-e47d-49bc-8306-425306eb217a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accId\": {{accId}},\n    \"deal\": [\n        {\n            \"id\": null,\n            \"docPlatporCurrId\": {{idRub}},\n            \"numberLine\": \"1\",\n            \"payDirection\": \"2\",\n            \"dealMode\": \"1\",\n            \"operCode\": \"23110\",\n            \"remark\": \"пока\",\n            \"docNumber\": {{docNumberRub}},\n            \"amount\": {{docNumberRub}}, \n            \"payCurrCode\": \"810\",\n            \"transDate\": \"{{dataToday}}\",\n            \"operDate\": \"{{dataToday}}\",\n            \"dateRefundPrepayment\": \"{{dataToday+1}}\",\n            \"expectDate\": \"{{dataToday+1}}\",\n            \"noteOperation\": \"Поле \\\"Характер операции\\\"\",\n            \"psNumber\": \"230400112440000011\",\n            \"docModule\": \"ibankul_curr\",\n            \"docType\": \"deal_181\",\n            \"psAmountCurr\": null,\n            \"psCurrCode\": null,\n            \"psNumberExtBnk\": null,\n            \"amountDeal\": null,\n            \"amountCurrencyDeal\": null,\n            \"contrNumber\": null,\n            \"contrDate\": null\n        }\n    ],\n    \"employee\": \"Фиона Дефолтова\",\n    \"phone\": \"+79999999999\",\n    \"docDate\": \"{{dataToday}}\",\n    \"docNumber\": {{docNumberSVO}},\n    \"complexType\": \"РП без П\",\n    \"payControlPsNumberCaption\": \"230400112440000011\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/curr/inquiry_181/metinv"
							},
							"response": []
						},
						{
							"name": "6. sign_requirements/doc?ids",
							"id": "b5aa1b5c-8bdd-443d-8a9d-303d85358395",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/sign_requirements/doc?ids={{idRub}},{{idSVO}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"sign_requirements",
										"doc"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{idRub}},{{idSVO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. v2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb695c18-37dc-4bee-a3a0-daac0fd023ff",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d341f1d-7fab-4747-bf2b-73dee9c7351a",
										"exec": [
											"//Задержка при подписании документа. Сделана специально, чтобы документ СВО успел создаться и были подписаны сразу оба документа Рублевый платеж и СВО!",
											"setTimeout(function () {",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8cf594ad-a5a6-4ce5-8d09-18ec333fe38d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"certId\": \"723307\",\n    \"docModule\": \"ibankul_curr\",\n    \"docType\": \"doc_platpor_bp\",\n    \"docIds\": [\n        {{docPlatporCurrId}},\n        {{idSVO}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document/sign/v2"
							},
							"response": []
						},
						{
							"name": "8. Второй рест v2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65c4c15d-a817-41e1-95f4-9d9b63c7c9d9",
										"exec": [
											"//Задержка при подписании документа. Сделана специально, чтобы документ СВО успел создаться и были подписаны сразу оба документа Рублевый платеж и СВО!",
											"setTimeout(function () {",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e3cd9ddf-ba6b-4ce5-8096-a7dd4b209ad6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"certId\": \"723307\",\n    \"libId\": 90342,\n    \"inputCode\": \"00\",\n    \"docModule\": \"ibankul_curr\",\n    \"docType\": \"doc_platpor_bp\",\n    \"docIds\": [\n        {{docPlatporCurrId}},\n        {{idSVO}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document/sign/v2"
							},
							"response": []
						},
						{
							"name": "9. Отправка рублевого платежа в банк",
							"id": "adc48a06-07e5-4280-93ee-9464ccfa19a7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/document/send?doc_module=ibankul&doc_type=doc_platpor_bp&doc_ids={{docPlatporCurrId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"document",
										"send"
									],
									"query": [
										{
											"key": "doc_module",
											"value": "ibankul"
										},
										{
											"key": "doc_type",
											"value": "doc_platpor_bp"
										},
										{
											"key": "doc_ids",
											"value": "{{docPlatporCurrId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Отправка СВО в банк",
							"id": "b1f863f7-91a1-463a-88fe-4b1de9f881df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/document/send?doc_module=ibankul_curr&doc_type=inq_curr_181&doc_ids={{idSVO}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"document",
										"send"
									],
									"query": [
										{
											"key": "doc_module",
											"value": "ibankul_curr"
										},
										{
											"key": "doc_type",
											"value": "inq_curr_181"
										},
										{
											"key": "doc_ids",
											"value": "{{idSVO}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Удаление переменных из окружения",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9196ebfd-c2ad-41e4-b897-4961ea6980c3",
										"exec": [
											"postman.clearEnvironmentVariable(\"idRub\")",
											"postman.clearEnvironmentVariable(\"docNumberSVO\")",
											"postman.clearEnvironmentVariable(\"docPlatporCurrId\")",
											"postman.clearEnvironmentVariable(\"idSVO\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f7c0f651-0701-476f-8c5d-bafd2a10ba3d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}"
							},
							"response": []
						}
					],
					"id": "3ede8d76-7963-4df3-a218-d474443064cb"
				},
				{
					"name": "4353. Дата платежа ±10 дней",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "360ca1cb-d18d-4ab6-8a31-aa390ad835b5"
									}
								}
							],
							"id": "bd08b258-66e4-49fb-9ae0-ebf8bbfbbac2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента на ООО \"Радиатор\"",
							"id": "0716062c-7e6f-418a-ba72-da4a368f6d12",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_radiator}}"
									],
									"query": [
										{
											"key": "2037480",
											"value": "Тест",
											"disabled": true
										},
										{
											"key": "7970250",
											"value": "Препрод",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prefill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberRub\",response.docNumber);",
											"pm.environment.set(\"accId\",response.accId);",
											"",
											"console.log(pm.environment.get(\"docNumberRub\"))"
										],
										"type": "text/javascript",
										"id": "3c526385-3988-4821-bccd-6a4da8378344"
									}
								}
							],
							"id": "fcd1fe00-0157-4953-834f-4f6e381601a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
							},
							"response": []
						},
						{
							"name": "Дата платежки -11 дней от текущей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"pm.variables.set(\"dataRequest\", moment().subtract(11, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"// //Смена компании на ОО \"Радиатор\"",
											"// pm.sendRequest({",
											"//     url: 'https://test-ul.metib.online/rest/stateful/corp/company/change_active/2037480',",
											"//     method: 'PUT',",
											"// })",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"dataErrorStart\", moment().subtract(10, 'day').format(\"DD.MM.YYYY\"))",
											"pm.variables.set(\"dataErrorEnd\", moment().add(10, 'day').format(\"DD.MM.YYYY\"))",
											"",
											"",
											"console.log('Сегодняшняя дата ', pm.variables.get(\"dataToday\"))",
											"console.log('Дата запроса ', pm.variables.get(\"dataRequest\"))"
										],
										"type": "text/javascript",
										"id": "c04387f4-83a6-4f6a-a4a4-6776cd04747f"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const moment = require('moment');",
											"",
											"pm.test(\"Дата документа меньше текущей на 11 дней\", function () {",
											"    pm.expect(response).to.have.property(\"errorText\", `Дата документа \"${(moment().subtract(11, 'day').format(\"DD.MM.YYYY\"))}\" не принадлежит периоду с \"${pm.variables.get(\"dataErrorStart\")}\" по \"${pm.variables.get(\"dataErrorEnd\")}\"!`)",
											"});"
										],
										"type": "text/javascript",
										"id": "52bf5bbe-eb3a-43a1-ba07-5c7803fac04d"
									}
								}
							],
							"id": "858eaadc-e496-4f3e-a89a-777d3d84f025",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Запросы из Postman (Рудник Д.А) - {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111810400010009964\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}},\n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": \"500\",\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} поле \\\"Назначение платежа\\\"\",\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataRequest}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"160500021405000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						},
						{
							"name": "Дата платежки +11 дней от текущей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"pm.variables.set(\"dataRequest\", moment().subtract(11, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"// //Смена компании на ОО \"Радиатор\"",
											"// pm.sendRequest({",
											"//     url: 'https://test-ul.metib.online/rest/stateful/corp/company/change_active/2037480',",
											"//     method: 'PUT',",
											"// })",
											"",
											"//Дата для проверки текста ошибки",
											"pm.variables.set(\"dataErrorStart\", moment().subtract(10, 'day').format(\"DD.MM.YYYY\"))",
											"pm.variables.set(\"dataErrorEnd\", moment().add(10, 'day').format(\"DD.MM.YYYY\"))",
											"",
											"",
											"console.log('Сегодняшняя дата ', pm.variables.get(\"dataToday\"))",
											"console.log('Дата запроса ', pm.variables.get(\"dataRequest\"))"
										],
										"type": "text/javascript",
										"id": "c04387f4-83a6-4f6a-a4a4-6776cd04747f"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const moment = require('moment');",
											"",
											"pm.test(\"Дата документа меньше текущей на 11 дней\", function () {",
											"    pm.expect(response).to.have.property(\"errorText\", `Дата документа \"${(moment().subtract(11, 'day').format(\"DD.MM.YYYY\"))}\" не принадлежит периоду с \"${pm.variables.get(\"dataErrorStart\")}\" по \"${pm.variables.get(\"dataErrorEnd\")}\"!`)",
											"});"
										],
										"type": "text/javascript",
										"id": "52bf5bbe-eb3a-43a1-ba07-5c7803fac04d"
									}
								}
							],
							"id": "0aa66cde-9210-4166-934a-6e49ad579fc3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Запросы из Postman (Рудник Д.А) - {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111810400010009964\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}},\n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": \"500\",\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} поле \\\"Назначение платежа\\\"\",\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataRequest}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"160500021405000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						}
					],
					"id": "b8b29d50-5de3-48dc-a788-a0e7eeaae87b"
				},
				{
					"name": "4372. Валидация поля corrAccNumber",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "ae545ac9-17de-470b-8d96-ad0c68cbca6e"
									}
								}
							],
							"id": "b064f213-9a6e-42ba-b502-6e81d78822f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента на ООО \"Радиатор\"",
							"id": "b8cfa374-a78f-4a01-bb82-d1ee7344553c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_radiator}}"
									],
									"query": [
										{
											"key": "2037480",
											"value": "Тест",
											"disabled": true
										},
										{
											"key": "7970250",
											"value": "Препрод",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prefill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberRub\",response.docNumber);",
											"pm.environment.set(\"accId\",response.accId);",
											"",
											"console.log(pm.environment.get(\"docNumberRub\"))"
										],
										"type": "text/javascript",
										"id": "9fdcff23-76e4-455e-9fbd-9ed8e90fca29"
									}
								}
							],
							"id": "b0cb574c-9fc5-47fa-865b-287a9f140c68",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
							},
							"response": []
						},
						{
							"name": "Поле corrAccNumber некорректное",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"console.log(pm.variables.get(\"dataToday\"))"
										],
										"type": "text/javascript",
										"id": "b2f1c7e1-856f-4a9f-abad-84d11b11f3ed"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(\"Проверка поля errorCode\", function () {",
											"    pm.expect(response).to.have.property(\"errorCode\", 3019);",
											"});",
											"",
											"pm.test(\"Проверка поля errorText\", function () {",
											"    pm.expect(response).to.have.property(\"errorText\", \"Некорректное значение \\\"30111\\\" банковского счета в поле \\\"Номер счета контрагента\\\"\");",
											"});"
										],
										"type": "text/javascript",
										"id": "3ff3fe88-5f5e-4be2-8f95-1bec43e4a08f"
									}
								}
							],
							"id": "84b6c91d-8570-449d-8cb3-7282fb98d001",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Запросы из Postman (Рудник Д.А) - {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}},\n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": \"500\",\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} поле \\\"Назначение платежа\\\"\",\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataToday}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"160500021405000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						},
						{
							"name": "Поле corrAccNumber пустое",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"console.log(pm.variables.get(\"dataToday\"))"
										],
										"type": "text/javascript",
										"id": "c648d9c2-5685-44a0-87c2-16e8beb356f1"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(\"Проверка поля errorCode\", function() {",
											"  pm.expect(response).to.have.property(\"errorCode\", \"3011\");",
											"});",
											"",
											"pm.test(\"Проверка поля errorText\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Не указан счет получателя, что допустимо в случае, если получатель - кредитная организация или в платежном поручении на общую сумму с реестром. Документ не был сохранен. Для сохранения документа нажмите кнопку подтвердить сохранение документа\");",
											"});"
										],
										"type": "text/javascript",
										"id": "1431a4e8-ff51-4159-82cd-1e747d014f5e"
									}
								}
							],
							"id": "fdaf9210-822f-4e30-ab91-3060bf84b28c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Запросы из Postman (Рудник Д.А) - {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}},\n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": \"500\",\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} поле \\\"Назначение платежа\\\"\",\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataToday}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"160500021405000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						}
					],
					"id": "5937e4ab-be62-4fb8-994f-0696308f75b8"
				},
				{
					"name": "4507. Проверка конто поля \"Счет получателя\"",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "adbb17d5-2f59-4fc9-96c7-c33c811fa017"
									}
								}
							],
							"id": "55bdf33e-aaaf-4cd8-8de9-a1f22ff9110e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Смена клиента на ООО \"Радиатор\"",
							"id": "3f505d44-4b93-4c64-aa38-9ae9c520ea3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_radiator}}"
									],
									"query": [
										{
											"key": "2037480",
											"value": "Тест",
											"disabled": true
										},
										{
											"key": "7970250",
											"value": "Препрод",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Prefill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"docNumberRub\",response.docNumber);",
											"pm.environment.set(\"accId\",response.accId);",
											"",
											"console.log(pm.environment.get(\"docNumberRub\"))"
										],
										"type": "text/javascript",
										"id": "f38c9fb5-2290-4f3f-b6a9-266a3a308f36"
									}
								}
							],
							"id": "dbb6df34-610f-4e7b-b16f-517dd697789b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
							},
							"response": []
						},
						{
							"name": "Создание платежки",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"//Дата для использования в теле запроса - действует только для данного запроса",
											"pm.variables.set(\"dataToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
											"",
											"console.log(pm.variables.get(\"dataToday\"))"
										],
										"type": "text/javascript",
										"id": "82422805-e1f9-46a2-8b25-30cf0d1006d0"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(\"Проверка поля errorCode\", function() {",
											"  pm.expect(response).to.have.property(\"errorCode\", \"3011\");",
											"});",
											"",
											"pm.test(\"Проверка поля errorText\", function() {",
											"  pm.expect(response).to.have.property(\"errorText\", \"Недопустимое конто счёта получателя.\");",
											"});"
										],
										"type": "text/javascript",
										"id": "bde3ef85-cd44-4298-8a02-8154b03da0e9"
									}
								}
							],
							"id": "f9abdb27-f0f3-419b-a33c-bd91449e4d43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corrFullname\": \"Запросы из Postman (Рудник Д.А) - {{dataToday}}\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770201001\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30115810600010009964\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": {{accId}}, \n    \"fullname\": \"Общество с ограниченной ответственностью \\\"Радиатор\\\" //РФ,143405,Московская обл,,Красногорск г,,Ильинское ш,1А,,,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": \"505\",\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO23110} поле \\\\\\\"Назначение платежа\\\\\\\"\",\n    \"employeeFio\": \"Фиона Дефолтова\",\n    \"employeePhone\": \"+79999999999\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumberRub}},\n    \"docDate\": \"{{dataToday}}\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"160500021405000011\",\n    \"currCode\": \"840\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						}
					],
					"id": "70145b3c-c408-4bbf-bbb4-2b0628af15e1"
				},
				{
					"name": "6598. Доп. фильтр допустимых счетов",
					"item": [
						{
							"name": "0. Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f80f614-db36-4afd-9f27-d9b49ba2f1c3",
										"exec": [
											"// const response = pm.response.json();",
											"",
											"",
											"// console.log(response)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b00b56a2-4248-4f9a-b0e3-369551709507",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{login}}",
										"password": "{{password}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "1. Смена клиента на ООО \"Радиатор\"",
							"id": "d52e832e-4d45-4dc7-883f-5bbb86f6e0bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}rest/stateful/corp/company/change_active/{{id_radiator}}",
									"host": [
										"{{host}}rest"
									],
									"path": [
										"stateful",
										"corp",
										"company",
										"change_active",
										"{{id_radiator}}"
									],
									"query": [
										{
											"key": "2037480",
											"value": "Тест",
											"disabled": true
										},
										{
											"key": "7970250",
											"value": "Препрод",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Metinv - запрос настроек",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a29f6e3b-e6e9-4722-b1e1-93f9a39f84c9",
										"exec": [
											"const response = pm.response.json();",
											"",
											"//Список рефиксов недопустимых счетов",
											"let searchName = \"ACCOUNT/ACCOUNT_FILTER_EXPRESSION\"",
											"let searchValue = \"STATUS!='close' \\nAND ((ACC_SUBTYPE='1002' AND NOT '2002' in [ibankfl/dic/acc;ACC_SUBTYPE;ACC_SUBTYPE='2002'])\\n OR (ACC_SUBTYPE='2002' )) \"",
											"",
											"let element = response.docSettings.findIndex(x => x.name === searchName);",
											"",
											"pm.test(`Проверка \"${searchName}\" - настроеки доп. фильтров допустимых счетов`, function () {",
											"    pm.expect(response.docSettings[element]).to.have.property(\"value\", searchValue);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "10554f7e-e9ab-4470-acaa-13df4b59a766",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
							},
							"response": []
						}
					],
					"id": "45a7b03c-5673-43e1-af91-353f47c14808"
				}
			],
			"id": "3b4f93ba-93fa-46f9-8a1d-3647015f35f8"
		},
		{
			"name": "Типы счетов",
			"item": [
				{
					"name": "4436. Проверка начитки счетов в ДБО",
					"item": [
						{
							"name": "Переначитываю счета в ДБО",
							"item": [
								{
									"name": "Авторизация - qa_drudnik_regression",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a3d57bd6-328f-4586-9fb4-e936f05e608c"
											}
										}
									],
									"id": "7d2f9938-cd85-42ac-a760-110364ab9a9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "qa_drudnik_regression",
												"password": "12345678"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Получаю список id компаний",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var json = pm.response.json();",
													"var arr = []",
													"for (var i = 0; i < json.length; i++) {",
													"    arr[i] = Number(json[i].id);",
													"}",
													"pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
													"",
													"///////////",
													"var body = JSON.parse(responseBody);",
													"if (body === null) {",
													"    console.log(\"Конторы закончились\")",
													"    postman.setNextRequest('Проверка начитки счетов в ДБО');",
													"}",
													"",
													"else {",
													"",
													"    //Забираю ответ в переменную",
													"    var json = pm.response.json();",
													"",
													"    if (json.id != null) {",
													"        var arr = []",
													"        var arr = json.id //Объявляю переменную как значение из параметра id",
													"        pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
													"        console.log(\"Список id компаний \", arr)",
													"        postman.setNextRequest(\"Переключаю компанию\")",
													"    }",
													"",
													"    // Иначе выполняется следующее - возвращается массив",
													"    else {",
													"        var arr = []; //Объявляю переменную как массив",
													"        for (var i = 0; i < json.length; i++) {",
													"            arr[i] = Number(json[i].id);",
													"        }",
													"",
													"        console.log(\"Список id компаний \", arr)",
													"        pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
													"        postman.setNextRequest(\"Переключаю компанию\")",
													"    }",
													"    // arr = arr.filter(n => n)",
													"}",
													""
												],
												"type": "text/javascript",
												"id": "0830c91f-d2f8-4938-8594-c9834b4557b2"
											}
										}
									],
									"id": "b0012910-1ccb-4631-89e3-b0094e962c7a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/metinv/company"
									},
									"response": []
								},
								{
									"name": "Переключаю компанию",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"// var arr = [1, 2, 3, 4]; ",
													"// var theRemovedElement = arr.shift(); // theRemovedElement == 1",
													"// console.log(arr); // [2, 3, 4]",
													"",
													"pm.globals.set(\"company_id\", null);",
													"var arr = []",
													"var arr = pm.globals.get(\"array\");",
													"// console.log('Массив arr', arr)",
													"",
													"if (arr.length > 1) {",
													"    // for (var i=0; i<arr.length; i++){",
													"    // console.log('Длинна массива больше одного элемента')",
													"    pm.globals.set(\"company_id\", arr[0]);",
													"    // console.log('Значение из пререквеста', pm.globals.get(\"company_id\"));",
													"",
													"",
													"    // postman.setNextRequest('Удаление контрагентов 12 (Парсинг списка контрагентов)",
													"",
													"    // pm.globals.set(\"company_id\", arr[i]);",
													"    // postman.setNextRequest('Удаление контрагентов 2)')",
													"    // }",
													"}",
													"",
													"else if (arr.length == 1) {",
													"    pm.globals.set(\"company_id\", arr);",
													"    // console.log('Длинна массива = 1 элементу')",
													"    pm.globals.set(\"company_id\", arr);",
													"    // console.log(pm.globals.get(\"company_id\"));",
													"",
													"    console.log('Это последнее значение');",
													"    postman.setNextRequest(null)",
													"}",
													""
												],
												"type": "text/javascript",
												"id": "a2d063fd-bbc0-4308-876b-e762fb1cb028"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Создаю новую переменную и помещаю в нее массив с id контрагентов",
													"var new_array = pm.globals.get(\"array\");",
													"console.log('новый массив', new_array)",
													"",
													"//Если переменная new_array является массивом и длинна массива больше нуля",
													"if (Array.isArray(new_array) && new_array.length > 1) {",
													"",
													"    //Удаляю первое значение из массива",
													"    var theRemovedElement = new_array.shift(); // theRemovedElement == 1",
													"",
													"    //Перезаписываю массив с id контрагентов без первого значения",
													"    pm.globals.set(\"array\", new_array);",
													"",
													"    //Печаю получивщийся массив с id компаний",
													"    console.log('Получивщийся массив во вкладке тест', pm.globals.get(\"array\"));",
													"",
													"    postman.setNextRequest('Получаю рест продукт')",
													"}",
													"",
													"//Иначе, если переменная new_array не является массивом ",
													"else {",
													"",
													"    // //Удаляю первое значение из массива",
													"    // var theRemovedElement = new_array.shift(); // theRemovedElement == 1",
													"",
													"    // //Перезаписываю массив с id контрагентов без первого значения",
													"    // pm.globals.set(\"array\", new_array);",
													"",
													"    //Печаю получивщийся массив с id контрагентов",
													"    //console.log('Это было последнее значение');",
													"    postman.setNextRequest('Авторизация - qa_accounts_type')",
													"",
													"    // postman.setNextRequest('Удаление контрагента 2')",
													"}"
												],
												"type": "text/javascript",
												"id": "7fd85533-8129-4d46-80d9-d41106ca32b2"
											}
										}
									],
									"id": "af8b4fb0-ca52-4956-9828-5dc588c54d1c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{company_id}}"
									},
									"response": []
								},
								{
									"name": "Получаю рест продукт",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('Дергаю рест product')",
													"postman.setNextRequest('Переключаю компанию')"
												],
												"type": "text/javascript",
												"id": "cb32ebc4-297f-46ca-a36f-50a213993d12"
											}
										}
									],
									"id": "c18c4362-b3ee-4c50-a66e-dba6f3f78a03",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/product?sync=true&with_blocked=true&with_stays=tru",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"product"
											],
											"query": [
												{
													"key": "sync",
													"value": "true"
												},
												{
													"key": "with_blocked",
													"value": "true"
												},
												{
													"key": "with_stays",
													"value": "tru"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "192f7152-9ff3-4a65-b8c7-bc03762445aa"
						},
						{
							"name": "Проверяю начитку счетов",
							"item": [
								{
									"name": "Авторизация - qa_accounts_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "839cfa72-78fd-4fd7-b442-2f9f44f4c51d"
											}
										}
									],
									"id": "bf0e91df-763d-448b-acde-f73f93626222",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "qa_accounts_type",
												"password": "12345678"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Проверка начитки счетов в ДБО",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fee98c82-3608-492a-a91d-55ee4af320c5",
												"exec": [
													"/* Пояснение:",
													"undefined - эти парамерты не должны приходить в ресте",
													"\"array\": \"accounts\" - это название массива, в котором должны приходить параметры. В соответствующих блоках счета должны отображаться в сайдбаре в ДБО",
													"",
													"Тест проверяет соответствие тестовых данных и данных из реста product.",
													"Проверяются следующие ключи:",
													"\"type\" - тип счета",
													"\"subtype\" - подтип счета",
													"\"array\" - массив, в котором приходит счет accounts/credits/deposits/cards",
													"\"visible\" - отображение счета в сайдбаре",
													"\"number\" - номер счета",
													"\"status\" - статус счета",
													"\"info\"",
													"\"typeCaption\"",
													"\"actual\" - дата начитки счета (проверяю только дату, без времени)",
													"",
													"-----------",
													"ВАЖНО!!!",
													"-----------",
													"Если в ответе приходит ошибка: There was an error in evaluating the test script:  TypeError: Cannot read properties of undefined (reading 'type')",
													"",
													"значит нужно поправить тестовые данные!!!",
													"*/",
													"",
													"//ТЕСТОВЫЕ ДАННЫЕ",
													"let Type = [",
													"    {",
													"        \"type\": \"1\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810314000000912\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Расчетный счет **0912\",",
													"        \"typeCaption\": \"Расчетный счет\"",
													"    },",
													"    {",
													"        \"type\": \"1\",",
													"        \"subtype\": \"102\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810800000000001\",",
													"        \"status\": \"close\",",
													"        \"info\": \"Расчетный счет **0001\",",
													"        \"typeCaption\": \"Расчетный счет\"",
													"    },",
													"    {",
													"        \"type\": \"2\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"deposits\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"42102810000000013374\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Депозитный счет **3374\",",
													"        \"typeCaption\": \"Депозитный счет\"",
													"    },",
													"    //Добавить счит 2-88, сейчас таких счетов в ДБО нет",
													"    // {",
													"    //     \"type\": \"2\",",
													"    //     \"subtype\": \"88\",",
													"    //     \"array\": \"deposits\",",
													"    //     \"visible\": \"true\",",
													"    //     \"number\": \"42004810000000000223\",",
													"    //     \"status\": \"new\",",
													"    //     \"info\": \"Депозитный счет Д.У. Комбинированным ЗПИФ \\\"Восход\\\"\",",
													"    //     \"typeCaption\": \"Депозитный счет\"",
													"    // },",
													"    {",
													"        \"type\": \"3\",",
													"        \"subtype\": \"7\",",
													"        \"array\": \"cards\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810715000000003\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Карточный счет **0003\",",
													"        \"typeCaption\": \"Карта (дебетовая)\"",
													"    },",
													"    {",
													"        \"type\": \"4\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702156414000060778\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Валютный счет **0778\",",
													"        \"typeCaption\": \"Расчетный валютный счет\"",
													"    },",
													"    //Данные счета (4-102) не должны начитываться в ДБО",
													"    // {",
													"    //     \"type\": \"4\",",
													"    //     \"subtype\": \"102\",",
													"    //     \"array\": \"accounts\",",
													"    //     \"visible\": \"true\",",
													"    //     \"number\": \"40702840614000060486\",",
													"    //     \"status\": \"close\",",
													"    //     \"info\": \"Валютный счет **0486\",",
													"    //     \"typeCaption\": \"Расчетный валютный счет\"",
													"    // },",
													"    {",
													"        \"type\": \"4\",",
													"        \"subtype\": \"116\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702156814000060802\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Валютный счет **0802\",",
													"        \"typeCaption\": \"Расчетный валютный счет\"",
													"    },",
													"    {",
													"        \"type\": \"6\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702156214000061252\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Транзитный счет **1252\",",
													"        \"typeCaption\": \"Транзитный валютный счет\"",
													"    },",
													"    {",
													"        \"type\": \"6\",",
													"        \"subtype\": \"88\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40701840914000061869\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Транзитный счет Д.У. Комбинированным закрытым паевым инвестиционным фондом \\\"Капитал-21 век\\\"\",",
													"        \"typeCaption\": \"Транзитный валютный счет\"",
													"    },",
													"    //Данные счета (4-102) не должны начитываться в ДБО",
													"    // {",
													"    //     \"type\": \"6\",",
													"    //     \"subtype\": \"102\",",
													"    //     \"array\": \"accounts\",",
													"    //     \"visible\": \"true\",",
													"    //     \"number\": \"40702978300990061438\",",
													"    //     \"status\": \"close\",",
													"    //     \"info\": \"Транзитный счет **1438\",",
													"    //     \"typeCaption\": \"Транзитный валютный счет\"",
													"    // },",
													"    {",
													"        \"type\": \"6\",",
													"        \"subtype\": \"116\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702840614000061252\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Транзитный счет **1252\",",
													"        \"typeCaption\": \"Транзитный валютный счет\"",
													"    },",
													"    {",
													"        \"type\": \"7\",",
													"        \"subtype\": \"7\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810400000003852\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Карточный счет **3852\",",
													"        \"typeCaption\": \"Счет корпоративной карты\"",
													"    },",
													"    {",
													"        \"type\": \"7\",",
													"        \"subtype\": \"102\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810615000000080\",",
													"        \"status\": \"close\",",
													"        \"info\": \"Карточный счет **0080\",",
													"        \"typeCaption\": \"Счет корпоративной карты\"",
													"    },",
													"    {",
													"        \"type\": \"8\",",
													"        \"subtype\": \"88\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40701810014000000035\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет Д.У.Комбинированным Закрытым паевым инвестиционным фондом \\\"Капитал-21 век\\\"\",",
													"        \"typeCaption\": \"Счет доверительного управления\"",
													"    },",
													"    {",
													"        \"type\": \"9\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810614000003813\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет должника **3813\",",
													"        \"typeCaption\": \"Специальный счет должника\"",
													"    },",
													"    {",
													"        \"type\": \"10\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40827810414000000001\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет типа \\\"С\\\" **0001\",",
													"        \"typeCaption\": \"Счет типа \\\"С\\\"\"",
													"    },",
													"    {",
													"        \"type\": \"11\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40603810100000000005\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет эскроу **0005\",",
													"        \"typeCaption\": \"Счет эскроу\"",
													"    },",
													"    {",
													"        \"type\": \"12\",",
													"        \"subtype\": \"12\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810114000003368\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Залоговый счет **3368\",",
													"        \"typeCaption\": \"Залоговый счет\"",
													"    },",
													"    {",
													"        \"type\": \"12\",",
													"        \"subtype\": \"120\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40701810814000000086\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Залоговый счет **0086\",",
													"        \"typeCaption\": \"Залоговый счет\"",
													"    },",
													"    {",
													"        \"type\": \"12\",",
													"        \"subtype\": \"117\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810714000003852\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Залоговый счет **3852\",",
													"        \"typeCaption\": \"Залоговый счет\"",
													"    },",
													"    {",
													"        \"type\": \"13\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810014000003837\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет ТП Финанс **3837\",",
													"        \"typeCaption\": \"Расчетный счет\"",
													"    },",
													"    {",
													"        \"type\": \"14\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"credits\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"45207810600000019696\",",
													"        \"status\": \"new\",",
													"        \"info\": undefined,",
													"        \"typeCaption\": \"Ссудный счет\"",
													"    },",
													"    {",
													"        \"type\": \"15\",",
													"        \"subtype\": \"115\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"47422810000000002510\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Транзитный для з/п СБП\",",
													"        \"typeCaption\": \"Транзитный для з/п СБП\"",
													"    },",
													"    {",
													"        \"type\": \"16\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"45812810100000000558\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Просрочка по кредитам\",",
													"        \"typeCaption\": \"Просрочка по кредитам\"",
													"    },",
													"    {",
													"        \"type\": \"17\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"45812810714001000558\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Задолженность по РКО\",",
													"        \"typeCaption\": \"Задолженность по РКО\"",
													"    },",
													"    {",
													"        \"type\": \"18\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"40901810500000008273\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет аккредитива\",",
													"        \"typeCaption\": \"Счет аккредитива\"",
													"    },",
													"    //Добавить проверку для счета 19 подтип 0",
													"    //  {",
													"    //     \"type\": \"19\",",
													"    //     \"subtype\": \"0\",",
													"    //     \"array\": \"accounts\",",
													"    //     \"visible\": \"true\",",
													"    //     \"number\": \"40821810311000000003\",",
													"    //     \"status\": \"new\",",
													"    //     \"info\": \"Счет платежного агента **0003\",",
													"    //     \"typeCaption\": \"Специальный счет платежного агента/субагента\"",
													"    // },",
													"    {",
													"        \"type\": \"19\",",
													"        \"subtype\": \"116\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40821810311000000003\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет платежного агента **0003\",",
													"        \"typeCaption\": \"Специальный счет платежного агента/субагента\"",
													"    },",
													"    {",
													"        \"type\": \"20\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40821810711000000001\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Счет поставщика **0001\",",
													"        \"typeCaption\": \"Специальный счет поставщика\"",
													"    },",
													"    {",
													"        \"type\": \"21\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"47423810700000004435\",",
													"        \"status\": \"new\",",
													"        \"info\": \" Требования, приобретённые, Артэкс ООО, 30090/9-2023 от 27.09.2023\",",
													"        \"typeCaption\": \"Счета для учета агентского факторинга\"",
													"    },",
													"    {",
													"        \"type\": \"22\",",
													"        \"subtype\": \"0\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"false\",",
													"        \"number\": \"47423156700000047114\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Комиссия, Бел Лайт Групп ООО, 47114/10-2021 от 06.10.2021\",",
													"        \"typeCaption\": \"Счета для учета комиссии по Агентскому факторингу\"",
													"    },",
													"    {",
													"        \"type\": \"70\",",
													"        \"subtype\": \"1000\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702156100000011894\",",
													"        \"status\": \"new\",",
													"        \"info\": \"40702156100000011894\",",
													"        \"typeCaption\": \"Валютный счет БП\"",
													"    },",
													"    {",
													"        \"type\": \"71\",",
													"        \"subtype\": \"1001\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702156400002311894\",",
													"        \"status\": \"new\",",
													"        \"info\": \"40702156400002311894 транзитный\",",
													"        \"typeCaption\": \"Транзитный счет БП\"",
													"    },",
													"    {",
													"        \"type\": \"72\",",
													"        \"subtype\": \"1002\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810200000011894\",",
													"        \"status\": \"new\",",
													"        \"info\": \"40702810200000011894\",",
													"        \"typeCaption\": \"Расчетный счет БП\"",
													"    },",
													"    {",
													"        \"type\": \"72\",",
													"        \"subtype\": \"2002\",",
													"        \"array\": \"accounts\",",
													"        \"visible\": \"true\",",
													"        \"number\": \"40702810555000000001\",",
													"        \"status\": \"new\",",
													"        \"info\": \"Расчетный счет **0001\",",
													"        \"typeCaption\": \"Расчетный счет БП\"",
													"    },",
													"]",
													"",
													"",
													"",
													"",
													"// Загоняю ответ в переменную",
													"let jsonData = pm.response.json();",
													"",
													"",
													"for (let i = 0; i < Type.length; i++) {",
													"",
													"    console.log(`${i + 1}` + ' ПРОГОН (i= ' + i + '). _______________________________________________')",
													"",
													"    //Это сделано для того, чтобы если один из тестов падал, то остальные все равно выполнялись",
													"    pm.test(`Тип ${Type[i].type} и подтип ${Type[i].subtype} - Тест запустился!`, function () {",
													"",
													"        //ИЩУ НАЗВАНИЕ МАССИВА",
													"        //Ищу параметр array по номеру счета в тестовых данных - это нужно, чтобы в ответе (рест product) проверить, что счет приходит в правильном массиве (accounts/credits/deposits/cards)",
													"",
													"        let targetValue = Type[i].number //Номер счета в тестовых данных",
													"        let targetValueType = Type[i].type //Значение subtype в тестовых данных",
													"        let targetValueSubtype = Type[i].subtype //Значение subtype в тестовых данных",
													"        let targetValueArray = Type[i].array //Значение subtype в тестовых данных",
													"        console.log('Номер счета, который я ищу в тестовых данных - ', targetValue)",
													"        console.log('Тип счета, который я ищу в тестовых данных - ', targetValueType)",
													"        console.log('Подтип счета, который я ищу в тестовых данных - ', targetValueSubtype)",
													"        console.log('Название массива, в тестовых данных - ', targetValueArray)",
													"",
													"",
													"        let foundInArray = null; // Переменная для хранения имени массива, в котором найден номер счета (targetValue)",
													"        let isFound = false; // Флаг для отслеживания наличия найденного значения",
													"",
													"        // Проходимся по каждому массиву в ответе",
													"        for (let arrayName in jsonData) {",
													"            let currentArray = jsonData[arrayName];",
													"",
													"            console.log('прогон по массиву ', arrayName)",
													"            console.log('Печатаю массив currentArray ', currentArray)",
													"",
													"            // Проверка, что элемент в ответе (accounts/credits/deposits/cards) ЯВЛЯЕТСЯ МАССИВОМ",
													"            if (Array.isArray(currentArray)) {",
													"                // Ищу название массива в ресте product. Проверяем каждый JSON-объект в текущем массиве",
													"                for (let i = 0; i < currentArray.length; i++) {",
													"                    // console.log('ищем элемент в массиве ', arrayName)",
													"",
													"                    // Проверяем значение параметра",
													"                    if ((currentArray[i].number === targetValue) && (currentArray[i].type === targetValueType) && (currentArray[i].subtype === targetValueSubtype)) {",
													"                        foundInArray = arrayName;",
													"",
													"                        console.log(\"номер массива (accounts/credits/deposits/cards), в котором найден счет NumberArrayContainsType - \", i);",
													"                        pm.variables.set('NumberArrayContainsType', i)",
													"                        isFound = true; // Устанавливаем флаг в true",
													"                        break;",
													"                    }",
													"                }",
													"            }",
													"            else {",
													"                if ((currentArray.number === targetValue) && (currentArray.subtype === targetValueSubtype)) {",
													"                    foundInArray = arrayName;",
													"                    isFound = true; // Устанавливаем флаг в true",
													"                    break;",
													"                }",
													"            }",
													"",
													"            if (isFound) {",
													"                break;",
													"            }",
													"        }",
													"",
													"        // Выводим результат",
													"        if (isFound) {",
													"            console.log(`Значение ${targetValue} найдено в массиве ${foundInArray}.`);",
													"            console.log('Значанение subtype из тестовых данных ', targetValueSubtype)",
													"        } else {",
													"            console.log(`Значение ${targetValue} не найдено в массивах.`);",
													"        }",
													"        //ПОИСК ПО МАССИВУ ЗАКОНЧЕН",
													"",
													"",
													"        //Проверяю рест product.____ (accounds/credits/deposits/card) является ли массивом",
													"        //accounds/credits/deposits/card - являются массивами",
													"        if (Array.isArray(jsonData[foundInArray])) {",
													"            console.log(`${foundInArray} - это массив`);",
													"            console.log(`Значение subtype из jsonData.${[foundInArray]}[${targetValueSubtype}]`, jsonData[foundInArray][targetValueSubtype])",
													"",
													"            //Определяю тип счета (1, 2, 3...70) в ресте product",
													"            let elementType = jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].type",
													"            let elementSubtype = jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].subtype",
													"",
													"            console.log('Номер типа счета из реста product. Переменная elementType =', elementType)",
													"",
													"            //Определяю номер элемента в массиве в ресте product",
													"            let numberInArray = jsonData[foundInArray].findIndex(x => x.type === `${elementType}`);",
													"            console.log('Номер элемента в ресте product - numberInArray=', numberInArray)",
													"",
													"            //Определяю номер элемента в массиве тестовых данных (в самом начале), у которого параметр \"type\" равен переменной elementType",
													"            let numberValueType = i",
													"            console.log('Номер элемента в массиве тестовых данных - numberValueType=', numberValueType)",
													"",
													"",
													"            //ТЕСТЫ",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ` - Массив ${foundInArray} определен верно`, () => {",
													"                pm.expect(foundInArray).to.eql(Type[numberValueType].array);",
													"            })",
													"",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Visible - значение приходит правильное', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].visible).to.eql(Type[numberValueType].visible);",
													"            })",
													"",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Number - значение приходит правильное', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].number).to.eql(Type[numberValueType].number);",
													"            })",
													"",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Subtype - значение приходит правильное', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].subtype).to.eql(Type[numberValueType].subtype);",
													"            })",
													"",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Status - значение приходит правильное', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].status).to.eql(Type[numberValueType].status);",
													"            })",
													"",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Info - значение приходит правильное', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].info).to.eql(Type[numberValueType].info);",
													"            })",
													"",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - TypeCaption - значение приходит правильное', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].typeCaption).to.eql(Type[numberValueType].typeCaption);",
													"            })",
													"",
													"            // pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Параметр \"Actual\" - время синхронизации счета', () => {",
													"            //     pm.expect(jsonData.accounts[pm.variables.get(\"NumberArrayContainsType\")].actual).include(pm.variables.get(\"actualDate\"));",
													"            // })",
													"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Параметр \"Actual\" - время синхронизации счета', () => {",
													"                pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].actual).include(pm.variables.get(\"actualDate\"));",
													"            })",
													"        }",
													"",
													"        //accounds/credits/deposits/card - не являются массивами",
													"        else {",
													"            console.log(`${foundInArray} - это НЕ массив`);",
													"",
													"            //Определяю тип и подтип счета (1, 2, 3...70) в ресте product",
													"            let elementType = jsonData[foundInArray].type",
													"            let elementSubtype = jsonData[foundInArray].subtype",
													"",
													"            //Определяю номер элемента в массиве тестовых данных (в самом начале), у которого параметр \"type\" равен переменной elementType",
													"            let numberValueType = Type.findIndex(x => x.type === `${elementType}`)",
													"",
													"",
													"            //ТЕСТЫ",
													"            {",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ` - Массив ${foundInArray} определен верно`, () => {",
													"                    pm.expect(foundInArray).to.eql(Type[numberValueType].array);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Visible - значение приходит правильное', () => {",
													"                    pm.expect(jsonData[foundInArray].visible).to.eql(Type[numberValueType].visible);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Number - значение приходит правильное', () => {",
													"                    pm.expect(jsonData[foundInArray].number).to.eql(Type[numberValueType].number);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Subtype - значение приходит правильное', () => {",
													"                    pm.expect(jsonData[foundInArray].subtype).to.eql(Type[numberValueType].subtype);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Status - значение приходит правильное', () => {",
													"                    pm.expect(jsonData[foundInArray].status).to.eql(Type[numberValueType].status);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Info - значение приходит правильное', () => {",
													"                    pm.expect(jsonData[foundInArray].info).to.eql(Type[numberValueType].info);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - TypeCaption - значение приходит правильное', () => {",
													"                    pm.expect(jsonData[foundInArray].typeCaption).to.eql(Type[numberValueType].typeCaption);",
													"                })",
													"",
													"                pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Параметр \"Actual\" - время синхронизации счета', () => {",
													"                    pm.expect(jsonData[foundInArray].actual).include(pm.variables.get(\"actualDate\"));",
													"                })",
													"            }",
													"",
													"        }",
													"    })",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60050abd-c063-49c9-9f85-ede297ba8936",
												"exec": [
													"// ПОЛУЧАЮ ТЕКУЩУЮ ДАТУ И ВРЕМЯ",
													"let currentDate = new Date();",
													"",
													"/*",
													"// Установка часового пояса по городу Москва",
													"// +1 - это добавление 1 часа к текущему времени в Сербии",
													"// currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"*/",
													"",
													"currentDate.setUTCHours(currentDate.getUTCHours());",
													"",
													"// Форматируем год",
													"let year = currentDate.getFullYear();",
													"",
													"// Форматируем месяц",
													"let month = (\"0\" + (currentDate.getMonth() + 1)).slice(-2);",
													"",
													"// Форматируем день",
													"let day = (\"0\" + currentDate.getDate()).slice(-2);",
													"",
													"// Форматируем часы",
													"let hours = (\"0\" + currentDate.getHours()).slice(-2);",
													"",
													"// Форматируем минуты",
													"let minutes = (\"0\" + currentDate.getMinutes()).slice(-2);",
													"",
													"// Собираем отформатированную дату и время",
													"let actualDate = `${year}-${month}-${day}`;",
													"// let actualDate = `${year}-${month}-${day}T${hours}:${minutes}`; //Время с использованием часа и минут",
													"",
													"console.log('ТЕКУЩАЯ ДАТА -', actualDate)",
													"",
													"pm.variables.set(\"actualDate\", actualDate);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b0b10a1b-bbfd-4e2c-8989-134e9dd333de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/product?sync=true&with_blocked=true&with_stays=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"product"
											],
											"query": [
												{
													"key": "sync",
													"value": "true"
												},
												{
													"key": "with_blocked",
													"value": "true"
												},
												{
													"key": "with_stays",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "61a688ed-bba1-490e-95ac-5047247f07d3"
						}
					],
					"id": "c85255ac-da16-4a2e-9db9-036b915b38fa",
					"description": "Запустить всю папку через run collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0951dc79-7744-47a5-bf68-8803da53344f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2a8eadb9-e380-4f95-aff0-6a8a4e4c589d"
							}
						}
					]
				}
			],
			"id": "d0549f29-bc28-4972-9cc2-01dbc6f3a232"
		},
		{
			"name": "Перевод остатков",
			"item": [
				{
					"name": "Авторизация",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "333e0c0b-9457-4342-9d00-994ee4a0befb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"//Дата для использования в теле запроса - действует только для данного запроса",
									"pm.environment.set(\"dateToday\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))",
									"",
									"console.log(\"Сегодняшняя дата - \" + pm.variables.get(\"dateToday\"))"
								],
								"type": "text/javascript",
								"id": "1b9de58f-d087-486a-b7dd-1c52749d3a22"
							}
						}
					],
					"id": "b6c7420c-64a1-46e0-a2c0-b4468abeb23b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{login}}",
								"password": "{{password}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": "{{host}}/rest/stateful/corp/login"
					},
					"response": []
				},
				{
					"name": "Смена клиента на ООО \"Радиатор\"",
					"id": "bca1b131-7237-4113-a3fc-8d85044470d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_radiator}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"rest",
								"stateful",
								"corp",
								"company",
								"change_active",
								"{{id_radiator}}"
							],
							"query": [
								{
									"key": "2037480",
									"value": "Тест",
									"disabled": true
								},
								{
									"key": "7970250",
									"value": "Препрод",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4920. Проверка настроек из админки",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "568746d2-48ef-40f4-a6f4-0c610d741134",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Допустимое количество дней до текущей даты",
									"let searchName1 = \"DOC_DATE_BETWEEN/AFTER_DAYS\"",
									"let searchValue1 = \"0\"",
									"// Допустимое количество дней после текущей даты",
									"let searchName2 = \"DOC_DATE_BETWEEN/AFTER_DAYS\"",
									"let searchValue2 = \"0\"",
									"",
									"// СЧЕТ СПИСАНИЯ",
									"// Дополнительный фильтр допустимых счетов",
									"let searchName3 = \"SELF_ACCOUNT/ACCOUNT_FILTER_EXPRESSION\"",
									"let searchValue3 = \"STATUS!='close' AND ((ACC_SUBTYPE='1002' AND NOT '2002' in [ibankfl/dic/acc;ACC_SUBTYPE;ACC_SUBTYPE='2002']) OR (ACC_SUBTYPE='2002' ))\"",
									"// СЧЕТ ЗАЧИСЛЕНИЯ",
									"// Список допустимых конто счета",
									"let searchName4 = \"CORR_ACCOUNT/ACCOUNT_TYPES\"",
									"let searchValue4 = \"405,406,407,40807,40802\"",
									"// Дополнительный фильтр допустимых счетов",
									"let searchName5 = \"CORR_ACCOUNT/ACCOUNT_FILTER_EXPRESSION\"",
									"let searchValue5 = \"ACCOUNT_TYPE='1' AND ACC_SUBTYPE!='116' AND ACC_SUBTYPE!='102' AND STATUS!='close' AND ACCOUNT_TYPE!='13' AND ACCOUNT_TYPE!='7' AND ACC_SUBTYPE!='1002' AND ACC_SUBTYPE!='2002'\"",
									"",
									"//Ищу номер массива, в котором содержится настройка",
									"let element1 = response.docSettings.findIndex(x => x.name === searchName1);",
									"let element2 = response.docSettings.findIndex(x => x.name === searchName2);",
									"let element3 = response.docSettings.findIndex(x => x.name === searchName3);",
									"let element4 = response.docSettings.findIndex(x => x.name === searchName4);",
									"let element5 = response.docSettings.findIndex(x => x.name === searchName5);",
									"",
									"pm.test(\"Допустимое количество дней до текущей даты\", function () {",
									"    pm.expect(response.docSettings[element1]).to.have.property(\"value\", searchValue1);",
									"});",
									"pm.test(\"Допустимое количество дней после текущей даты\", function () {",
									"    pm.expect(response.docSettings[element2]).to.have.property(\"value\", searchValue2);",
									"});",
									"pm.test(\"Счет списания. Дополнительный фильтр допустимых счетов\", function () {",
									"    pm.expect(response.docSettings[element3]).to.have.property(\"value\", searchValue3);",
									"});",
									"pm.test(\"Счет зачисления. Список допустимых конто счета\", function () {",
									"    pm.expect(response.docSettings[element4]).to.have.property(\"value\", searchValue4);",
									"});",
									"pm.test(\"Счет зачисления. Дополнительный фильтр допустимых счетов\", function () {",
									"    pm.expect(response.docSettings[element5]).to.have.property(\"value\", searchValue5);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "af16be03-e414-42f0-ad90-e531ab88e15a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/rest/stateful/corp/document_transfer_rests/create"
					},
					"response": []
				}
			],
			"id": "0e8f863a-bb07-4b29-9d55-7681a91c9fcc"
		},
		{
			"name": "Получение наличных",
			"item": [
				{
					"name": "Получатели///Контроли ФИО",
					"item": [
						{
							"name": "Авторизация",
							"id": "d67266cd-8493-4c79-97f1-dd86c6e6121a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Одно слово",
							"id": "62090c64-fdc4-4c87-9174-2e183e6528a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Ян\",\r\n    \"secondName\": \"Янович\",\r\n    \"lastName\": \"Янов\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						},
						{
							"name": "Два слова",
							"id": "8b32d169-cc25-4dd5-bb49-a36f0932d63b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Ян Ян\",\r\n    \"secondName\": \"Янович Янович\",\r\n    \"lastName\": \"Янов Янов\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						},
						{
							"name": "Через дефис",
							"id": "268eec40-405f-4818-84ab-62627b08e024",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Ян-Ян\",\r\n    \"secondName\": \"Янович-Янович\",\r\n    \"lastName\": \"Янов-Янов\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						},
						{
							"name": "Только дефис в отчестве",
							"id": "6ae5ca9d-8143-4e9a-8782-01c2f4711a04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Ян\",\r\n    \"secondName\": \"-\",\r\n    \"lastName\": \"Янов\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						},
						{
							"name": "Два слова через дефис",
							"id": "4e720c21-241a-4d92-87b2-bd9829ca3d2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Ян-Ян Ян-Ян\",\r\n    \"secondName\": \"Янович-Янович Янович-Янович\",\r\n    \"lastName\": \"Янов-Янов Янов-Янов\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						},
						{
							"name": "Три слова",
							"id": "94ffb5d5-c36b-425b-81fa-6ff514abef52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Ян Ян Ян\",\r\n    \"secondName\": \"Янович Янович Янович\",\r\n    \"lastName\": \"Янов Янов Янов\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						},
						{
							"name": "Пустые поля",
							"id": "299f9f6c-1a2f-44ae-ad4e-5c5fdeee1977",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"\",\r\n    \"secondName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"citizenship\": \"Российское\",\r\n    \"birthDate\": \"2000-11-11\",\r\n    \"position\": \"Получатель\",\r\n    \"phone\": \"\",\r\n    \"phoneForSms\": \"\",\r\n    \"employeeDocs\": [\r\n        {\r\n            \"typeDocument\": \"21\",\r\n            \"docSerial\": \"1111\",\r\n            \"docNumber\": \"111111\",\r\n            \"docOrg\": \"1\",\r\n            \"docOrgCode\": \"111-111\",\r\n            \"dateOfIssue\": \"2014-11-11\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/rest/stateful/corp/other_employee/create"
							},
							"response": []
						}
					],
					"id": "330c25bd-87e5-4b84-82e6-f47a4d0b0ca0"
				},
				{
					"name": "Новая заявка///Контроли",
					"item": [
						{
							"name": "Авторизация",
							"id": "a0b6d532-05b5-4a6e-a546-67d0604f23e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "{{password}}",
										"username": "{{login}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Прямой//ИП//255 символов//дата = сегодня",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ea1115c-cee4-40d0-bff6-6ca78d7d5c75",
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//Дата для использования в теле запроса - действует только для данного запроса\r",
											"pm.variables.set(\"dateBody\", moment().subtract(0, 'day').format(\"YYYY-MM-DD\"))\r",
											"console.log('Сегодняшняя дата', pm.variables.get(\"dateBody\"))\r",
											"\r",
											"\r",
											"//Дата для использования в теле запроса - действует только для данного запроса\r",
											"pm.variables.set(\"dateDocument\", moment().subtract(-1, 'day').format(\"YYYY-MM-DD\"))\r",
											"\r",
											"console.log('Завтрашняя дата', pm.variables.get(\"dateDocument\"))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23fbbfdf-0f63-4cf6-ac4d-22243ea35bc6",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(`Поле \"complexType\" приходит правильно`, function() {\r",
											"  pm.expect(response).to.have.property(\"id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9bf5c7f2-cbb1-494e-8522-d7f24381452a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000201\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40802810200990000023\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"58\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssE\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3476531\",\r\n    \"branchCode\": \"10035703694\",\r\n    \"receiveDate\": \"2024-01-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Прямой//ЮЛ//255 символов//дата = сегодня",
							"id": "95db4a6c-f594-414e-9429-fdd72d071770",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000026\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40702810900990008182\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"40\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEss\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3480506\",\r\n    \"branchCode\": \"10035703694\",\r\n    \"receiveDate\": \"2024-01-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Межфил//ИП//255 символов//дата = +10 раб.дней от текущей",
							"id": "b6b470c7-6d0b-42df-9d7b-11e87fdc4a31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000202\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40802810200990000023\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"58\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEE\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3476531\",\r\n    \"branchCode\": \"10010629672\",\r\n    \"receiveDate\": \"2024-02-02\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Межфил//ЮЛ//255 символов//2 цели//дата = +10 раб.дней от текущей",
							"id": "ada8ee7a-5227-457a-ab32-99b620adef84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000027\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40702810900990008182\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"41\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEE\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3480506\",\r\n    \"branchCode\": \"10010629672\",\r\n    \"receiveDate\": \"2024-02-02\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Прямой//ИП//256 символов",
							"id": "0182ed30-a863-465a-b8cf-89db8d036e33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000201\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40802810200990000023\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"58\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssE1\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3476531\",\r\n    \"branchCode\": \"10035703694\",\r\n    \"receiveDate\": \"2024-01-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Прямой//ЮЛ//256 символов",
							"id": "52b33218-415d-418e-b6fa-a99d278b0327",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000026\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40702810900990008182\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"40\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEss1\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3480506\",\r\n    \"branchCode\": \"10035703694\",\r\n    \"receiveDate\": \"2024-01-19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Межфил//ИП//256 символов",
							"id": "5ff7be44-dba4-4ec8-bc3a-948d22c3f1af",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000202\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40802810200990000023\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"58\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEE1\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3476531\",\r\n    \"branchCode\": \"10010629672\",\r\n    \"receiveDate\": \"2024-01-22\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Межфил//ЮЛ//256 символов",
							"id": "5268f579-7670-4673-99fc-dceab7acad29",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000027\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40702810900990008182\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"41\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEE1\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3480506\",\r\n    \"branchCode\": \"10010629672\",\r\n    \"receiveDate\": \"2024-01-22\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						},
						{
							"name": "Дата = +11 раб.дней от текущей",
							"id": "7c82eab3-8f5a-46b5-aa61-cb856f1a9b38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"draft\": false,\r\n    \"docModule\": \"ibankul\",\r\n    \"docType\": \"request_receive_cash\",\r\n    \"docNumber\": \"ЗН 0000028\",\r\n    \"docDate\": \"2024-01-19\",\r\n    \"accNumber\": \"40702810900990008182\",\r\n    \"totalAmount\": \"100.00\",\r\n    \"currCode\": \"810\",\r\n    \"requiredBanknoteSelection\": \"false\",\r\n    \"sourcesOfIncome\": [\r\n        {\r\n            \"symbol\": \"41\",\r\n            \"sourcesIncome\": \"EEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssEEEssE\",\r\n            \"amount\": \"100.00\"\r\n        }\r\n    ],\r\n    \"receiverEmployeeId\": \"3480506\",\r\n    \"branchCode\": \"10010629672\",\r\n    \"receiveDate\": \"2024-02-05\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://front-dbo-ul-746.apps.do.okd.hq.metib.ru/rest/stateful/corp/receive/cash/create"
							},
							"response": []
						}
					],
					"id": "a88d5757-0306-4c0a-9509-22fa8a7a4a8f"
				}
			],
			"id": "246c8918-8ed6-4e1a-9c7c-ce591bb5e8f8"
		},
		{
			"name": "Новый платеж",
			"item": [
				{
					"name": "Налоговый/Бюджетный",
					"item": [
						{
							"name": "6912. Валидация поля \"Код ОКТМО\"",
							"item": [
								{
									"name": "0. Описание - смотри раздел \"Test\" Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ea7a6c7-2f8b-4c0c-bc7c-1467ddb9f598",
												"exec": [
													"//Проверка задачи 4598"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7ac70e8e-adeb-48b7-99ed-72bd5ce58319",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/assets/config/version.json"
									},
									"response": []
								},
								{
									"name": "1. Авторизация",
									"id": "3dc94c39-7217-47cc-b016-1cb85b32f90e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "2. Смена клиента на АО \"ВМЗ\"",
									"id": "16ea0af5-d133-40fc-b19c-5e77e01982b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_vmz}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"company",
												"change_active",
												"{{id_vmz}}"
											],
											"query": [
												{
													"key": "2037480",
													"value": "Тест",
													"disabled": true
												},
												{
													"key": "7970250",
													"value": "Препрод",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3.0 + Prefill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf64f11-0970-400b-bf7b-20b6b1dc5cf6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.environment.set(\"docNumber\",response.docNumber);",
													"console.log('Номер документа \"docNumber\" = ',pm.environment.get(\"docNumber\"))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f4617528-6bac-47b8-907b-57e1426b7050",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "3.1 + Поле \"Код ОКТМО\" заполнено \"0\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95da7518-ba00-43e0-a9bc-163fba9c6d08",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Проверка поля docModule\", function() {",
													"  pm.expect(response).to.have.property(\"docModule\", \"ibankul\");",
													"});",
													"",
													"pm.test(\"Проверка поля ibankul\", function() {",
													"  pm.expect(response).to.have.property(\"docType\", \"doc_platpor\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c8c7282a-6f6b-47e6-aa41-ed4b9739222f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест 4598\",\n    \"corrInn\": \"7727406020\",\n    \"corrKpp\": \"770801001\",\n    \"corrBankBik\": \"044030001\",\n    \"corrAccNumber\": \"03100810000000000000\",\n    \"uin\": \"0\",\n    \"accId\": {{accID_vmz}},\n    \"fullname\": \"Акционерное общество \\\"Выксунский металлургический завод\\\"\",\n    \"inn\": \"5247004695\",\n    \"kpp\": \"997450001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 4598\",\n    \"loanAgreementNumber\": null,\n    \"stat\": \"01\",\n    \"kbk\": \"79710212000065000160\",\n    \"okato\": \"0\",\n    \"ground\": \"0\",\n    \"tax1\": \"0\",\n    \"taxdocnum\": \"0\",\n    \"taxdocdate\": \"0\",\n    \"corrBankRuAccId\": null,\n    \"payNalogCorr\": false,\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumber}},\n    \"docDate\": \"2024-05-29\",\n    \"corrType\": \"NALOG\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								},
								{
									"name": "4.0 + Prefill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf64f11-0970-400b-bf7b-20b6b1dc5cf6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.environment.set(\"docNumber\",response.docNumber);",
													"console.log('Номер документа \"docNumber\" = ',pm.environment.get(\"docNumber\"))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "29ec4fff-1e79-4446-8b4f-3710079a9a2c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "4.1 + Поле \"Код ОКТМО\" заполнено \"12345678\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95da7518-ba00-43e0-a9bc-163fba9c6d08",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Проверка поля docModule\", function() {",
													"  pm.expect(response).to.have.property(\"docModule\", \"ibankul\");",
													"});",
													"",
													"pm.test(\"Проверка поля ibankul\", function() {",
													"  pm.expect(response).to.have.property(\"docType\", \"doc_platpor\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2ed94438-ffa4-463d-b4f0-741b828c80a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест 4598\",\n    \"corrInn\": \"7727406020\",\n    \"corrKpp\": \"770801001\",\n    \"corrBankBik\": \"044030001\",\n    \"corrAccNumber\": \"03100810000000000000\",\n    \"uin\": \"0\",\n    \"accId\": {{accID_vmz}},\n    \"fullname\": \"Акционерное общество \\\"Выксунский металлургический завод\\\"\",\n    \"inn\": \"5247004695\",\n    \"kpp\": \"997450001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 4598\",\n    \"loanAgreementNumber\": null,\n    \"stat\": \"01\",\n    \"kbk\": \"79710212000065000160\",\n    \"okato\": \"12345678\",\n    \"ground\": \"0\",\n    \"tax1\": \"0\",\n    \"taxdocnum\": \"0\",\n    \"taxdocdate\": \"0\",\n    \"corrBankRuAccId\": null,\n    \"payNalogCorr\": false,\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumber}},\n    \"docDate\": \"2024-05-29\",\n    \"corrType\": \"NALOG\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								},
								{
									"name": "5. - Поле \"Код ОКТМО\" не заполнено",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95da7518-ba00-43e0-a9bc-163fba9c6d08",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Проверка поля errorCode\", function() {",
													"  pm.expect(response).to.have.property(\"errorCode\", \"3011\");",
													"});",
													"",
													"pm.test(\"Проверка поля errorText\", function() {",
													"  pm.expect(response).to.have.property(\"errorText\", \"Поле \\\"ОКТМО\\\" не может быть пустым!\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "61d4f6fc-96ff-4225-b30c-36c47a93a9f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест 4598\",\n    \"corrInn\": \"7727406020\",\n    \"corrKpp\": \"770801001\",\n    \"corrBankBik\": \"044030001\",\n    \"corrAccNumber\": \"03100810000000000000\",\n    \"uin\": \"0\",\n    \"accId\": {{accID_vmz}},\n    \"fullname\": \"Акционерное общество \\\"Выксунский металлургический завод\\\"\",\n    \"inn\": \"5247004695\",\n    \"kpp\": \"997450001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 4598\",\n    \"loanAgreementNumber\": null,\n    \"stat\": \"01\",\n    \"kbk\": \"79710212000065000160\",\n    \"okato\": \"\",\n    \"ground\": \"0\",\n    \"tax1\": \"0\",\n    \"taxdocnum\": \"0\",\n    \"taxdocdate\": \"0\",\n    \"corrBankRuAccId\": null,\n    \"payNalogCorr\": false,\n    \"urgenttype\": \"5\",\n    \"docNumber\": \"2232\",\n    \"docDate\": \"2024-05-29\",\n    \"corrType\": \"NALOG\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								},
								{
									"name": "6. - Поле \"Код ОКТМО\" заполнено не корректно",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1fe0ca1-573d-45ca-a73b-467a4805341b",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Проверка поля errorCode\", function() {",
													"  pm.expect(response).to.have.property(\"errorCode\", \"3011\");",
													"});",
													"",
													"pm.test(\"Проверка поля errorText\", function() {",
													"  pm.expect(response).to.have.property(\"errorText\", \"Поле \\\"ОКТМО\\\" должен состоять из 8 цифр(при этом все цифры не могут одновременно принимать значение 0) или же иметь значение 0!\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "64f2af15-566f-4292-ae94-65ec2d84d5a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест 4598\",\n    \"corrInn\": \"7727406020\",\n    \"corrKpp\": \"770801001\",\n    \"corrBankBik\": \"044030001\",\n    \"corrAccNumber\": \"03100810000000000000\",\n    \"uin\": \"0\",\n    \"accId\": {{accID_vmz}},\n    \"fullname\": \"Акционерное общество \\\"Выксунский металлургический завод\\\"\",\n    \"inn\": \"5247004695\",\n    \"kpp\": \"997450001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 4598\",\n    \"loanAgreementNumber\": null,\n    \"stat\": \"01\",\n    \"kbk\": \"79710212000065000160\",\n    \"okato\": \"123\",\n    \"ground\": \"0\",\n    \"tax1\": \"0\",\n    \"taxdocnum\": \"0\",\n    \"taxdocdate\": \"0\",\n    \"corrBankRuAccId\": null,\n    \"payNalogCorr\": false,\n    \"urgenttype\": \"5\",\n    \"docNumber\": \"2232\",\n    \"docDate\": \"2024-05-29\",\n    \"corrType\": \"NALOG\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								},
								{
									"name": "7. - Поле \"Код ОКТМО\" заполнено нулями",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1fe0ca1-573d-45ca-a73b-467a4805341b",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Проверка поля errorCode\", function() {",
													"  pm.expect(response).to.have.property(\"errorCode\", \"3011\");",
													"});",
													"",
													"pm.test(\"Проверка поля errorText\", function() {",
													"  pm.expect(response).to.have.property(\"errorText\", \"Поле \\\"ОКТМО\\\" должен состоять из 8 цифр(при этом все цифры не могут одновременно принимать значение 0) или же иметь значение 0!\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9ab48d44-91da-432a-80c1-6617c1dd3df8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест 4598\",\n    \"corrInn\": \"7727406020\",\n    \"corrKpp\": \"770801001\",\n    \"corrBankBik\": \"044030001\",\n    \"corrAccNumber\": \"03100810000000000000\",\n    \"uin\": \"0\",\n    \"accId\": {{accID_vmz}},\n    \"fullname\": \"Акционерное общество \\\"Выксунский металлургический завод\\\"\",\n    \"inn\": \"5247004695\",\n    \"kpp\": \"997450001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 4598\",\n    \"loanAgreementNumber\": null,\n    \"stat\": \"01\",\n    \"kbk\": \"79710212000065000160\",\n    \"okato\": \"00000000\",\n    \"ground\": \"0\",\n    \"tax1\": \"0\",\n    \"taxdocnum\": \"0\",\n    \"taxdocdate\": \"0\",\n    \"corrBankRuAccId\": null,\n    \"payNalogCorr\": false,\n    \"urgenttype\": \"5\",\n    \"docNumber\": \"2232\",\n    \"docDate\": \"2024-05-29\",\n    \"corrType\": \"NALOG\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								},
								{
									"name": "8. - Поле \"Статус составителя\" не заполнено",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95da7518-ba00-43e0-a9bc-163fba9c6d08",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Проверка поля errorCode\", function() {",
													"  pm.expect(response).to.have.property(\"errorCode\", \"3011\");",
													"});",
													"",
													"pm.test(\"Проверка поля errorText\", function() {",
													"  pm.expect(response).to.have.property(\"errorText\", \"Налоговые параметры не могут быть заполнены, если статус налогового платежа не заполнен\\nОтсутствует информация о \\\"Статусe налогоплательщика\\\"\\nНалоговые параметры не могут быть заполнены, если статус налогового платежа не заполнен\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5d41fdca-fff6-463c-8e1a-f0878aa2f832",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест 4598\",\n    \"corrInn\": \"7727406020\",\n    \"corrKpp\": \"770801001\",\n    \"corrBankBik\": \"044030001\",\n    \"corrAccNumber\": \"03100810000000000000\",\n    \"uin\": \"0\",\n    \"accId\": {{accID_vmz}},\n    \"fullname\": \"Акционерное общество \\\"Выксунский металлургический завод\\\"\",\n    \"inn\": \"5247004695\",\n    \"kpp\": \"997450001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 4598\",\n    \"loanAgreementNumber\": null,\n    \"stat\": \"\",\n    \"kbk\": \"79710212000065000160\",\n    \"okato\": \"01\",\n    \"ground\": \"0\",\n    \"tax1\": \"0\",\n    \"taxdocnum\": \"0\",\n    \"taxdocdate\": \"0\",\n    \"corrBankRuAccId\": null,\n    \"payNalogCorr\": false,\n    \"urgenttype\": \"5\",\n    \"docNumber\": \"2232\",\n    \"docDate\": \"2024-05-29\",\n    \"corrType\": \"NALOG\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								}
							],
							"id": "30f2624e-759a-43b8-85ed-be3c478836a0"
						}
					],
					"id": "aaa7be13-8144-4cbd-9047-272109129ef7"
				},
				{
					"name": "6940. Проверка контроля заполнения поля \"Плательщик\" при платежах на нерезидента",
					"item": [
						{
							"name": "В fullname приходит полное название компании",
							"item": [
								{
									"name": "Описание",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32241655-cb41-41c6-a0c8-241097b3644c",
												"exec": [
													"/*",
													"Контроль \"Проверка длины значения Плательщик\" установлено = 160 символов",
													"*/"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b7813b00-c706-46fb-9841-41ab88d11b52",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "Авторизация",
									"id": "a6fbffbe-bfb3-471a-9404-42eb8df1d7a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"ГЕНЕРЕНТ\"",
									"id": "5155bd14-821c-428d-92c5-9d7c7f615919",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_generent}}"
									},
									"response": []
								},
								{
									"name": "Новый платеж",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc9edd69-74aa-42ff-9aa5-1a0549ab0603",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"fullname\", \"ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \\\"ГЕНЕРЕНТ\\\" //РФ,141400,Московская обл,,Химки г,,Клязьма кв-л,,,,//\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d35ccfde-1899-4770-9a6f-dc8543bda924",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"corrAccNumber\":\"30111810400000000000\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "Рублевый платеж с СВО",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31a72630-0f15-4576-8382-8150416fa56c",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"fullname\", \"ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \\\"ГЕНЕРЕНТ\\\" //РФ,141400,Московская обл,,Химки г,,Клязьма кв-л,,,,//\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d8c7f879-e7ef-449e-8c13-7613a9e22bf1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"corrAccNumber\":\"30111810400000000002\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
									},
									"response": []
								}
							],
							"id": "3771b75f-bd13-4675-ab19-2fd123c579e5"
						},
						{
							"name": "В fullname короткое название + запятые",
							"item": [
								{
									"name": "Описание",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32241655-cb41-41c6-a0c8-241097b3644c",
												"exec": [
													"/*",
													"Контроль \"Проверка длины значения Плательщик\" установлено = 100 символов",
													"*/"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "024539c1-b76a-4bb3-ae90-d4fc89400fb4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "Авторизация",
									"id": "6b77bfb7-fd19-4bab-b5a4-125a4503eba3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Хай-Тек Медиа\"",
									"id": "e9842e50-aeee-405c-aa50-c445ef53b982",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_hay_tek_media}}"
									},
									"response": []
								},
								{
									"name": "Новый платеж",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc9edd69-74aa-42ff-9aa5-1a0549ab0603",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"fullname\", \"ООО  \\\"Хай-Тек Медиа\\\" //РФ,107023,Москва г,,,,Малая Семёновская ул,9,,3,ПОМ XVI//\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d94eb0cf-4674-4de8-85c3-b3352fb15e85",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"corrAccNumber\":\"30111810400000000000\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "Рублевый платеж с СВО",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7681a6e2-9c13-495b-94b3-46bd0fae3335",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"fullname\", \"ООО  \\\"Хай-Тек Медиа\\\" //РФ,107023,Москва г,,,,Малая Семёновская ул,9,,3,ПОМ XVI//\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "535fb47a-dea5-4b56-97ab-83f973dcd0c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"corrAccNumber\":\"30111810400000000002\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
									},
									"response": []
								}
							],
							"id": "1b5c3202-7791-4bfb-a33d-d6839895d504"
						},
						{
							"name": "В fullname короткое название без запятых",
							"item": [
								{
									"name": "Описание",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32241655-cb41-41c6-a0c8-241097b3644c",
												"exec": [
													"/*",
													"Контроль \"Проверка длины значения Плательщик\" установлено = _____ символов",
													"*/"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "39bfc80d-616d-47c4-b3b3-7a539c6dd5d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "Авторизация",
									"id": "beca6278-302e-422f-b07d-5398b09d2e90",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"ИНТУРМ\"",
									"id": "2631dba5-93dc-439b-bf8f-d2be1c09d5d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{host}}/rest/stateful/corp/company/change_active/{{id_inturm}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"stateful",
												"corp",
												"company",
												"change_active",
												"{{id_inturm}}"
											],
											"query": [
												{
													"key": "2037480",
													"value": "Тест",
													"disabled": true
												},
												{
													"key": "7970250",
													"value": "Препрод",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Новый платеж",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc9edd69-74aa-42ff-9aa5-1a0549ab0603",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"fullname\", \"ООО \\\"ИНТУРМ\\\" //РФ,119602,Москва г,Тропаревская ул.,4,//\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "09f30434-bdf7-4898-9093-f971119b4ec2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"corrAccNumber\":\"30111810400000000000\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "Рублевый платеж с СВО",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c0e68fc-88cd-4049-8f15-afc9f14c07e5",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"fullname\", \"ООО \\\"ИНТУРМ\\\" //РФ,119602,Москва г,Тропаревская ул.,4,//\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "eb49d6eb-0a8e-4858-bb97-194fad88d8de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"corrAccNumber\":\"30111810400000000002\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv/prefill"
									},
									"response": []
								}
							],
							"id": "4bcf811e-c3af-4ef0-9c3d-0a2d78693706"
						},
						{
							"name": "Получаем ошибку",
							"item": [
								{
									"name": "Описание",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32241655-cb41-41c6-a0c8-241097b3644c",
												"exec": [
													"/*",
													"Контроль \"Проверка длины значения Плательщик\" установлено = _____ символов",
													"*/"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ddeb1aca-b610-41f9-bfd6-09523a23a24c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "Авторизация",
									"id": "e89a55ff-6333-44cf-878d-b36b56c525d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Аламед\"",
									"id": "778fb233-fb80-4c56-9530-ad41884ef33a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_alamed}}"
									},
									"response": []
								},
								{
									"name": "Prefill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf64f11-0970-400b-bf7b-20b6b1dc5cf6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.environment.set(\"docNumber\",response.docNumber);",
													"console.log('Номер документа \"docNumber\" = ',pm.environment.get(\"docNumber\"))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "362a0038-ab6c-4467-825f-b1c09ff06c97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "Новый платеж",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc9edd69-74aa-42ff-9aa5-1a0549ab0603",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"errorText\", \"Невозможно создать платеж: длина поля Плательщик превышает 40 символов. Свяжитесь с нами в чате или по телефону 8(800)500-8197. \");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ac383311-26aa-41b8-84a1-0f00973723da",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Тест задачи 12646\",\n    \"corrInn\": \"5249000858\",\n    \"corrKpp\": \"770000000\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111810700000000000\",\n    \"accId\": \"{{accID_alamed}}\",\n    \"fullname\": \"ООО \\\"Радиатор\\\" //РФ,143405,Московская обл,Красногорск г,Ильинское ш,1А, dsd,3,fgh,ЭТ/ПОМ/ОФ 9/9АВ/№18//\",\n    \"inn\": \"7720540387\",\n    \"kpp\": \"502401001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"description\": \"Тест задачи 12646\",\n    \"loanAgreementNumber\": null,\n    \"urgenttype\": \"5\",\n    \"docNumber\": {{docNumber}},\n    \"docDate\": \"2024-05-31\",\n    \"corrType\": \"UL\",\n    \"sendtype\": \"\",\n    \"gisGmpRequested\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/metinv"
									},
									"response": []
								},
								{
									"name": "Prefill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf64f11-0970-400b-bf7b-20b6b1dc5cf6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.environment.set(\"docNumber\",response.docNumber);",
													"console.log('Номер документа \"docNumber\" = ',pm.environment.get(\"docNumber\"))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5091a1be-ad99-41c4-9204-360f25f201d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document/create/prefill"
									},
									"response": []
								},
								{
									"name": "Рублевый платеж с СВО",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cf933c3-c1b6-47c4-a1c1-6641241cb818",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"В поле fullname приходит полное название организации\", function() {",
													"  pm.expect(response).to.have.property(\"errorText\", \"Невозможно создать платеж: длина поля Плательщик превышает 40 символов. Свяжитесь с нами в чате или по телефону 8(800)500-8197. \");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2d91e80b-f863-462d-bc8f-379303cccd11",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"corrFullname\": \"Рублевый с СВО\",\n    \"corrInn\": \"7705148464\",\n    \"corrKpp\": \"770000000\",\n    \"corrBankBik\": \"044525767\",\n    \"corrAccNumber\": \"30111810400010009964\",\n    \"bankName\": \"АО \\\"МОСКОМБАНК\\\"\",\n    \"accId\": 8814900,\n    \"fullname\": \"ООО \\\"Аламед\\\" //РФ,125167,Москва г,Красноармейская ул,2,4,//\",\n    \"inn\": \"7714849385\",\n    \"kpp\": \"771401001\",\n    \"amount\": \"100\",\n    \"ndsTypeId\": \"653\",\n    \"commission\": \"Согласно тарифам банка\",\n    \"description\": \"{VO10800} тест \",\n    \"employeeFio\": \"Defoltova Fiona\",\n    \"employeePhone\": \"+76666666666\",\n    \"urgenttype\": \"5\",\n    \"docNumber\": \"1\",\n    \"docDate\": \"2024-06-06\",\n    \"corrType\": \"UL\",\n    \"payControlPsNumberCaption\": \"\",\n    \"currCode\": \"810\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}/rest/stateful/corp/document_bp/create/metinv"
									},
									"response": []
								}
							],
							"id": "71f1baa8-419f-4213-b2b0-f71f42f52aab"
						}
					],
					"id": "d332963f-bf10-4b6d-b70a-a193f5e6d742"
				}
			],
			"id": "91c36f25-1cad-421b-aa71-fb2a863dcd7e"
		},
		{
			"name": "Блокировки",
			"item": [
				{
					"name": "Проверка процедуры установки блокировок",
					"item": [
						{
							"name": "2RED",
							"item": [
								{
									"name": "Авторизация",
									"id": "3940d084-bd23-478b-bed5-b7799e4e485e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Легна\"",
									"id": "1bbaf06a-cb01-41ca-bfe7-c2b350ff423f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_legna}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка 2RED\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_2RED\");",
													"});",
													"",
													"pm.test(\"Изменение контактов 167ФЗ (Задача Redmine 13318)\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_2RED\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "580a11e3-49da-43a1-ab2c-583dd283e6aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "2f73d6e4-cdbe-45f8-9724-e7884eff3891"
						},
						{
							"name": "OAO1",
							"item": [
								{
									"name": "Авторизация",
									"id": "da6bd980-beba-4b24-b45e-ad1a92924c41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Риомас-2\"",
									"id": "a56296bc-9f7d-417d-a623-8ac955969bbe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_riomas2}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка OAO1\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_OAO1\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e2b27270-20de-487f-b0e5-5311a0d65123",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "fec651ce-882e-4052-8f37-d771b0b80791"
						},
						{
							"name": "OAO2",
							"item": [
								{
									"name": "Авторизация",
									"id": "807bdf15-38b1-4882-a587-ca0b59f09f29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Риомас-3\"",
									"id": "4dedfe0e-7a27-44d4-bc3e-f6788765209b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_riomas3}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка OAO2\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_OAO2\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c56bb44c-2db5-45f1-9171-3a6192ae789f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "0c00e16e-5787-4624-8aa7-d3ccff4c0172"
						},
						{
							"name": "OAO3",
							"item": [
								{
									"name": "Авторизация",
									"id": "36c987d3-d889-4304-8ea6-06772189baf3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ГМП \"Аспект\"",
									"id": "6cff3821-c539-45b3-a812-f57d370fcf6e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_gmp_aspekt}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка OAO3\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_OAO3\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6876ccf4-f3b2-425f-899b-8b638a2606ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "74dec35c-fe93-4a47-b941-5dd544bc4847"
						},
						{
							"name": "OIK",
							"item": [
								{
									"name": "Авторизация",
									"id": "f7c3f8b7-f332-48e3-a0bf-5e5defc633f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Медиса\"",
									"id": "6322d406-74a6-4ad5-8628-d02ea686ff1a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_medisa}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка OIK\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_OIK\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fbe6b42c-ba8f-4721-a537-a5517b2af98c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "72793ac4-d41a-4573-85e1-4548b7fe7a4f"
						},
						{
							"name": "OON",
							"item": [
								{
									"name": "Авторизация",
									"id": "6fb56fe2-c1ed-4ec8-a5e8-c44e5c601e54",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на АО \"ЭССП\"",
									"id": "47f3e1d3-ae5d-45e6-8388-ce21277a3a95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_essp}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка OON\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_OON\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2a17480b-9f54-49c9-99ea-e352295ae452",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "766519ad-958a-4bd9-bdc6-147bedfea22c"
						},
						{
							"name": "MVK",
							"item": [
								{
									"name": "Авторизация",
									"id": "a417ea21-ac8d-4399-b822-40451a262417",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Русский водочный холдинг\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0a91764-3948-4251-abda-549043b0a7bb",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6ea23ec0-a6de-49da-8db7-ed767974c90d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_rus_vodochniy_holding}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка MVK\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_MVK\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3b69c59c-aa05-4258-8640-90e7c8e093dd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "7032478e-9d5a-4d2d-9bfd-1fefd800d8bd"
						},
						{
							"name": "EXTREM",
							"item": [
								{
									"name": "Авторизация",
									"id": "521a8e2a-aa22-4dd3-a9aa-141454e4d3cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Тихоокеанская корпорация\"",
									"id": "ea04841d-06b5-44ae-974e-a932f5be4a2b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_tihookeanskaya_corp}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка EXTREM\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_EXTREM\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "55fda33f-d549-4101-ad44-27131978f9d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "e434f197-e183-48e5-abb3-0e1f82874729"
						},
						{
							"name": "FROM",
							"item": [
								{
									"name": "Авторизация",
									"id": "4244d8ea-1923-4b1d-87e8-b9543f8f2606",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"АВЕ КИДС\"",
									"id": "05f8c2d1-03cf-4f80-8940-9cb377970fe1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_ave_kids}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка FROM\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_FROM\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "866e5542-4bca-4b8f-8b67-1423ebc0c602",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "85157e5c-ab8e-406c-ac71-065949586b14"
						},
						{
							"name": "167FZ",
							"item": [
								{
									"name": "Авторизация",
									"id": "b0f11632-b324-400f-b55b-0e3a36822319",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Линия Красоты-Л\"",
									"id": "6eb13b35-2ec8-47a3-a9f8-9071c53e8e0d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_liniya_krasoti_l}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка 167FZ\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_167FZ\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "4c1dbb93-81de-4d21-9169-96dd0e38f5ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "6b1bfd49-ecb3-4332-87a3-96263256a642"
						},
						{
							"name": "DEAD_IP",
							"item": [
								{
									"name": "Авторизация",
									"id": "1c95d282-52a8-4011-b548-d690c92bd114",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"ЦСК\"",
									"id": "212f610b-7838-44e4-9fa3-6b45d55ea26f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_csk}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка DEAD_IP\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_DEAD_IP\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "65f78a3d-4d28-4cc0-808a-ad972526632c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "ac9e3988-d23f-4058-854d-be99443b06a3"
						},
						{
							"name": "CHANGE_EP",
							"item": [
								{
									"name": "Авторизация",
									"id": "33b10347-2587-4ffb-bdb4-78d474dc7f59",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Илья Муромец\"",
									"id": "80af3088-8133-400a-8940-fb2acdade710",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_ilya_muromec}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка CHANGE_EP\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_CHANGE_EP\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "648814ef-b882-49be-8780-6879fd77e89d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "6ecd9711-b754-490a-a832-5063cbb60e13"
						},
						{
							"name": "PARTIAL_UNBLOCK",
							"item": [
								{
									"name": "Авторизация",
									"id": "689b9031-97af-4387-8abf-8c66a5472c20",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "{{password}}",
												"username": "{{login}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/login"
									},
									"response": []
								},
								{
									"name": "Смена клиента на ООО \"Стратон 2000\"",
									"id": "d6541348-a895-401e-81fc-4bfcfcc4594c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/company/change_active/{{id_stratan_2000}}"
									},
									"response": []
								},
								{
									"name": "Проверка блокировки",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6790577a-ce4c-447d-9d2c-b5e83925f0b6",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Блокировка PARTIAL_UNBLOCK\", function() {",
													"  pm.expect(response.roles).to.include(\"ROLE_BLOCK_PARTIAL_UNBLOCK\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5a9636ba-f5a3-4389-848e-f4804a41407e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{host}}/rest/stateful/corp/security/user/roles"
									},
									"response": []
								}
							],
							"id": "20d33878-ce30-40fc-b092-cb81cde5b922"
						},
						{
							"name": "Описание",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9267067a-8877-4238-a938-6ba3c9b3b729",
										"exec": [
											"//Проверка процедуры, которая каждый день на определенных клиентов устанавливает блокировки. Задача 13266"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2de83136-39f2-498e-a1e3-0c83ae79fdbd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}"
							},
							"response": []
						}
					],
					"id": "4fc06457-bc20-4a3f-9ad5-cb99086a9bd2"
				}
			],
			"id": "d3f0a200-b4ae-4fd3-a6e4-9efc81b849bd"
		},
		{
			"name": "Опросы",
			"item": [
				{
					"name": "Запрос результатов",
					"id": "d54d1239-2ee0-480c-bac8-6fae205bfd57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/rest/stateful/corp/document_action/execute?actionName=download_results&docid=4121017",
							"host": [
								"{{host}}"
							],
							"path": [
								"rest",
								"stateful",
								"corp",
								"document_action",
								"execute"
							],
							"query": [
								{
									"key": "actionName",
									"value": "download_results"
								},
								{
									"key": "docid",
									"value": "4121017"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "042575b1-8399-4ac1-9212-2387876f0683"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8a6eca4d-3b8e-4dba-86b5-493b3d455552",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0c3a441d-8b36-44d6-9bb3-733b6ae2bab9",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}