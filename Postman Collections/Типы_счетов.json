{
	"info": {
		"_postman_id": "78f435e7-c5f0-4073-b81e-a394760df4a4",
		"name": "Типы счетов",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Regression",
			"item": [
				{
					"name": "#4436. Проверка начитки счетов в ДБО",
					"item": [
						{
							"name": "Авторизация",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "b339fe5e-3ee4-4f57-800f-3cafdd48c6af"
									}
								}
							],
							"id": "09dd3720-8dfe-4a90-a704-e8f3ffbbe64a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "12345678",
										"username": "qa_accounts_type"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/login"
							},
							"response": []
						},
						{
							"name": "Получаю список id компаний",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var json = pm.response.json();",
											"var arr = []",
											"for (var i = 0; i < json.length; i++) {",
											"    arr[i] = Number(json[i].id);",
											"}",
											"pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
											"",
											"///////////",
											"var body = JSON.parse(responseBody);",
											"if (body === null) {",
											"    console.log(\"Конторы закончились\")",
											"    postman.setNextRequest('Проверка начитки счетов в ДБО');",
											"}",
											"",
											"else {",
											"",
											"    //Забираю ответ в переменную",
											"    var json = pm.response.json();",
											"",
											"    if (json.id != null) {",
											"        var arr = []",
											"        var arr = json.id //Объявляю переменную как значение из параметра id",
											"        pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
											"        console.log(\"Список id компаний \", arr)",
											"        postman.setNextRequest(\"Переключаю компанию\")",
											"    }",
											"",
											"    // Иначе выполняется следующее - возвращается массив",
											"    else {",
											"        var arr = []; //Объявляю переменную как массив",
											"        for (var i = 0; i < json.length; i++) {",
											"            arr[i] = Number(json[i].id);",
											"        }",
											"",
											"        console.log(\"Список id компаний \", arr)",
											"        pm.globals.set(\"array\", arr); // Записываю в переменную array полученные значения",
											"        postman.setNextRequest(\"Переключаю компанию\")",
											"    }",
											"    // arr = arr.filter(n => n)",
											"}",
											""
										],
										"type": "text/javascript",
										"id": "2db9b5af-149a-411e-a075-563013f1588c"
									}
								}
							],
							"id": "83d0d56f-b460-4884-adf5-33628dab78d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/metinv/company"
							},
							"response": []
						},
						{
							"name": "Переключаю компанию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"// var arr = [1, 2, 3, 4]; ",
											"// var theRemovedElement = arr.shift(); // theRemovedElement == 1",
											"// console.log(arr); // [2, 3, 4]",
											"",
											"pm.globals.set (\"company_id\",null);",
											"var arr = []",
											"var arr = pm.globals.get(\"array\");",
											"// console.log('Массив arr', arr)",
											"",
											"if (arr.length > 1){       ",
											"        // for (var i=0; i<arr.length; i++){",
											"        // console.log('Длинна массива больше одного элемента')",
											"        pm.globals.set(\"company_id\", arr[0]);",
											"        // console.log('Значение из пререквеста', pm.globals.get(\"company_id\"));",
											"",
											"",
											"        // postman.setNextRequest('Удаление контрагентов 12 (Парсинг списка контрагентов)",
											"",
											"        // pm.globals.set(\"company_id\", arr[i]);",
											"        // postman.setNextRequest('Удаление контрагентов 2)')",
											"        // }",
											"}",
											"",
											"else if (arr.length == 1) {",
											"    pm.globals.set (\"company_id\",arr);",
											"    // console.log('Длинна массива = 1 элементу')",
											"    pm.globals.set(\"company_id\", arr);",
											"    // console.log(pm.globals.get(\"company_id\"));",
											"",
											"    console.log('Это последнее значение');",
											"    postman.setNextRequest(null)",
											"}",
											""
										],
										"type": "text/javascript",
										"id": "e76f6c56-095d-40ac-b609-fc0d6f537def"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Создаю новую переменную и помещаю в нее массив с id контрагентов",
											"var new_array = pm.globals.get(\"array\");",
											"console.log('новый массив', new_array)",
											"",
											"//Если переменная new_array является массивом и длинна массива больше нуля",
											"if (Array.isArray(new_array) && new_array.length > 1) {",
											"",
											"    //Удаляю первое значение из массива",
											"    var theRemovedElement = new_array.shift(); // theRemovedElement == 1",
											"",
											"    //Перезаписываю массив с id контрагентов без первого значения",
											"    pm.globals.set(\"array\", new_array);",
											"",
											"    //Печаю получивщийся массив с id компаний",
											"    console.log('Получивщийся массив во вкладке тест', pm.globals.get(\"array\"));",
											"",
											"    postman.setNextRequest('Получаю рест продукт')",
											"}",
											"",
											"//Иначе, если переменная new_array не является массивом ",
											"else {",
											"",
											"    // //Удаляю первое значение из массива",
											"    // var theRemovedElement = new_array.shift(); // theRemovedElement == 1",
											"",
											"    // //Перезаписываю массив с id контрагентов без первого значения",
											"    // pm.globals.set(\"array\", new_array);",
											"",
											"    //Печаю получивщийся массив с id контрагентов",
											"    //console.log('Это было последнее значение');",
											"    postman.setNextRequest('Проверка начитки счетов в ДБО')",
											"",
											"    // postman.setNextRequest('Удаление контрагента 2')",
											"}"
										],
										"type": "text/javascript",
										"id": "3f19318f-163f-41f0-8b1b-3065ea864666"
									}
								}
							],
							"id": "bb585b17-b9a6-47ed-9a66-979000fb48c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{host}}/rest/stateful/corp/company/change_active/{{company_id}}"
							},
							"response": []
						},
						{
							"name": "Получаю рест продукт",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('Дергаю рест product')",
											"postman.setNextRequest('Переключаю компанию')"
										],
										"type": "text/javascript",
										"id": "66820a4a-a068-4f72-9091-c74f3f087a3b"
									}
								}
							],
							"id": "d34f048a-6262-44e7-b860-bf1233d2d8ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/product?sync=true&with_blocked=true&with_stays=tru",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"product"
									],
									"query": [
										{
											"key": "sync",
											"value": "true"
										},
										{
											"key": "with_blocked",
											"value": "true"
										},
										{
											"key": "with_stays",
											"value": "tru"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка начитки счетов в ДБО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* Пояснение:",
											"undefined - эти парамерты не должны приходить в ресте",
											"\"array\": \"accounts\" - это название массива, в котором должны приходить параметры. В соответствующих блоках счета должны отображаться в сайдбаре в ДБО",
											"",
											"Тест проверяет соответствие тестовых данных и данных из реста product.",
											"Проверяются следующие ключи:",
											"\"type\" - тип счета",
											"\"subtype\" - подтип счета",
											"\"array\" - массив, в котором приходит счет accounts/credits/deposits/cards",
											"\"visible\" - отображение счета в сайдбаре",
											"\"number\" - номер счета",
											"\"status\" - статус счета",
											"\"info\"",
											"\"typeCaption\"",
											"\"actual\" - дата начитки счета (проверяю только дату, без времени)",
											"",
											"-----------",
											"ВАЖНО!!!",
											"-----------",
											"Если в ответе приходит ошибка: There was an error in evaluating the test script:  TypeError: Cannot read properties of undefined (reading 'type')",
											"",
											"значит нужно поправить тестовые данные!!!",
											"*/",
											"",
											"//ТЕСТОВЫЕ ДАННЫЕ",
											"let Type = [",
											"    {",
											"        \"type\": \"1\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810900990004267\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Расчетный счет **4267\",",
											"        \"typeCaption\": \"Расчетный счет\"",
											"    },",
											"    {",
											"        \"type\": \"1\",",
											"        \"subtype\": \"102\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810800000000001\",",
											"        \"status\": \"close\",",
											"        \"info\": \"Расчетный счет **0001\",",
											"        \"typeCaption\": \"Расчетный счет\"",
											"    },",
											"    {",
											"        \"type\": \"2\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"deposits\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"42103156800000000004\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Депозитный счет **0004\",",
											"        \"typeCaption\": \"Депозитный счет\"",
											"    },",
											"    {",
											"        \"type\": \"2\",",
											"        \"subtype\": \"88\",",
											"        \"array\": \"deposits\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"42003810400000000125\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Депозитный счет Д.У. Комбинированным ЗПИФ \\\"МЕДИАТОР\\\"\",",
											"        \"typeCaption\": \"Депозитный счет\"",
											"    },",
											"    {",
											"        \"type\": \"3\",",
											"        \"subtype\": \"7\",",
											"        \"array\": \"cards\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810900990090051\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Карточный счет **0051\",",
											"        \"typeCaption\": \"Карта (дебетовая)\"",
											"    },",
											"    {",
											"        \"type\": \"4\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702156200990060814\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Валютный счет **0814\",",
											"        \"typeCaption\": \"Расчетный валютный счет\"",
											"    },",
											"    // Счета с subtype 102 закрываются и не начитываются в ДБО",
											"    // {",
											"    //     \"type\": \"4\",",
											"    //     \"subtype\": \"102\",",
											"    //     \"array\": \"accounts\",",
											"    //     \"visible\": \"true\",",
											"    //     \"number\": \"40702840614000060486\",",
											"    //     \"status\": \"close\",",
											"    //     \"info\": \"Валютный счет **0486\",",
											"    //     \"typeCaption\": \"Расчетный валютный счет\"",
											"    // },",
											"    {",
											"        \"type\": \"4\",",
											"        \"subtype\": \"116\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702156814000060802\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Валютный счет **0802\",",
											"        \"typeCaption\": \"Расчетный валютный счет\"",
											"    },",
											"    {",
											"        \"type\": \"6\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702156214000061252\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Транзитный счет **1252\",",
											"        \"typeCaption\": \"Транзитный валютный счет\"",
											"    },",
											"        {",
											"        \"type\": \"6\",",
											"        \"subtype\": \"88\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40701840914000061869\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Транзитный счет Д.У. Комбинированным закрытым паевым инвестиционным фондом \\\"Капитал-21 век\\\"\",",
											"        \"typeCaption\": \"Транзитный валютный счет\"",
											"    },",
											"    {",
											"        \"type\": \"6\",",
											"        \"subtype\": \"102\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702978300990061438\",",
											"        \"status\": \"close\",",
											"        \"info\": \"Транзитный счет **1438\",",
											"        \"typeCaption\": \"Транзитный валютный счет\"",
											"    },",
											"    {",
											"        \"type\": \"6\",",
											"        \"subtype\": \"116\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702840614000061252\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Транзитный счет **1252\",",
											"        \"typeCaption\": \"Транзитный валютный счет\"",
											"    },",
											"    {",
											"        \"type\": \"7\",",
											"        \"subtype\": \"7\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810400000003852\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Карточный счет **3852\",",
											"        \"typeCaption\": \"Счет корпоративной карты\"",
											"    },",
											"    {",
											"        \"type\": \"7\",",
											"        \"subtype\": \"102\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810615000000080\",",
											"        \"status\": \"close\",",
											"        \"info\": \"Карточный счет **0080\",",
											"        \"typeCaption\": \"Счет корпоративной карты\"",
											"    },",
											"    {",
											"        \"type\": \"8\",",
											"        \"subtype\": \"88\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40701810014000000035\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет Д.У. Комбинированным Закрытым паевым инвестиционным фондом \\\"Капитал-21 век\\\"\",",
											"        \"typeCaption\": \"Счет доверительного управления\"",
											"    },",
											"    {",
											"        \"type\": \"9\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810614000003813\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет должника **3813\",",
											"        \"typeCaption\": \"Специальный счет должника\"",
											"    },",
											"    {",
											"        \"type\": \"10\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40827810414000000001\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет типа \\\"С\\\" **0001\",",
											"        \"typeCaption\": \"Счет типа \\\"С\\\"\"",
											"    },",
											"    {",
											"        \"type\": \"11\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40603810100000000005\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет эскроу **0005\",",
											"        \"typeCaption\": \"Счет эскроу\"",
											"    },",
											"    {",
											"        \"type\": \"12\",",
											"        \"subtype\": \"12\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810114000003368\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Залоговый счет **3368\",",
											"        \"typeCaption\": \"Залоговый счет\"",
											"    },",
											"    {",
											"        \"type\": \"12\",",
											"        \"subtype\": \"120\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810300990006632\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Залоговый счет **6632\",",
											"        \"typeCaption\": \"Залоговый счет\"",
											"    },",
											"    {",
											"        \"type\": \"12\",",
											"        \"subtype\": \"117\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810714000003852\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Залоговый счет **3852\",",
											"        \"typeCaption\": \"Залоговый счет\"",
											"    },",
											"    {",
											"        \"type\": \"13\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810715000000061\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет ТП Финанс **0061\",",
											"        \"typeCaption\": \"Расчетный счет\"",
											"    },",
											"    {",
											"        \"type\": \"14\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"credits\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"45207810600000019696\",",
											"        \"status\": \"new\",",
											"        \"info\": undefined,",
											"        \"typeCaption\": \"Ссудный счет\"",
											"    },",
											"    {",
											"        \"type\": \"15\",",
											"        \"subtype\": \"115\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"47422810000000002510\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Транзитный для з/п СБП\",",
											"        \"typeCaption\": \"Транзитный для з/п СБП\"",
											"    },",
											"    {",
											"        \"type\": \"16\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"45812810100000000558\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Просрочка по кредитам\",",
											"        \"typeCaption\": \"Просрочка по кредитам\"",
											"    },",
											"    {",
											"        \"type\": \"17\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"45812810714001000558\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Задолженность по РКО\",",
											"        \"typeCaption\": \"Задолженность по РКО\"",
											"    },",
											"    {",
											"        \"type\": \"18\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"40901810100000007593\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет аккредитива\",",
											"        \"typeCaption\": \"Счет аккредитива\"",
											"    },",
											"    {",
											"        \"type\": \"19\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40821810311000000003\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет платежного агента **0003\",",
											"        \"typeCaption\": \"Специальный счет платежного агента/субагента\"",
											"    },",
											"    {",
											"        \"type\": \"20\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40821810711000000001\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Счет поставщика **0001\",",
											"        \"typeCaption\": \"Специальный счет поставщика\"",
											"    },",
											"    {",
											"        \"type\": \"21\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"47423810700000004435\",",
											"        \"status\": \"new\",",
											"        \"info\": \" Требования, приобретённые, Артэкс ООО, 30090/9-2023 от 27.09.2023\",",
											"        \"typeCaption\": \"Счета для учета агентского факторинга\"",
											"    },",
											"    {",
											"        \"type\": \"22\",",
											"        \"subtype\": \"0\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"false\",",
											"        \"number\": \"47423156700000047114\",",
											"        \"status\": \"new\",",
											"        \"info\": \"Комиссия, Бел Лайт Групп ООО, 47114/10-2021 от 06.10.2021\",",
											"        \"typeCaption\": \"Счета для учета комиссии по Агентскому факторингу\"",
											"    },",
											"    {",
											"        \"type\": \"70\",",
											"        \"subtype\": \"1000\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702156100000011894\",",
											"        \"status\": \"new\",",
											"        \"info\": \"40702156100000011894\",",
											"        \"typeCaption\": \"Валютный счет БП\"",
											"    },",
											"    {",
											"        \"type\": \"71\",",
											"        \"subtype\": \"1001\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702156400002311894\",",
											"        \"status\": \"new\",",
											"        \"info\": \"40702156400002311894                транзитный\",",
											"        \"typeCaption\": \"Транзитный счет БП\"",
											"    },",
											"    {",
											"        \"type\": \"72\",",
											"        \"subtype\": \"1002\",",
											"        \"array\": \"accounts\",",
											"        \"visible\": \"true\",",
											"        \"number\": \"40702810200000011894\",",
											"        \"status\": \"new\",",
											"        \"info\": \"40702810200000011894\",",
											"        \"typeCaption\": \"Расчетный счет БП\"",
											"    },",
											"]",
											"",
											"",
											"",
											"",
											"// Загоняю ответ в переменную",
											"let jsonData = pm.response.json();",
											"",
											"",
											"for (let i = 0; i < Type.length; i++) {",
											"",
											"    console.log(`${i + 1}` + ' ПРОГОН (i= ' + i + '). _______________________________________________')",
											"",
											"",
											"    //ИЩУ НАЗВАНИЕ МАССИВА",
											"    //Ищу параметр array по номеру счета в тестовых данных - это нужно, чтобы в ответе (рест product) проверить, что счет приходит в правильном массиве (accounts/credits/deposits/cards)",
											"",
											"    let targetValue = Type[i].number //Номер счета в тестовых данных",
											"    let targetValueType = Type[i].type //Значение subtype в тестовых данных",
											"    let targetValueSubtype = Type[i].subtype //Значение subtype в тестовых данных",
											"    console.log('Номер счета, который я ищу в тестовых данных - ', targetValue)",
											"    console.log('Тип счета, который я ищу в тестовых данных - ', targetValueType)",
											"    console.log('Подтип счета, который я ищу в тестовых данных - ', targetValueSubtype)",
											"",
											"",
											"",
											"    let foundInArray = null; // Переменная для хранения имени массива, в котором найден номер счета (targetValue)",
											"    let isFound = false; // Флаг для отслеживания наличия найденного значения",
											"",
											"    // Проходимся по каждому массиву в ответе",
											"    for (let arrayName in jsonData) {",
											"        let currentArray = jsonData[arrayName];",
											"",
											"        console.log('прогон по массиву ', arrayName)",
											"        // console.log('Печатаю массив currentArray ', currentArray)",
											"",
											"        // Проверка, что элемент в ответе (accounts/credits/deposits/cards) ЯВЛЯЕТСЯ МАССИВОМ",
											"        if (Array.isArray(currentArray)) {",
											"",
											"            // Ищу название массива в ресте product. Проверяем каждый JSON-объект в текущем массиве",
											"            for (let i = 0; i < currentArray.length; i++) {",
											"                // console.log('ищем элемент в массиве ', arrayName)",
											"",
											"                // Проверяем значение параметра",
											"                if ((currentArray[i].number === targetValue) && (currentArray[i].type === targetValueType) && (currentArray[i].subtype === targetValueSubtype)) {",
											"                    foundInArray = arrayName;",
											"",
											"                    console.log(\"номер массива (accounts/credits/deposits/cards), в котором найден счет NumberArrayContainsType - \", i);",
											"                    pm.variables.set('NumberArrayContainsType', i)",
											"                    isFound = true; // Устанавливаем флаг в true",
											"                    break;",
											"                }",
											"            }",
											"        }",
											"        else {",
											"            if ((currentArray[i].number === targetValue) && (currentArray[i].subtype === targetValueSubtype)) {",
											"                foundInArray = arrayName;",
											"                isFound = true; // Устанавливаем флаг в true",
											"                break;",
											"            }",
											"        }",
											"",
											"        if (isFound) {",
											"            break;",
											"        }",
											"    }",
											"",
											"    // Выводим результат",
											"    if (isFound) {",
											"        console.log(`Значение ${targetValue} найдено в массиве ${foundInArray}.`);",
											"        console.log('Значанение subtype из тестовых данных ', targetValueSubtype)",
											"    } else {",
											"        console.log(`Значение ${targetValue} не найдено в массивах.`);",
											"    }",
											"    //ПОИСК ПО МАССИВУ ЗАКОНЧЕН",
											"",
											"",
											"",
											"",
											"    //Проверяю рест product.____ (accounds/credits/deposits/card) является ли массивом",
											"    //accounds/credits/deposits/card - являются массивами",
											"    if (Array.isArray(jsonData[foundInArray])) {",
											"        console.log(`${foundInArray} - это массив`);",
											"        console.log(`Значение subtype из jsonData.${[foundInArray]}[${targetValueSubtype}]`, jsonData[foundInArray][targetValueSubtype])",
											"",
											"        //Определяю тип счета (1, 2, 3...70) в ресте product",
											"        let elementType = jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].type",
											"        let elementSubtype = jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].subtype",
											"",
											"        console.log('Номер типа счета из реста product. Переменная elementType =', elementType)",
											"",
											"        //Определяю номер элемента в массиве в ресте product",
											"        let numberInArray = jsonData[foundInArray].findIndex(x => x.type === `${elementType}`);",
											"        console.log('Номер элемента в ресте product - numberInArray=', numberInArray)",
											"",
											"        //Определяю номер элемента в массиве тестовых данных (в самом начале), у которого параметр \"type\" равен переменной elementType",
											"        let numberValueType = i",
											"        console.log('Номер элемента в массиве тестовых данных - numberValueType=', numberValueType)",
											"",
											"",
											"        //ТЕСТЫ",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ` - Массив ${foundInArray} определен верно`, () => {",
											"            pm.expect(foundInArray).to.eql(Type[numberValueType].array);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Visible - значение приходит правильное', () => {",
											"            pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].visible).to.eql(Type[numberValueType].visible);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Number - значение приходит правильное', () => {",
											"            pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].number).to.eql(Type[numberValueType].number);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Subtype - значение приходит правильное', () => {",
											"            pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].subtype).to.eql(Type[numberValueType].subtype);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Status - значение приходит правильное', () => {",
											"            pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].status).to.eql(Type[numberValueType].status);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Info - значение приходит правильное', () => {",
											"            pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].info).to.eql(Type[numberValueType].info);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - TypeCaption - значение приходит правильное', () => {",
											"            pm.expect(jsonData[foundInArray][pm.variables.get(\"NumberArrayContainsType\")].typeCaption).to.eql(Type[numberValueType].typeCaption);",
											"        })",
											"",
											"        pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Параметр \"Actual\" - время синхронизации счета', () => {",
											"            pm.expect(jsonData.accounts[pm.variables.get(\"NumberArrayContainsType\")].actual).include(pm.variables.get(\"actualDate\"));",
											"        })",
											"    }",
											"",
											"    //accounds/credits/deposits/card - не являются массивами",
											"    else {",
											"        console.log(`${foundInArray} - это НЕ массив`);",
											"",
											"        //Определяю тип счета (1, 2, 3...70) в ресте product",
											"        let elementType = jsonData[foundInArray].type",
											"",
											"        //Определяю номер элемента в массиве тестовых данных (в самом начале), у которого параметр \"type\" равен переменной elementType",
											"        let numberValueType = Type.findIndex(x => x.type === `${elementType}`)",
											"",
											"",
											"        //ТЕСТЫ",
											"        {",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ` - Массив ${foundInArray} определен верно`, () => {",
											"                pm.expect(foundInArray).to.eql(Type[numberValueType].array);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Visible - значение приходит правильное', () => {",
											"                pm.expect(jsonData[foundInArray].visible).to.eql(Type[numberValueType].visible);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Number - значение приходит правильное', () => {",
											"                pm.expect(jsonData[foundInArray].number).to.eql(Type[numberValueType].number);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Subtype - значение приходит правильное', () => {",
											"                pm.expect(jsonData[foundInArray].subtype).to.eql(Type[numberValueType].subtype);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Status - значение приходит правильное', () => {",
											"                pm.expect(jsonData[foundInArray].status).to.eql(Type[numberValueType].status);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Info - значение приходит правильное', () => {",
											"                pm.expect(jsonData[foundInArray].info).to.eql(Type[numberValueType].info);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - TypeCaption - значение приходит правильное', () => {",
											"                pm.expect(jsonData[foundInArray].typeCaption).to.eql(Type[numberValueType].typeCaption);",
											"            })",
											"",
											"            pm.test('Тип ' + elementType + ', Subtype ' + elementSubtype + ' - Параметр \"Actual\" - время синхронизации счета', () => {",
											"                pm.expect(jsonData[foundInArray].actual).include(pm.variables.get(\"actualDate\"));",
											"            })",
											"        }",
											"",
											"    }",
											"}"
										],
										"type": "text/javascript",
										"id": "4fe4f334-e134-4b18-9085-88ace571bec1"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// ПОЛУЧАЮ ТЕКУЩУЮ ДАТУ И ВРЕМЯ",
											"let currentDate = new Date();",
											"",
											"/*",
											"// Установка часового пояса по городу Москва",
											"// +1 - это добавление 1 часа к текущему времени в Сербии",
											"// currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
											"*/",
											"",
											"currentDate.setUTCHours(currentDate.getUTCHours());",
											"",
											"// Форматируем год",
											"let year = currentDate.getFullYear();",
											"",
											"// Форматируем месяц",
											"let month = (\"0\" + (currentDate.getMonth() + 1)).slice(-2);",
											"",
											"// Форматируем день",
											"let day = (\"0\" + currentDate.getDate()).slice(-2);",
											"",
											"// Форматируем часы",
											"let hours = (\"0\" + currentDate.getHours()).slice(-2);",
											"",
											"// Форматируем минуты",
											"let minutes = (\"0\" + currentDate.getMinutes()).slice(-2);",
											"",
											"// Собираем отформатированную дату и время",
											"let actualDate = `${year}-${month}-${day}`;",
											"// let actualDate = `${year}-${month}-${day}T${hours}:${minutes}`; //Время с использованием часа и минут",
											"",
											"console.log('ТЕКУЩАЯ ДАТА -', actualDate)",
											"",
											"pm.variables.set(\"actualDate\", actualDate);"
										],
										"type": "text/javascript",
										"id": "8dd0207b-b523-41a4-907e-ec3b0d4c0852"
									}
								}
							],
							"id": "a95fe3be-69e6-44fe-9dd7-587710a7a882",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/stateful/corp/product?sync=true&with_blocked=true&with_stays=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"stateful",
										"corp",
										"product"
									],
									"query": [
										{
											"key": "sync",
											"value": "true"
										},
										{
											"key": "with_blocked",
											"value": "true"
										},
										{
											"key": "with_stays",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "da69e08e-82a6-46c3-af21-1d6b6cfc7237",
					"description": "Запустить всю папку через run collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d35a1d94-633f-4338-9a06-7f1080ca20ec"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"id": "94395ace-dee8-42e1-8508-3ee3429d2f45"
							}
						}
					]
				}
			],
			"id": "d0549f29-bc28-4972-9cc2-01dbc6f3a232"
		}
	]
}